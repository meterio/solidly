/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "DystFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DystFactory__factory>;
    getContractFactory(
      name: "DystPair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DystPair__factory>;
    getContractFactory(
      name: "GovernanceTreasury",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernanceTreasury__factory>;
    getContractFactory(
      name: "PairFees",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PairFees__factory>;
    getContractFactory(
      name: "VoltFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VoltFactory__factory>;
    getContractFactory(
      name: "VoltPair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VoltPair__factory>;
    getContractFactory(
      name: "DystRouter01",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DystRouter01__factory>;
    getContractFactory(
      name: "VoltRouter01",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VoltRouter01__factory>;
    getContractFactory(
      name: "Bribe",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Bribe__factory>;
    getContractFactory(
      name: "BribeFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BribeFactory__factory>;
    getContractFactory(
      name: "Gauge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Gauge__factory>;
    getContractFactory(
      name: "GaugeFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GaugeFactory__factory>;
    getContractFactory(
      name: "MultiRewardsPoolBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MultiRewardsPoolBase__factory>;
    getContractFactory(
      name: "Dyst",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Dyst__factory>;
    getContractFactory(
      name: "DystMinter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DystMinter__factory>;
    getContractFactory(
      name: "Minter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Minter__factory>;
    getContractFactory(
      name: "Volt",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Volt__factory>;
    getContractFactory(
      name: "DystVoter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DystVoter__factory>;
    getContractFactory(
      name: "Ve",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ve__factory>;
    getContractFactory(
      name: "VeDist",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VeDist__factory>;
    getContractFactory(
      name: "VoltVoter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VoltVoter__factory>;
    getContractFactory(
      name: "Controller",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Controller__factory>;
    getContractFactory(
      name: "IBribe",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBribe__factory>;
    getContractFactory(
      name: "IBribeFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBribeFactory__factory>;
    getContractFactory(
      name: "ICallee",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICallee__factory>;
    getContractFactory(
      name: "IController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IController__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "IFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFactory__factory>;
    getContractFactory(
      name: "IGauge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGauge__factory>;
    getContractFactory(
      name: "IGaugeFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGaugeFactory__factory>;
    getContractFactory(
      name: "IMinter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMinter__factory>;
    getContractFactory(
      name: "IMultiRewardsPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMultiRewardsPool__factory>;
    getContractFactory(
      name: "IPair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPair__factory>;
    getContractFactory(
      name: "IRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRouter__factory>;
    getContractFactory(
      name: "IRouterOld",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRouterOld__factory>;
    getContractFactory(
      name: "IUnderlying",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUnderlying__factory>;
    getContractFactory(
      name: "IUniswapV2Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Factory__factory>;
    getContractFactory(
      name: "IVe",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVe__factory>;
    getContractFactory(
      name: "IVeDist",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVeDist__factory>;
    getContractFactory(
      name: "IVoter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVoter__factory>;
    getContractFactory(
      name: "IWMATIC",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWMATIC__factory>;
    getContractFactory(
      name: "IWMTR",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWMTR__factory>;
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "Migrator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Migrator__factory>;
    getContractFactory(
      name: "BrokenToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BrokenToken__factory>;
    getContractFactory(
      name: "BrokenWMATIC",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BrokenWMATIC__factory>;
    getContractFactory(
      name: "BrokenWMTR",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BrokenWMTR__factory>;
    getContractFactory(
      name: "ContractTestHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContractTestHelper__factory>;
    getContractFactory(
      name: "ContractTestHelper2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContractTestHelper2__factory>;
    getContractFactory(
      name: "Multicall2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Multicall2__factory>;
    getContractFactory(
      name: "MultiRewardsPoolMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MultiRewardsPoolMock__factory>;
    getContractFactory(
      name: "StakingRewards",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakingRewards__factory>;
    getContractFactory(
      name: "Token",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Token__factory>;
    getContractFactory(
      name: "TokenWithFee",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenWithFee__factory>;
    getContractFactory(
      name: "UniswapV2ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2ERC20__factory>;
    getContractFactory(
      name: "UniswapV2Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2Factory__factory>;
    getContractFactory(
      name: "UniswapV2Pair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2Pair__factory>;

    getContractAt(
      name: "DystFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DystFactory>;
    getContractAt(
      name: "DystPair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DystPair>;
    getContractAt(
      name: "GovernanceTreasury",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernanceTreasury>;
    getContractAt(
      name: "PairFees",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PairFees>;
    getContractAt(
      name: "VoltFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VoltFactory>;
    getContractAt(
      name: "VoltPair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VoltPair>;
    getContractAt(
      name: "DystRouter01",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DystRouter01>;
    getContractAt(
      name: "VoltRouter01",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VoltRouter01>;
    getContractAt(
      name: "Bribe",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Bribe>;
    getContractAt(
      name: "BribeFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BribeFactory>;
    getContractAt(
      name: "Gauge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Gauge>;
    getContractAt(
      name: "GaugeFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GaugeFactory>;
    getContractAt(
      name: "MultiRewardsPoolBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MultiRewardsPoolBase>;
    getContractAt(
      name: "Dyst",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Dyst>;
    getContractAt(
      name: "DystMinter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DystMinter>;
    getContractAt(
      name: "Minter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Minter>;
    getContractAt(
      name: "Volt",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Volt>;
    getContractAt(
      name: "DystVoter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DystVoter>;
    getContractAt(
      name: "Ve",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ve>;
    getContractAt(
      name: "VeDist",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VeDist>;
    getContractAt(
      name: "VoltVoter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VoltVoter>;
    getContractAt(
      name: "Controller",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Controller>;
    getContractAt(
      name: "IBribe",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBribe>;
    getContractAt(
      name: "IBribeFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBribeFactory>;
    getContractAt(
      name: "ICallee",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICallee>;
    getContractAt(
      name: "IController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IController>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "IFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFactory>;
    getContractAt(
      name: "IGauge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGauge>;
    getContractAt(
      name: "IGaugeFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGaugeFactory>;
    getContractAt(
      name: "IMinter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMinter>;
    getContractAt(
      name: "IMultiRewardsPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMultiRewardsPool>;
    getContractAt(
      name: "IPair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPair>;
    getContractAt(
      name: "IRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRouter>;
    getContractAt(
      name: "IRouterOld",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRouterOld>;
    getContractAt(
      name: "IUnderlying",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUnderlying>;
    getContractAt(
      name: "IUniswapV2Factory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Factory>;
    getContractAt(
      name: "IVe",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVe>;
    getContractAt(
      name: "IVeDist",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVeDist>;
    getContractAt(
      name: "IVoter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVoter>;
    getContractAt(
      name: "IWMATIC",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWMATIC>;
    getContractAt(
      name: "IWMTR",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWMTR>;
    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "Migrator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Migrator>;
    getContractAt(
      name: "BrokenToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BrokenToken>;
    getContractAt(
      name: "BrokenWMATIC",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BrokenWMATIC>;
    getContractAt(
      name: "BrokenWMTR",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BrokenWMTR>;
    getContractAt(
      name: "ContractTestHelper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContractTestHelper>;
    getContractAt(
      name: "ContractTestHelper2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContractTestHelper2>;
    getContractAt(
      name: "Multicall2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Multicall2>;
    getContractAt(
      name: "MultiRewardsPoolMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MultiRewardsPoolMock>;
    getContractAt(
      name: "StakingRewards",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakingRewards>;
    getContractAt(
      name: "Token",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Token>;
    getContractAt(
      name: "TokenWithFee",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenWithFee>;
    getContractAt(
      name: "UniswapV2ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV2ERC20>;
    getContractAt(
      name: "UniswapV2Factory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV2Factory>;
    getContractAt(
      name: "UniswapV2Pair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV2Pair>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
