/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface DystMinterInterface extends ethers.utils.Interface {
  functions: {
    "activePeriod()": FunctionFragment;
    "baseWeeklyEmission()": FunctionFragment;
    "calculateEmission()": FunctionFragment;
    "calculateGrowth(uint256)": FunctionFragment;
    "circulatingEmission()": FunctionFragment;
    "circulatingSupply()": FunctionFragment;
    "controller()": FunctionFragment;
    "initialStubCirculation()": FunctionFragment;
    "initialize(address[],uint256[],uint256)": FunctionFragment;
    "token()": FunctionFragment;
    "updatePeriod()": FunctionFragment;
    "ve()": FunctionFragment;
    "weeklyEmission()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "activePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseWeeklyEmission",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateEmission",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateGrowth",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "circulatingEmission",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "circulatingSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialStubCirculation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string[], BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updatePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ve", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "weeklyEmission",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "activePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseWeeklyEmission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateEmission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateGrowth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "circulatingEmission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "circulatingSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialStubCirculation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updatePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "weeklyEmission",
    data: BytesLike
  ): Result;

  events: {
    "Mint(address,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
}

export type MintEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
    sender: string;
    weekly: BigNumber;
    growth: BigNumber;
    circulatingSupply: BigNumber;
    circulatingEmission: BigNumber;
  }
>;

export class DystMinter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DystMinterInterface;

  functions: {
    activePeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    baseWeeklyEmission(overrides?: CallOverrides): Promise<[BigNumber]>;

    calculateEmission(overrides?: CallOverrides): Promise<[BigNumber]>;

    calculateGrowth(
      _minted: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    circulatingEmission(overrides?: CallOverrides): Promise<[BigNumber]>;

    circulatingSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    initialStubCirculation(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      claimants: string[],
      amounts: BigNumberish[],
      totalAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    updatePeriod(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ve(overrides?: CallOverrides): Promise<[string]>;

    weeklyEmission(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  activePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  baseWeeklyEmission(overrides?: CallOverrides): Promise<BigNumber>;

  calculateEmission(overrides?: CallOverrides): Promise<BigNumber>;

  calculateGrowth(
    _minted: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  circulatingEmission(overrides?: CallOverrides): Promise<BigNumber>;

  circulatingSupply(overrides?: CallOverrides): Promise<BigNumber>;

  controller(overrides?: CallOverrides): Promise<string>;

  initialStubCirculation(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    claimants: string[],
    amounts: BigNumberish[],
    totalAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  updatePeriod(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ve(overrides?: CallOverrides): Promise<string>;

  weeklyEmission(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    activePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    baseWeeklyEmission(overrides?: CallOverrides): Promise<BigNumber>;

    calculateEmission(overrides?: CallOverrides): Promise<BigNumber>;

    calculateGrowth(
      _minted: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    circulatingEmission(overrides?: CallOverrides): Promise<BigNumber>;

    circulatingSupply(overrides?: CallOverrides): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<string>;

    initialStubCirculation(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      claimants: string[],
      amounts: BigNumberish[],
      totalAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;

    updatePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    ve(overrides?: CallOverrides): Promise<string>;

    weeklyEmission(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Mint(address,uint256,uint256,uint256,uint256)"(
      sender?: string | null,
      weekly?: null,
      growth?: null,
      circulatingSupply?: null,
      circulatingEmission?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        sender: string;
        weekly: BigNumber;
        growth: BigNumber;
        circulatingSupply: BigNumber;
        circulatingEmission: BigNumber;
      }
    >;

    Mint(
      sender?: string | null,
      weekly?: null,
      growth?: null,
      circulatingSupply?: null,
      circulatingEmission?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        sender: string;
        weekly: BigNumber;
        growth: BigNumber;
        circulatingSupply: BigNumber;
        circulatingEmission: BigNumber;
      }
    >;
  };

  estimateGas: {
    activePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    baseWeeklyEmission(overrides?: CallOverrides): Promise<BigNumber>;

    calculateEmission(overrides?: CallOverrides): Promise<BigNumber>;

    calculateGrowth(
      _minted: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    circulatingEmission(overrides?: CallOverrides): Promise<BigNumber>;

    circulatingSupply(overrides?: CallOverrides): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    initialStubCirculation(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      claimants: string[],
      amounts: BigNumberish[],
      totalAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    updatePeriod(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ve(overrides?: CallOverrides): Promise<BigNumber>;

    weeklyEmission(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    activePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseWeeklyEmission(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateEmission(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateGrowth(
      _minted: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    circulatingEmission(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    circulatingSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialStubCirculation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      claimants: string[],
      amounts: BigNumberish[],
      totalAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updatePeriod(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weeklyEmission(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
