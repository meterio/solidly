/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IRouterInterface extends ethers.utils.Interface {
  functions: {
    "WMTR()": FunctionFragment;
    "addLiquidity(address,address,bool,uint256,uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "addLiquidityMTR(address,bool,uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "factory()": FunctionFragment;
    "getAmountIn(uint256,uint256,uint256)": FunctionFragment;
    "getAmountOut(uint256,address,address)": FunctionFragment;
    "getAmountsIn(uint256,(address,address,bool)[])": FunctionFragment;
    "getAmountsOut(uint256,(address,address,bool)[])": FunctionFragment;
    "getExactAmountOut(uint256,address,address,bool)": FunctionFragment;
    "getReserves(address,address,bool)": FunctionFragment;
    "isPair(address)": FunctionFragment;
    "pairFor(address,address,bool)": FunctionFragment;
    "quoteAddLiquidity(address,address,bool,uint256,uint256)": FunctionFragment;
    "quoteLiquidity(uint256,uint256,uint256)": FunctionFragment;
    "quoteRemoveLiquidity(address,address,bool,uint256)": FunctionFragment;
    "removeLiquidity(address,address,bool,uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "removeLiquidityMTR(address,bool,uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "removeLiquidityMTRSupportingFeeOnTransferTokens(address,bool,uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "removeLiquidityMTRWithPermit(address,bool,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)": FunctionFragment;
    "removeLiquidityMTRWithPermitSupportingFeeOnTransferTokens(address,bool,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)": FunctionFragment;
    "removeLiquidityWithPermit(address,address,bool,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)": FunctionFragment;
    "sortTokens(address,address)": FunctionFragment;
    "swapExactMTRForTokens(uint256,(address,address,bool)[],address,uint256)": FunctionFragment;
    "swapExactMTRForTokensSupportingFeeOnTransferTokens(uint256,(address,address,bool)[],address,uint256)": FunctionFragment;
    "swapExactTokensForMTR(uint256,uint256,(address,address,bool)[],address,uint256)": FunctionFragment;
    "swapExactTokensForMTRSupportingFeeOnTransferTokens(uint256,uint256,(address,address,bool)[],address,uint256)": FunctionFragment;
    "swapExactTokensForTokens(uint256,uint256,(address,address,bool)[],address,uint256)": FunctionFragment;
    "swapExactTokensForTokensSimple(uint256,uint256,address,address,bool,address,uint256)": FunctionFragment;
    "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,(address,address,bool)[],address,uint256)": FunctionFragment;
    "swapMTRForExactTokens(uint256,(address,address,bool)[],address,uint256)": FunctionFragment;
    "swapTokensForExactMTR(uint256,uint256,(address,address,bool)[],address,uint256)": FunctionFragment;
    "swapTokensForExactTokens(uint256,uint256,(address,address,bool)[],address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "WMTR", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [
      string,
      string,
      boolean,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityMTR",
    values: [
      string,
      boolean,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAmountIn",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountOut",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountsIn",
    values: [BigNumberish, { from: string; to: string; stable: boolean }[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountsOut",
    values: [BigNumberish, { from: string; to: string; stable: boolean }[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getExactAmountOut",
    values: [BigNumberish, string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserves",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "isPair", values: [string]): string;
  encodeFunctionData(
    functionFragment: "pairFor",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteAddLiquidity",
    values: [string, string, boolean, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteLiquidity",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteRemoveLiquidity",
    values: [string, string, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [
      string,
      string,
      boolean,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityMTR",
    values: [
      string,
      boolean,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityMTRSupportingFeeOnTransferTokens",
    values: [
      string,
      boolean,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityMTRWithPermit",
    values: [
      string,
      boolean,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      boolean,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityMTRWithPermitSupportingFeeOnTransferTokens",
    values: [
      string,
      boolean,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      boolean,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityWithPermit",
    values: [
      string,
      string,
      boolean,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      boolean,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sortTokens",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactMTRForTokens",
    values: [
      BigNumberish,
      { from: string; to: string; stable: boolean }[],
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactMTRForTokensSupportingFeeOnTransferTokens",
    values: [
      BigNumberish,
      { from: string; to: string; stable: boolean }[],
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForMTR",
    values: [
      BigNumberish,
      BigNumberish,
      { from: string; to: string; stable: boolean }[],
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForMTRSupportingFeeOnTransferTokens",
    values: [
      BigNumberish,
      BigNumberish,
      { from: string; to: string; stable: boolean }[],
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForTokens",
    values: [
      BigNumberish,
      BigNumberish,
      { from: string; to: string; stable: boolean }[],
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForTokensSimple",
    values: [
      BigNumberish,
      BigNumberish,
      string,
      string,
      boolean,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForTokensSupportingFeeOnTransferTokens",
    values: [
      BigNumberish,
      BigNumberish,
      { from: string; to: string; stable: boolean }[],
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapMTRForExactTokens",
    values: [
      BigNumberish,
      { from: string; to: string; stable: boolean }[],
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensForExactMTR",
    values: [
      BigNumberish,
      BigNumberish,
      { from: string; to: string; stable: boolean }[],
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensForExactTokens",
    values: [
      BigNumberish,
      BigNumberish,
      { from: string; to: string; stable: boolean }[],
      string,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(functionFragment: "WMTR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityMTR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAmountIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountsIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountsOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExactAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isPair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pairFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quoteAddLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteRemoveLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityMTR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityMTRSupportingFeeOnTransferTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityMTRWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityMTRWithPermitSupportingFeeOnTransferTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sortTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapExactMTRForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactMTRForTokensSupportingFeeOnTransferTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForMTR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForMTRSupportingFeeOnTransferTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForTokensSimple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForTokensSupportingFeeOnTransferTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapMTRForExactTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensForExactMTR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensForExactTokens",
    data: BytesLike
  ): Result;

  events: {};
}

export class IRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IRouterInterface;

  functions: {
    WMTR(overrides?: CallOverrides): Promise<[string]>;

    addLiquidity(
      tokenA: string,
      tokenB: string,
      stable: boolean,
      amountADesired: BigNumberish,
      amountBDesired: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addLiquidityMTR(
      token: string,
      stable: boolean,
      amountTokenDesired: BigNumberish,
      amountTokenMin: BigNumberish,
      amountMTRMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    getAmountIn(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { amountIn: BigNumber; stable: boolean }>;

    getAmountOut(
      amountIn: BigNumberish,
      tokenIn: string,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { amount: BigNumber; stable: boolean }>;

    getAmountsIn(
      amountOut: BigNumberish,
      routes: { from: string; to: string; stable: boolean }[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { amounts: BigNumber[] }>;

    getAmountsOut(
      amountIn: BigNumberish,
      routes: { from: string; to: string; stable: boolean }[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { amounts: BigNumber[] }>;

    getExactAmountOut(
      amountIn: BigNumberish,
      tokenIn: string,
      tokenOut: string,
      stable: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    getReserves(
      tokenA: string,
      tokenB: string,
      stable: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { reserveA: BigNumber; reserveB: BigNumber }
    >;

    isPair(pair: string, overrides?: CallOverrides): Promise<[boolean]>;

    pairFor(
      tokenA: string,
      tokenB: string,
      stable: boolean,
      overrides?: CallOverrides
    ): Promise<[string] & { pair: string }>;

    quoteAddLiquidity(
      tokenA: string,
      tokenB: string,
      stable: boolean,
      amountADesired: BigNumberish,
      amountBDesired: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amountA: BigNumber;
        amountB: BigNumber;
        liquidity: BigNumber;
      }
    >;

    quoteLiquidity(
      amountA: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountB: BigNumber }>;

    quoteRemoveLiquidity(
      tokenA: string,
      tokenB: string,
      stable: boolean,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountA: BigNumber; amountB: BigNumber }
    >;

    removeLiquidity(
      tokenA: string,
      tokenB: string,
      stable: boolean,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLiquidityMTR(
      token: string,
      stable: boolean,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountMTRMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLiquidityMTRSupportingFeeOnTransferTokens(
      token: string,
      stable: boolean,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountFTMMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLiquidityMTRWithPermit(
      token: string,
      stable: boolean,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountMTRMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLiquidityMTRWithPermitSupportingFeeOnTransferTokens(
      token: string,
      stable: boolean,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountFTMMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLiquidityWithPermit(
      tokenA: string,
      tokenB: string,
      stable: boolean,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sortTokens(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<[string, string] & { token0: string; token1: string }>;

    swapExactMTRForTokens(
      amountOutMin: BigNumberish,
      routes: { from: string; to: string; stable: boolean }[],
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapExactMTRForTokensSupportingFeeOnTransferTokens(
      amountOutMin: BigNumberish,
      routes: { from: string; to: string; stable: boolean }[],
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapExactTokensForMTR(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      routes: { from: string; to: string; stable: boolean }[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapExactTokensForMTRSupportingFeeOnTransferTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      routes: { from: string; to: string; stable: boolean }[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapExactTokensForTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      routes: { from: string; to: string; stable: boolean }[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapExactTokensForTokensSimple(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      tokenFrom: string,
      tokenTo: string,
      stable: boolean,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapExactTokensForTokensSupportingFeeOnTransferTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      routes: { from: string; to: string; stable: boolean }[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapMTRForExactTokens(
      amountOut: BigNumberish,
      routes: { from: string; to: string; stable: boolean }[],
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapTokensForExactMTR(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      routes: { from: string; to: string; stable: boolean }[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapTokensForExactTokens(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      routes: { from: string; to: string; stable: boolean }[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  WMTR(overrides?: CallOverrides): Promise<string>;

  addLiquidity(
    tokenA: string,
    tokenB: string,
    stable: boolean,
    amountADesired: BigNumberish,
    amountBDesired: BigNumberish,
    amountAMin: BigNumberish,
    amountBMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addLiquidityMTR(
    token: string,
    stable: boolean,
    amountTokenDesired: BigNumberish,
    amountTokenMin: BigNumberish,
    amountMTRMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  getAmountIn(
    amountOut: BigNumberish,
    reserveIn: BigNumberish,
    reserveOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean] & { amountIn: BigNumber; stable: boolean }>;

  getAmountOut(
    amountIn: BigNumberish,
    tokenIn: string,
    tokenOut: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean] & { amount: BigNumber; stable: boolean }>;

  getAmountsIn(
    amountOut: BigNumberish,
    routes: { from: string; to: string; stable: boolean }[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getAmountsOut(
    amountIn: BigNumberish,
    routes: { from: string; to: string; stable: boolean }[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getExactAmountOut(
    amountIn: BigNumberish,
    tokenIn: string,
    tokenOut: string,
    stable: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReserves(
    tokenA: string,
    tokenB: string,
    stable: boolean,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { reserveA: BigNumber; reserveB: BigNumber }
  >;

  isPair(pair: string, overrides?: CallOverrides): Promise<boolean>;

  pairFor(
    tokenA: string,
    tokenB: string,
    stable: boolean,
    overrides?: CallOverrides
  ): Promise<string>;

  quoteAddLiquidity(
    tokenA: string,
    tokenB: string,
    stable: boolean,
    amountADesired: BigNumberish,
    amountBDesired: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      amountA: BigNumber;
      amountB: BigNumber;
      liquidity: BigNumber;
    }
  >;

  quoteLiquidity(
    amountA: BigNumberish,
    reserveA: BigNumberish,
    reserveB: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  quoteRemoveLiquidity(
    tokenA: string,
    tokenB: string,
    stable: boolean,
    liquidity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amountA: BigNumber; amountB: BigNumber }
  >;

  removeLiquidity(
    tokenA: string,
    tokenB: string,
    stable: boolean,
    liquidity: BigNumberish,
    amountAMin: BigNumberish,
    amountBMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLiquidityMTR(
    token: string,
    stable: boolean,
    liquidity: BigNumberish,
    amountTokenMin: BigNumberish,
    amountMTRMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLiquidityMTRSupportingFeeOnTransferTokens(
    token: string,
    stable: boolean,
    liquidity: BigNumberish,
    amountTokenMin: BigNumberish,
    amountFTMMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLiquidityMTRWithPermit(
    token: string,
    stable: boolean,
    liquidity: BigNumberish,
    amountTokenMin: BigNumberish,
    amountMTRMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    approveMax: boolean,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLiquidityMTRWithPermitSupportingFeeOnTransferTokens(
    token: string,
    stable: boolean,
    liquidity: BigNumberish,
    amountTokenMin: BigNumberish,
    amountFTMMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    approveMax: boolean,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLiquidityWithPermit(
    tokenA: string,
    tokenB: string,
    stable: boolean,
    liquidity: BigNumberish,
    amountAMin: BigNumberish,
    amountBMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    approveMax: boolean,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sortTokens(
    tokenA: string,
    tokenB: string,
    overrides?: CallOverrides
  ): Promise<[string, string] & { token0: string; token1: string }>;

  swapExactMTRForTokens(
    amountOutMin: BigNumberish,
    routes: { from: string; to: string; stable: boolean }[],
    to: string,
    deadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapExactMTRForTokensSupportingFeeOnTransferTokens(
    amountOutMin: BigNumberish,
    routes: { from: string; to: string; stable: boolean }[],
    to: string,
    deadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapExactTokensForMTR(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    routes: { from: string; to: string; stable: boolean }[],
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapExactTokensForMTRSupportingFeeOnTransferTokens(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    routes: { from: string; to: string; stable: boolean }[],
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapExactTokensForTokens(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    routes: { from: string; to: string; stable: boolean }[],
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapExactTokensForTokensSimple(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    tokenFrom: string,
    tokenTo: string,
    stable: boolean,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapExactTokensForTokensSupportingFeeOnTransferTokens(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    routes: { from: string; to: string; stable: boolean }[],
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapMTRForExactTokens(
    amountOut: BigNumberish,
    routes: { from: string; to: string; stable: boolean }[],
    to: string,
    deadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapTokensForExactMTR(
    amountOut: BigNumberish,
    amountInMax: BigNumberish,
    routes: { from: string; to: string; stable: boolean }[],
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapTokensForExactTokens(
    amountOut: BigNumberish,
    amountInMax: BigNumberish,
    routes: { from: string; to: string; stable: boolean }[],
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    WMTR(overrides?: CallOverrides): Promise<string>;

    addLiquidity(
      tokenA: string,
      tokenB: string,
      stable: boolean,
      amountADesired: BigNumberish,
      amountBDesired: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amountA: BigNumber;
        amountB: BigNumber;
        liquidity: BigNumber;
      }
    >;

    addLiquidityMTR(
      token: string,
      stable: boolean,
      amountTokenDesired: BigNumberish,
      amountTokenMin: BigNumberish,
      amountMTRMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amountToken: BigNumber;
        amountMTR: BigNumber;
        liquidity: BigNumber;
      }
    >;

    factory(overrides?: CallOverrides): Promise<string>;

    getAmountIn(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { amountIn: BigNumber; stable: boolean }>;

    getAmountOut(
      amountIn: BigNumberish,
      tokenIn: string,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { amount: BigNumber; stable: boolean }>;

    getAmountsIn(
      amountOut: BigNumberish,
      routes: { from: string; to: string; stable: boolean }[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getAmountsOut(
      amountIn: BigNumberish,
      routes: { from: string; to: string; stable: boolean }[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getExactAmountOut(
      amountIn: BigNumberish,
      tokenIn: string,
      tokenOut: string,
      stable: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserves(
      tokenA: string,
      tokenB: string,
      stable: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { reserveA: BigNumber; reserveB: BigNumber }
    >;

    isPair(pair: string, overrides?: CallOverrides): Promise<boolean>;

    pairFor(
      tokenA: string,
      tokenB: string,
      stable: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    quoteAddLiquidity(
      tokenA: string,
      tokenB: string,
      stable: boolean,
      amountADesired: BigNumberish,
      amountBDesired: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amountA: BigNumber;
        amountB: BigNumber;
        liquidity: BigNumber;
      }
    >;

    quoteLiquidity(
      amountA: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteRemoveLiquidity(
      tokenA: string,
      tokenB: string,
      stable: boolean,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountA: BigNumber; amountB: BigNumber }
    >;

    removeLiquidity(
      tokenA: string,
      tokenB: string,
      stable: boolean,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountA: BigNumber; amountB: BigNumber }
    >;

    removeLiquidityMTR(
      token: string,
      stable: boolean,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountMTRMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountToken: BigNumber; amountMTR: BigNumber }
    >;

    removeLiquidityMTRSupportingFeeOnTransferTokens(
      token: string,
      stable: boolean,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountFTMMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountToken: BigNumber; amountFTM: BigNumber }
    >;

    removeLiquidityMTRWithPermit(
      token: string,
      stable: boolean,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountMTRMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountToken: BigNumber; amountMTR: BigNumber }
    >;

    removeLiquidityMTRWithPermitSupportingFeeOnTransferTokens(
      token: string,
      stable: boolean,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountFTMMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountToken: BigNumber; amountFTM: BigNumber }
    >;

    removeLiquidityWithPermit(
      tokenA: string,
      tokenB: string,
      stable: boolean,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountA: BigNumber; amountB: BigNumber }
    >;

    sortTokens(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<[string, string] & { token0: string; token1: string }>;

    swapExactMTRForTokens(
      amountOutMin: BigNumberish,
      routes: { from: string; to: string; stable: boolean }[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    swapExactMTRForTokensSupportingFeeOnTransferTokens(
      amountOutMin: BigNumberish,
      routes: { from: string; to: string; stable: boolean }[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    swapExactTokensForMTR(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      routes: { from: string; to: string; stable: boolean }[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    swapExactTokensForMTRSupportingFeeOnTransferTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      routes: { from: string; to: string; stable: boolean }[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    swapExactTokensForTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      routes: { from: string; to: string; stable: boolean }[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    swapExactTokensForTokensSimple(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      tokenFrom: string,
      tokenTo: string,
      stable: boolean,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    swapExactTokensForTokensSupportingFeeOnTransferTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      routes: { from: string; to: string; stable: boolean }[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    swapMTRForExactTokens(
      amountOut: BigNumberish,
      routes: { from: string; to: string; stable: boolean }[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    swapTokensForExactMTR(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      routes: { from: string; to: string; stable: boolean }[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    swapTokensForExactTokens(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      routes: { from: string; to: string; stable: boolean }[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;
  };

  filters: {};

  estimateGas: {
    WMTR(overrides?: CallOverrides): Promise<BigNumber>;

    addLiquidity(
      tokenA: string,
      tokenB: string,
      stable: boolean,
      amountADesired: BigNumberish,
      amountBDesired: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addLiquidityMTR(
      token: string,
      stable: boolean,
      amountTokenDesired: BigNumberish,
      amountTokenMin: BigNumberish,
      amountMTRMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    getAmountIn(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountOut(
      amountIn: BigNumberish,
      tokenIn: string,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountsIn(
      amountOut: BigNumberish,
      routes: { from: string; to: string; stable: boolean }[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountsOut(
      amountIn: BigNumberish,
      routes: { from: string; to: string; stable: boolean }[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExactAmountOut(
      amountIn: BigNumberish,
      tokenIn: string,
      tokenOut: string,
      stable: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserves(
      tokenA: string,
      tokenB: string,
      stable: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPair(pair: string, overrides?: CallOverrides): Promise<BigNumber>;

    pairFor(
      tokenA: string,
      tokenB: string,
      stable: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteAddLiquidity(
      tokenA: string,
      tokenB: string,
      stable: boolean,
      amountADesired: BigNumberish,
      amountBDesired: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteLiquidity(
      amountA: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteRemoveLiquidity(
      tokenA: string,
      tokenB: string,
      stable: boolean,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLiquidity(
      tokenA: string,
      tokenB: string,
      stable: boolean,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLiquidityMTR(
      token: string,
      stable: boolean,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountMTRMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLiquidityMTRSupportingFeeOnTransferTokens(
      token: string,
      stable: boolean,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountFTMMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLiquidityMTRWithPermit(
      token: string,
      stable: boolean,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountMTRMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLiquidityMTRWithPermitSupportingFeeOnTransferTokens(
      token: string,
      stable: boolean,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountFTMMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLiquidityWithPermit(
      tokenA: string,
      tokenB: string,
      stable: boolean,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sortTokens(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapExactMTRForTokens(
      amountOutMin: BigNumberish,
      routes: { from: string; to: string; stable: boolean }[],
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapExactMTRForTokensSupportingFeeOnTransferTokens(
      amountOutMin: BigNumberish,
      routes: { from: string; to: string; stable: boolean }[],
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapExactTokensForMTR(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      routes: { from: string; to: string; stable: boolean }[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapExactTokensForMTRSupportingFeeOnTransferTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      routes: { from: string; to: string; stable: boolean }[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapExactTokensForTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      routes: { from: string; to: string; stable: boolean }[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapExactTokensForTokensSimple(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      tokenFrom: string,
      tokenTo: string,
      stable: boolean,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapExactTokensForTokensSupportingFeeOnTransferTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      routes: { from: string; to: string; stable: boolean }[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapMTRForExactTokens(
      amountOut: BigNumberish,
      routes: { from: string; to: string; stable: boolean }[],
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapTokensForExactMTR(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      routes: { from: string; to: string; stable: boolean }[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapTokensForExactTokens(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      routes: { from: string; to: string; stable: boolean }[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    WMTR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addLiquidity(
      tokenA: string,
      tokenB: string,
      stable: boolean,
      amountADesired: BigNumberish,
      amountBDesired: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addLiquidityMTR(
      token: string,
      stable: boolean,
      amountTokenDesired: BigNumberish,
      amountTokenMin: BigNumberish,
      amountMTRMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAmountIn(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountOut(
      amountIn: BigNumberish,
      tokenIn: string,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountsIn(
      amountOut: BigNumberish,
      routes: { from: string; to: string; stable: boolean }[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountsOut(
      amountIn: BigNumberish,
      routes: { from: string; to: string; stable: boolean }[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExactAmountOut(
      amountIn: BigNumberish,
      tokenIn: string,
      tokenOut: string,
      stable: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserves(
      tokenA: string,
      tokenB: string,
      stable: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPair(
      pair: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pairFor(
      tokenA: string,
      tokenB: string,
      stable: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteAddLiquidity(
      tokenA: string,
      tokenB: string,
      stable: boolean,
      amountADesired: BigNumberish,
      amountBDesired: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteLiquidity(
      amountA: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteRemoveLiquidity(
      tokenA: string,
      tokenB: string,
      stable: boolean,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeLiquidity(
      tokenA: string,
      tokenB: string,
      stable: boolean,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidityMTR(
      token: string,
      stable: boolean,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountMTRMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidityMTRSupportingFeeOnTransferTokens(
      token: string,
      stable: boolean,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountFTMMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidityMTRWithPermit(
      token: string,
      stable: boolean,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountMTRMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidityMTRWithPermitSupportingFeeOnTransferTokens(
      token: string,
      stable: boolean,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountFTMMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidityWithPermit(
      tokenA: string,
      tokenB: string,
      stable: boolean,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sortTokens(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapExactMTRForTokens(
      amountOutMin: BigNumberish,
      routes: { from: string; to: string; stable: boolean }[],
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapExactMTRForTokensSupportingFeeOnTransferTokens(
      amountOutMin: BigNumberish,
      routes: { from: string; to: string; stable: boolean }[],
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapExactTokensForMTR(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      routes: { from: string; to: string; stable: boolean }[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapExactTokensForMTRSupportingFeeOnTransferTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      routes: { from: string; to: string; stable: boolean }[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapExactTokensForTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      routes: { from: string; to: string; stable: boolean }[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapExactTokensForTokensSimple(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      tokenFrom: string,
      tokenTo: string,
      stable: boolean,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapExactTokensForTokensSupportingFeeOnTransferTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      routes: { from: string; to: string; stable: boolean }[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapMTRForExactTokens(
      amountOut: BigNumberish,
      routes: { from: string; to: string; stable: boolean }[],
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapTokensForExactMTR(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      routes: { from: string; to: string; stable: boolean }[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapTokensForExactTokens(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      routes: { from: string; to: string; stable: boolean }[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
