/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface VeDistUpgradeableInterface extends ethers.utils.Interface {
  functions: {
    "WEEK()": FunctionFragment;
    "adjustToDistribute(uint256,uint256,uint256,uint256)": FunctionFragment;
    "adjustVeSupply(uint256,uint256,int128,int128)": FunctionFragment;
    "checkpointToken()": FunctionFragment;
    "checkpointTotalSupply()": FunctionFragment;
    "claim(uint256)": FunctionFragment;
    "claimMany(uint256[])": FunctionFragment;
    "claimable(uint256)": FunctionFragment;
    "depositor()": FunctionFragment;
    "findTimestampUserEpoch(address,uint256,uint256,uint256)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "lastTokenTime()": FunctionFragment;
    "setDepositor(address)": FunctionFragment;
    "startTime()": FunctionFragment;
    "timeCursor()": FunctionFragment;
    "timeCursorOf(uint256)": FunctionFragment;
    "timestamp()": FunctionFragment;
    "token()": FunctionFragment;
    "tokenLastBalance()": FunctionFragment;
    "tokensPerWeek(uint256)": FunctionFragment;
    "userEpochOf(uint256)": FunctionFragment;
    "veForAt(uint256,uint256)": FunctionFragment;
    "veSupply(uint256)": FunctionFragment;
    "votingEscrow()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "WEEK", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "adjustToDistribute",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adjustVeSupply",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkpointToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkpointTotalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "claim", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "claimMany",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "depositor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "findTimestampUserEpoch",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastTokenTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDepositor",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "startTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "timeCursor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timeCursorOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "timestamp", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenLastBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokensPerWeek",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userEpochOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "veForAt",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "veSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "votingEscrow",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "WEEK", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "adjustToDistribute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adjustVeSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkpointToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkpointTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimMany", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "findTimestampUserEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastTokenTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDepositor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "timeCursor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "timeCursorOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "timestamp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenLastBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensPerWeek",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userEpochOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "veForAt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "veSupply", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votingEscrow",
    data: BytesLike
  ): Result;

  events: {
    "CheckpointToken(uint256,uint256)": EventFragment;
    "Claimed(uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CheckpointToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
}

export type CheckpointTokenEvent = TypedEvent<
  [BigNumber, BigNumber] & { time: BigNumber; tokens: BigNumber }
>;

export type ClaimedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber] & {
    tokenId: BigNumber;
    amount: BigNumber;
    claimEpoch: BigNumber;
    maxEpoch: BigNumber;
  }
>;

export class VeDistUpgradeable extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: VeDistUpgradeableInterface;

  functions: {
    WEEK(overrides?: CallOverrides): Promise<[BigNumber]>;

    adjustToDistribute(
      toDistribute: BigNumberish,
      t0: BigNumberish,
      t1: BigNumberish,
      sinceLastCall: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    adjustVeSupply(
      t: BigNumberish,
      ptTs: BigNumberish,
      ptBias: BigNumberish,
      ptSlope: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    checkpointToken(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkpointTotalSupply(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claim(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimMany(
      _tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimable(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    depositor(overrides?: CallOverrides): Promise<[string]>;

    findTimestampUserEpoch(
      ve: string,
      tokenId: BigNumberish,
      _timestamp: BigNumberish,
      maxUserEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      _votingEscrow: string,
      _depositor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lastTokenTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    setDepositor(
      _depositor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    timeCursor(overrides?: CallOverrides): Promise<[BigNumber]>;

    timeCursorOf(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    timestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    tokenLastBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokensPerWeek(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userEpochOf(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    veForAt(
      _tokenId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    veSupply(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    votingEscrow(overrides?: CallOverrides): Promise<[string]>;
  };

  WEEK(overrides?: CallOverrides): Promise<BigNumber>;

  adjustToDistribute(
    toDistribute: BigNumberish,
    t0: BigNumberish,
    t1: BigNumberish,
    sinceLastCall: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  adjustVeSupply(
    t: BigNumberish,
    ptTs: BigNumberish,
    ptBias: BigNumberish,
    ptSlope: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  checkpointToken(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkpointTotalSupply(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claim(
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimMany(
    _tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimable(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  depositor(overrides?: CallOverrides): Promise<string>;

  findTimestampUserEpoch(
    ve: string,
    tokenId: BigNumberish,
    _timestamp: BigNumberish,
    maxUserEpoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    _votingEscrow: string,
    _depositor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lastTokenTime(overrides?: CallOverrides): Promise<BigNumber>;

  setDepositor(
    _depositor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startTime(overrides?: CallOverrides): Promise<BigNumber>;

  timeCursor(overrides?: CallOverrides): Promise<BigNumber>;

  timeCursorOf(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  timestamp(overrides?: CallOverrides): Promise<BigNumber>;

  token(overrides?: CallOverrides): Promise<string>;

  tokenLastBalance(overrides?: CallOverrides): Promise<BigNumber>;

  tokensPerWeek(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userEpochOf(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  veForAt(
    _tokenId: BigNumberish,
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  veSupply(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  votingEscrow(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    WEEK(overrides?: CallOverrides): Promise<BigNumber>;

    adjustToDistribute(
      toDistribute: BigNumberish,
      t0: BigNumberish,
      t1: BigNumberish,
      sinceLastCall: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    adjustVeSupply(
      t: BigNumberish,
      ptTs: BigNumberish,
      ptBias: BigNumberish,
      ptSlope: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkpointToken(overrides?: CallOverrides): Promise<void>;

    checkpointTotalSupply(overrides?: CallOverrides): Promise<void>;

    claim(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimMany(
      _tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    claimable(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositor(overrides?: CallOverrides): Promise<string>;

    findTimestampUserEpoch(
      ve: string,
      tokenId: BigNumberish,
      _timestamp: BigNumberish,
      maxUserEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _votingEscrow: string,
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    lastTokenTime(overrides?: CallOverrides): Promise<BigNumber>;

    setDepositor(_depositor: string, overrides?: CallOverrides): Promise<void>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    timeCursor(overrides?: CallOverrides): Promise<BigNumber>;

    timeCursorOf(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    timestamp(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;

    tokenLastBalance(overrides?: CallOverrides): Promise<BigNumber>;

    tokensPerWeek(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userEpochOf(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    veForAt(
      _tokenId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    veSupply(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    votingEscrow(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "CheckpointToken(uint256,uint256)"(
      time?: null,
      tokens?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { time: BigNumber; tokens: BigNumber }
    >;

    CheckpointToken(
      time?: null,
      tokens?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { time: BigNumber; tokens: BigNumber }
    >;

    "Claimed(uint256,uint256,uint256,uint256)"(
      tokenId?: null,
      amount?: null,
      claimEpoch?: null,
      maxEpoch?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        tokenId: BigNumber;
        amount: BigNumber;
        claimEpoch: BigNumber;
        maxEpoch: BigNumber;
      }
    >;

    Claimed(
      tokenId?: null,
      amount?: null,
      claimEpoch?: null,
      maxEpoch?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        tokenId: BigNumber;
        amount: BigNumber;
        claimEpoch: BigNumber;
        maxEpoch: BigNumber;
      }
    >;
  };

  estimateGas: {
    WEEK(overrides?: CallOverrides): Promise<BigNumber>;

    adjustToDistribute(
      toDistribute: BigNumberish,
      t0: BigNumberish,
      t1: BigNumberish,
      sinceLastCall: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    adjustVeSupply(
      t: BigNumberish,
      ptTs: BigNumberish,
      ptBias: BigNumberish,
      ptSlope: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkpointToken(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkpointTotalSupply(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claim(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimMany(
      _tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimable(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositor(overrides?: CallOverrides): Promise<BigNumber>;

    findTimestampUserEpoch(
      ve: string,
      tokenId: BigNumberish,
      _timestamp: BigNumberish,
      maxUserEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _votingEscrow: string,
      _depositor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lastTokenTime(overrides?: CallOverrides): Promise<BigNumber>;

    setDepositor(
      _depositor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    timeCursor(overrides?: CallOverrides): Promise<BigNumber>;

    timeCursorOf(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    timestamp(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    tokenLastBalance(overrides?: CallOverrides): Promise<BigNumber>;

    tokensPerWeek(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userEpochOf(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    veForAt(
      _tokenId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    veSupply(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    votingEscrow(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    WEEK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    adjustToDistribute(
      toDistribute: BigNumberish,
      t0: BigNumberish,
      t1: BigNumberish,
      sinceLastCall: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    adjustVeSupply(
      t: BigNumberish,
      ptTs: BigNumberish,
      ptBias: BigNumberish,
      ptSlope: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkpointToken(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkpointTotalSupply(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimMany(
      _tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimable(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    findTimestampUserEpoch(
      ve: string,
      tokenId: BigNumberish,
      _timestamp: BigNumberish,
      maxUserEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _votingEscrow: string,
      _depositor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lastTokenTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setDepositor(
      _depositor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timeCursor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timeCursorOf(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    timestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenLastBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokensPerWeek(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userEpochOf(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    veForAt(
      _tokenId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    veSupply(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votingEscrow(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
