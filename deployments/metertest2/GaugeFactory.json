{
  "address": "0x46072a2E4d5028de456AE357D9bFd7b93059eA94",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "GaugeCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bribe",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ve",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_allowedRewardTokens",
          "type": "address[]"
        }
      ],
      "name": "createGauge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bribe",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ve",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_voter",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_allowedRewardTokens",
          "type": "address[]"
        }
      ],
      "name": "createGaugeSingle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastGauge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0f0c94d48ab7e1ccd8310892200959f5dc08953ea01c0ebdc07b28d61c34304e",
  "receipt": {
    "to": null,
    "from": "0x1479F0954dF7c667b1817E4Eb3C0f4723eB054F5",
    "contractAddress": "0x46072a2E4d5028de456AE357D9bFd7b93059eA94",
    "transactionIndex": 0,
    "gasUsed": "4252635",
    "logsBloom": "0x
    "blockHash": "0x011f1c96a0406b29a067be7519fbbcdb3292a91c3131b0bd8696656dfd49d451",
    "transactionHash": "0x0f0c94d48ab7e1ccd8310892200959f5dc08953ea01c0ebdc07b28d61c34304e",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 18816150,
        "transactionHash": "0x0f0c94d48ab7e1ccd8310892200959f5dc08953ea01c0ebdc07b28d61c34304e",
        "address": "0x46072a2E4d5028de456AE357D9bFd7b93059eA94",
        "topics": [
          "0xb35bf4274d4295009f1ec66ed3f579db287889444366c03d3a695539372e8951"
        ],
        "data": "0x0000000000000000000000001479f0954df7c667b1817e4eb3c0f4723eb054f5",
        "logIndex": 0,
        "blockHash": "0x011f1c96a0406b29a067be7519fbbcdb3292a91c3131b0bd8696656dfd49d451"
      }
    ],
    "blockNumber": 18816150,
    "cumulativeGasUsed": "4252635",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0f7dd0f866316fe3c817b2421bc130ec",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"GaugeCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bribe\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ve\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_allowedRewardTokens\",\"type\":\"address[]\"}],\"name\":\"createGauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bribe\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ve\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_allowedRewardTokens\",\"type\":\"address[]\"}],\"name\":\"createGaugeSingle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastGauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/base/reward/GaugeFactory.sol\":\"GaugeFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/base/Reentrancy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nabstract contract Reentrancy {\\n    /// @dev simple re-entrancy check\\n    uint internal _unlocked = 1;\\n\\n    modifier lock() {\\n        require(_unlocked == 1, \\\"Reentrant call\\\");\\n        _unlocked = 2;\\n        _;\\n        _unlocked = 1;\\n    }\\n}\\n\",\"keccak256\":\"0x59c07b769bd280322dea57c93ed20b3e6e1fe1018ab9937b0dfcaddcfb5f2780\",\"license\":\"MIT\"},\"contracts/base/reward/Gauge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../../interface/IGauge.sol\\\";\\nimport \\\"../../interface/IPair.sol\\\";\\nimport \\\"../../interface/IVoter.sol\\\";\\nimport \\\"../../interface/IBribe.sol\\\";\\nimport \\\"../../interface/IERC721.sol\\\";\\nimport \\\"../../interface/IVe.sol\\\";\\nimport \\\"./MultiRewardsPoolBase.sol\\\";\\n\\n/// @title Gauges are used to incentivize pools, they emit reward tokens over 7 days for staked LP tokens\\ncontract Gauge is IGauge, MultiRewardsPoolBase {\\n    using SafeERC20 for IERC20;\\n\\n    /// @dev The ve token used for gauges\\n    address public immutable ve;\\n    address public immutable bribe;\\n    address public immutable voter;\\n\\n    mapping(address => uint) public tokenIds;\\n\\n    uint public fees0;\\n    uint public fees1;\\n\\n    event ClaimFees(address indexed from, uint claimed0, uint claimed1);\\n    event VeTokenLocked(address indexed account, uint tokenId);\\n    event VeTokenUnlocked(address indexed account, uint tokenId);\\n\\n    constructor(\\n        address _stake,\\n        address _bribe,\\n        address _ve,\\n        address _voter,\\n        address[] memory _allowedRewardTokens\\n    ) MultiRewardsPoolBase(_stake, _voter, _allowedRewardTokens) {\\n        bribe = _bribe;\\n        ve = _ve;\\n        voter = _voter;\\n    }\\n\\n    function claimFees()\\n        external\\n        override\\n        lock\\n        returns (uint claimed0, uint claimed1)\\n    {\\n        return _claimFees();\\n    }\\n\\n    function _claimFees() internal returns (uint claimed0, uint claimed1) {\\n        address _underlying = underlying;\\n        (claimed0, claimed1) = IPair(_underlying).claimFees();\\n        if (claimed0 > 0 || claimed1 > 0) {\\n            uint _fees0 = fees0 + claimed0;\\n            uint _fees1 = fees1 + claimed1;\\n            (address _token0, address _token1) = IPair(_underlying).tokens();\\n            if (_fees0 > IMultiRewardsPool(bribe).left(_token0)) {\\n                fees0 = 0;\\n                IERC20(_token0).safeIncreaseAllowance(bribe, _fees0);\\n                IBribe(bribe).notifyRewardAmount(_token0, _fees0);\\n            } else {\\n                fees0 = _fees0;\\n            }\\n            if (_fees1 > IMultiRewardsPool(bribe).left(_token1)) {\\n                fees1 = 0;\\n                IERC20(_token1).safeIncreaseAllowance(bribe, _fees1);\\n                IBribe(bribe).notifyRewardAmount(_token1, _fees1);\\n            } else {\\n                fees1 = _fees1;\\n            }\\n\\n            emit ClaimFees(msg.sender, claimed0, claimed1);\\n        }\\n    }\\n\\n    function getReward(address account, address[] memory tokens)\\n        external\\n        override\\n    {\\n        require(msg.sender == account || msg.sender == voter, \\\"Forbidden\\\");\\n        IVoter(voter).distribute(address(this));\\n        _getReward(account, tokens, account);\\n    }\\n\\n    function depositAll(uint tokenId) external {\\n        deposit(IERC20(underlying).balanceOf(msg.sender), tokenId);\\n    }\\n\\n    function deposit(uint amount, uint tokenId) public {\\n        if (tokenId > 0) {\\n            _lockVeToken(msg.sender, tokenId);\\n        }\\n        _deposit(amount);\\n        IVoter(voter).emitDeposit(tokenId, msg.sender, amount);\\n    }\\n\\n    function withdrawAll() external {\\n        withdraw(balanceOf[msg.sender]);\\n    }\\n\\n    function withdraw(uint amount) public {\\n        uint tokenId = 0;\\n        if (amount == balanceOf[msg.sender]) {\\n            tokenId = tokenIds[msg.sender];\\n        }\\n        withdrawToken(amount, tokenId);\\n        IVoter(voter).emitWithdraw(tokenId, msg.sender, amount);\\n    }\\n\\n    function withdrawToken(uint amount, uint tokenId) public {\\n        if (tokenId > 0) {\\n            _unlockVeToken(msg.sender, tokenId);\\n        }\\n        _withdraw(amount);\\n    }\\n\\n    /// @dev Balance should be recalculated after the lock\\n    ///      For locking a new ve token withdraw all funds and deposit again\\n    function _lockVeToken(address account, uint tokenId) internal {\\n        require(IERC721(ve).ownerOf(tokenId) == account, \\\"Not ve token owner\\\");\\n        if (tokenIds[account] == 0) {\\n            tokenIds[account] = tokenId;\\n            IVoter(voter).attachTokenToGauge(tokenId, account);\\n        }\\n        require(tokenIds[account] == tokenId, \\\"Wrong token\\\");\\n        emit VeTokenLocked(account, tokenId);\\n    }\\n\\n    /// @dev Balance should be recalculated after the unlock\\n    function _unlockVeToken(address account, uint tokenId) internal {\\n        require(tokenId == tokenIds[account], \\\"Wrong token\\\");\\n        tokenIds[account] = 0;\\n        IVoter(voter).detachTokenFromGauge(tokenId, account);\\n        emit VeTokenUnlocked(account, tokenId);\\n    }\\n\\n    /// @dev Similar to Curve https://resources.curve.fi/reward-gauges/boosting-your-crv-rewards#formula\\n    function _derivedBalance(address account)\\n        internal\\n        view\\n        override\\n        returns (uint)\\n    {\\n        uint _tokenId = tokenIds[account];\\n        uint _balance = balanceOf[account];\\n        uint _derived = (_balance * 40) / 100;\\n        uint _adjusted = 0;\\n        uint _supply = IERC20(ve).totalSupply();\\n        if (account == IERC721(ve).ownerOf(_tokenId) && _supply > 0) {\\n            _adjusted =\\n                (((totalSupply * IVe(ve).balanceOfNFT(_tokenId)) / _supply) *\\n                    60) /\\n                100;\\n        }\\n        return Math.min((_derived + _adjusted), _balance);\\n    }\\n\\n    function notifyRewardAmount(address token, uint amount) external {\\n        _claimFees();\\n        _notifyRewardAmount(token, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x7ecba7e7b5a187737889e67f212d0af9be78d3e26ed8346e00c3ff4a040b52c2\",\"license\":\"MIT\"},\"contracts/base/reward/GaugeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../../interface/IGaugeFactory.sol\\\";\\nimport \\\"./Gauge.sol\\\";\\n\\ncontract GaugeFactory is IGaugeFactory {\\n    address public lastGauge;\\n\\n    event GaugeCreated(address value);\\n\\n    function createGauge(\\n        address _pool,\\n        address _bribe,\\n        address _ve,\\n        address[] memory _allowedRewardTokens\\n    ) external override returns (address) {\\n        address _lastGauge = address(\\n            new Gauge(_pool, _bribe, _ve, msg.sender, _allowedRewardTokens)\\n        );\\n        lastGauge = _lastGauge;\\n        emit GaugeCreated(_lastGauge);\\n        return _lastGauge;\\n    }\\n\\n    function createGaugeSingle(\\n        address _pool,\\n        address _bribe,\\n        address _ve,\\n        address _voter,\\n        address[] memory _allowedRewardTokens\\n    ) external override returns (address) {\\n        address _lastGauge = address(\\n            new Gauge(_pool, _bribe, _ve, _voter, _allowedRewardTokens)\\n        );\\n        lastGauge = _lastGauge;\\n        emit GaugeCreated(_lastGauge);\\n        return _lastGauge;\\n    }\\n}\\n\",\"keccak256\":\"0x61ccfa0f72f5762f51343189e3db3e657477f26c248f0b02107dc16cadb09d21\",\"license\":\"MIT\"},\"contracts/base/reward/MultiRewardsPoolBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../../interface/IERC20.sol\\\";\\nimport \\\"../../interface/IMultiRewardsPool.sol\\\";\\nimport \\\"../../lib/Math.sol\\\";\\nimport \\\"../../lib/SafeERC20.sol\\\";\\nimport \\\"../../lib/CheckpointLib.sol\\\";\\nimport \\\"../Reentrancy.sol\\\";\\n\\nabstract contract MultiRewardsPoolBase is Reentrancy, IMultiRewardsPool {\\n    using SafeERC20 for IERC20;\\n    using CheckpointLib for mapping(uint => CheckpointLib.Checkpoint);\\n\\n    /// @dev Operator can add/remove reward tokens\\n    address public operator;\\n\\n    /// @dev The LP token that needs to be staked for rewards\\n    address public immutable override underlying;\\n\\n    uint public override derivedSupply;\\n    mapping(address => uint) public override derivedBalances;\\n\\n    /// @dev Rewards are released over 7 days\\n    uint internal constant DURATION = 7 days;\\n    uint internal constant PRECISION = 10**18;\\n    uint internal constant MAX_REWARD_TOKENS = 10;\\n\\n    /// Default snx staking contract implementation\\n    /// https://github.com/Synthetixio/synthetix/blob/develop/contracts/StakingRewards.sol\\n\\n    /// @dev Reward rate with precision 1e18\\n    mapping(address => uint) public rewardRate;\\n    mapping(address => uint) public periodFinish;\\n    mapping(address => uint) public lastUpdateTime;\\n    mapping(address => uint) public rewardPerTokenStored;\\n\\n    mapping(address => mapping(address => uint)) public lastEarn;\\n    mapping(address => mapping(address => uint))\\n        public userRewardPerTokenStored;\\n\\n    uint public override totalSupply;\\n    mapping(address => uint) public override balanceOf;\\n\\n    address[] public override rewardTokens;\\n    mapping(address => bool) public override isRewardToken;\\n\\n    /// @notice A record of balance checkpoints for each account, by index\\n    mapping(address => mapping(uint => CheckpointLib.Checkpoint))\\n        public checkpoints;\\n    /// @notice The number of checkpoints for each account\\n    mapping(address => uint) public numCheckpoints;\\n    /// @notice A record of balance checkpoints for each token, by index\\n    mapping(uint => CheckpointLib.Checkpoint) public supplyCheckpoints;\\n    /// @notice The number of checkpoints\\n    uint public supplyNumCheckpoints;\\n    /// @notice A record of balance checkpoints for each token, by index\\n    mapping(address => mapping(uint => CheckpointLib.Checkpoint))\\n        public rewardPerTokenCheckpoints;\\n    /// @notice The number of checkpoints for each token\\n    mapping(address => uint) public rewardPerTokenNumCheckpoints;\\n\\n    event Deposit(address indexed from, uint amount);\\n    event Withdraw(address indexed from, uint amount);\\n    event NotifyReward(\\n        address indexed from,\\n        address indexed reward,\\n        uint amount\\n    );\\n    event ClaimRewards(\\n        address indexed from,\\n        address indexed reward,\\n        uint amount,\\n        address recepient\\n    );\\n\\n    constructor(\\n        address _stake,\\n        address _operator,\\n        address[] memory _allowedRewardTokens\\n    ) {\\n        underlying = _stake;\\n        operator = _operator;\\n        for (uint i; i < _allowedRewardTokens.length; i++) {\\n            if (_allowedRewardTokens[i] != address(0)) {\\n                _registerRewardToken(_allowedRewardTokens[i]);\\n            }\\n        }\\n    }\\n\\n    modifier onlyOperator() {\\n        require(msg.sender == operator, \\\"Not operator\\\");\\n        _;\\n    }\\n\\n    //**************************************************************************\\n    //************************ VIEWS *******************************************\\n    //**************************************************************************\\n\\n    function rewardTokensLength() external view override returns (uint) {\\n        return rewardTokens.length;\\n    }\\n\\n    function rewardPerToken(address token) external view returns (uint) {\\n        return _rewardPerToken(token);\\n    }\\n\\n    function _rewardPerToken(address token) internal view returns (uint) {\\n        if (derivedSupply == 0) {\\n            return rewardPerTokenStored[token];\\n        }\\n        return\\n            rewardPerTokenStored[token] +\\n            (((_lastTimeRewardApplicable(token) -\\n                Math.min(lastUpdateTime[token], periodFinish[token])) *\\n                rewardRate[token]) / derivedSupply);\\n    }\\n\\n    function derivedBalance(address account)\\n        external\\n        view\\n        override\\n        returns (uint)\\n    {\\n        return _derivedBalance(account);\\n    }\\n\\n    function left(address token) external view override returns (uint) {\\n        if (block.timestamp >= periodFinish[token]) return 0;\\n        uint _remaining = periodFinish[token] - block.timestamp;\\n        return (_remaining * rewardRate[token]) / PRECISION;\\n    }\\n\\n    function earned(address token, address account)\\n        external\\n        view\\n        override\\n        returns (uint)\\n    {\\n        return _earned(token, account);\\n    }\\n\\n    //**************************************************************************\\n    //************************ OPERATOR ACTIONS ********************************\\n    //**************************************************************************\\n\\n    function registerRewardToken(address token) external onlyOperator {\\n        _registerRewardToken(token);\\n    }\\n\\n    function _registerRewardToken(address token) internal {\\n        require(\\n            rewardTokens.length < MAX_REWARD_TOKENS,\\n            \\\"Too many reward tokens\\\"\\n        );\\n        require(!isRewardToken[token], \\\"Already registered\\\");\\n        isRewardToken[token] = true;\\n        rewardTokens.push(token);\\n    }\\n\\n    function removeRewardToken(address token) external onlyOperator {\\n        require(periodFinish[token] < block.timestamp, \\\"Rewards not ended\\\");\\n        require(isRewardToken[token], \\\"Not reward token\\\");\\n\\n        isRewardToken[token] = false;\\n        uint length = rewardTokens.length;\\n        require(length > 3, \\\"First 3 tokens should not be removed\\\");\\n        // keep 3 tokens as guarantee against malicious actions\\n        // assume it will be VOLT + pool tokens\\n        uint i = 3;\\n        bool found = false;\\n        for (; i < length; i++) {\\n            address t = rewardTokens[i];\\n            if (t == token) {\\n                found = true;\\n                break;\\n            }\\n        }\\n        require(found, \\\"First tokens forbidden to remove\\\");\\n        rewardTokens[i] = rewardTokens[length - 1];\\n        rewardTokens.pop();\\n    }\\n\\n    //**************************************************************************\\n    //************************ USER ACTIONS ************************************\\n    //**************************************************************************\\n\\n    function _deposit(uint amount) internal virtual lock {\\n        require(amount > 0, \\\"Zero amount\\\");\\n        _increaseBalance(msg.sender, amount);\\n        IERC20(underlying).safeTransferFrom(msg.sender, address(this), amount);\\n        emit Deposit(msg.sender, amount);\\n    }\\n\\n    function _increaseBalance(address account, uint amount) internal virtual {\\n        _updateRewardForAllTokens();\\n\\n        totalSupply += amount;\\n        balanceOf[account] += amount;\\n\\n        _updateDerivedBalanceAndWriteCheckpoints(account);\\n    }\\n\\n    function _withdraw(uint amount) internal virtual lock {\\n        _decreaseBalance(msg.sender, amount);\\n        IERC20(underlying).safeTransfer(msg.sender, amount);\\n        emit Withdraw(msg.sender, amount);\\n    }\\n\\n    function _decreaseBalance(address account, uint amount) internal virtual {\\n        _updateRewardForAllTokens();\\n\\n        totalSupply -= amount;\\n        balanceOf[account] -= amount;\\n\\n        _updateDerivedBalanceAndWriteCheckpoints(account);\\n    }\\n\\n    /// @dev Implement restriction checks!\\n    function _getReward(\\n        address account,\\n        address[] memory tokens,\\n        address recipient\\n    ) internal virtual lock {\\n        for (uint i = 0; i < tokens.length; i++) {\\n            (\\n                rewardPerTokenStored[tokens[i]],\\n                lastUpdateTime[tokens[i]]\\n            ) = _updateRewardPerToken(tokens[i], type(uint).max, true);\\n\\n            uint _reward = _earned(tokens[i], account);\\n            lastEarn[tokens[i]][account] = block.timestamp;\\n            userRewardPerTokenStored[tokens[i]][account] = rewardPerTokenStored[\\n                tokens[i]\\n            ];\\n            if (_reward > 0) {\\n                IERC20(tokens[i]).safeTransfer(recipient, _reward);\\n            }\\n\\n            emit ClaimRewards(msg.sender, tokens[i], _reward, recipient);\\n        }\\n\\n        _updateDerivedBalanceAndWriteCheckpoints(account);\\n    }\\n\\n    function _updateDerivedBalanceAndWriteCheckpoints(address account)\\n        internal\\n    {\\n        uint __derivedBalance = derivedBalances[account];\\n        derivedSupply -= __derivedBalance;\\n        __derivedBalance = _derivedBalance(account);\\n        derivedBalances[account] = __derivedBalance;\\n        derivedSupply += __derivedBalance;\\n\\n        _writeCheckpoint(account, __derivedBalance);\\n        _writeSupplyCheckpoint();\\n    }\\n\\n    //**************************************************************************\\n    //************************ REWARDS CALCULATIONS ****************************\\n    //**************************************************************************\\n\\n    // earned is an estimation, it won't be exact till the supply > rewardPerToken calculations have run\\n    function _earned(address token, address account)\\n        internal\\n        view\\n        returns (uint)\\n    {\\n        // zero checkpoints means zero deposits\\n        if (numCheckpoints[account] == 0) {\\n            return 0;\\n        }\\n        // last claim rewards time\\n        uint _startTimestamp = Math.max(\\n            lastEarn[token][account],\\n            rewardPerTokenCheckpoints[token][0].timestamp\\n        );\\n\\n        // find an index of the balance that the user had on the last claim\\n        uint _startIndex = _getPriorBalanceIndex(account, _startTimestamp);\\n        uint _endIndex = numCheckpoints[account] - 1;\\n\\n        uint reward = 0;\\n\\n        // calculate previous snapshots if exist\\n        if (_endIndex > 0) {\\n            for (uint i = _startIndex; i <= _endIndex - 1; i++) {\\n                CheckpointLib.Checkpoint memory cp0 = checkpoints[account][i];\\n                CheckpointLib.Checkpoint memory cp1 = checkpoints[account][\\n                    i + 1\\n                ];\\n                (uint _rewardPerTokenStored0, ) = _getPriorRewardPerToken(\\n                    token,\\n                    cp0.timestamp\\n                );\\n                (uint _rewardPerTokenStored1, ) = _getPriorRewardPerToken(\\n                    token,\\n                    cp1.timestamp\\n                );\\n                reward +=\\n                    (cp0.value *\\n                        (_rewardPerTokenStored1 - _rewardPerTokenStored0)) /\\n                    PRECISION;\\n            }\\n        }\\n\\n        CheckpointLib.Checkpoint memory cp = checkpoints[account][_endIndex];\\n        (uint _rewardPerTokenStored, ) = _getPriorRewardPerToken(\\n            token,\\n            cp.timestamp\\n        );\\n        reward +=\\n            (cp.value *\\n                (_rewardPerToken(token) -\\n                    Math.max(\\n                        _rewardPerTokenStored,\\n                        userRewardPerTokenStored[token][account]\\n                    ))) /\\n            PRECISION;\\n        return reward;\\n    }\\n\\n    function _derivedBalance(address account)\\n        internal\\n        view\\n        virtual\\n        returns (uint)\\n    {\\n        // supposed to be implemented in a parent contract\\n        return balanceOf[account];\\n    }\\n\\n    /// @dev Update stored rewardPerToken values without the last one snapshot\\n    ///      If the contract will get \\\"out of gas\\\" error on users actions this will be helpful\\n    function batchUpdateRewardPerToken(address token, uint maxRuns) external {\\n        (\\n            rewardPerTokenStored[token],\\n            lastUpdateTime[token]\\n        ) = _updateRewardPerToken(token, maxRuns, false);\\n    }\\n\\n    function _updateRewardForAllTokens() internal {\\n        uint length = rewardTokens.length;\\n        for (uint i; i < length; i++) {\\n            address token = rewardTokens[i];\\n            (\\n                rewardPerTokenStored[token],\\n                lastUpdateTime[token]\\n            ) = _updateRewardPerToken(token, type(uint).max, true);\\n        }\\n    }\\n\\n    /// @dev Should be called only with properly updated snapshots, or with actualLast=false\\n    function _updateRewardPerToken(\\n        address token,\\n        uint maxRuns,\\n        bool actualLast\\n    ) internal returns (uint, uint) {\\n        uint _startTimestamp = lastUpdateTime[token];\\n        uint reward = rewardPerTokenStored[token];\\n\\n        if (supplyNumCheckpoints == 0) {\\n            return (reward, _startTimestamp);\\n        }\\n\\n        if (rewardRate[token] == 0) {\\n            return (reward, block.timestamp);\\n        }\\n        uint _startIndex = _getPriorSupplyIndex(_startTimestamp);\\n        uint _endIndex = Math.min(supplyNumCheckpoints - 1, maxRuns);\\n\\n        if (_endIndex > 0) {\\n            for (uint i = _startIndex; i <= _endIndex - 1; i++) {\\n                CheckpointLib.Checkpoint memory sp0 = supplyCheckpoints[i];\\n                if (sp0.value > 0) {\\n                    CheckpointLib.Checkpoint memory sp1 = supplyCheckpoints[\\n                        i + 1\\n                    ];\\n                    (uint _reward, uint _endTime) = _calcRewardPerToken(\\n                        token,\\n                        sp1.timestamp,\\n                        sp0.timestamp,\\n                        sp0.value,\\n                        _startTimestamp\\n                    );\\n                    reward += _reward;\\n                    _writeRewardPerTokenCheckpoint(token, reward, _endTime);\\n                    _startTimestamp = _endTime;\\n                }\\n            }\\n        }\\n\\n        // need to override the last value with actual numbers only on deposit/withdraw/claim/notify actions\\n        if (actualLast) {\\n            CheckpointLib.Checkpoint memory sp = supplyCheckpoints[_endIndex];\\n            if (sp.value > 0) {\\n                (uint _reward, ) = _calcRewardPerToken(\\n                    token,\\n                    _lastTimeRewardApplicable(token),\\n                    Math.max(sp.timestamp, _startTimestamp),\\n                    sp.value,\\n                    _startTimestamp\\n                );\\n                reward += _reward;\\n                _writeRewardPerTokenCheckpoint(token, reward, block.timestamp);\\n                _startTimestamp = block.timestamp;\\n            }\\n        }\\n\\n        return (reward, _startTimestamp);\\n    }\\n\\n    function _calcRewardPerToken(\\n        address token,\\n        uint lastSupplyTs1,\\n        uint lastSupplyTs0,\\n        uint supply,\\n        uint startTimestamp\\n    ) internal view returns (uint, uint) {\\n        uint endTime = Math.max(lastSupplyTs1, startTimestamp);\\n        uint _periodFinish = periodFinish[token];\\n        return (\\n            ((Math.min(endTime, _periodFinish) -\\n                Math.min(\\n                    Math.max(lastSupplyTs0, startTimestamp),\\n                    _periodFinish\\n                )) * rewardRate[token]) / supply,\\n            endTime\\n        );\\n    }\\n\\n    /// @dev Returns the last time the reward was modified or periodFinish if the reward has ended\\n    function _lastTimeRewardApplicable(address token)\\n        internal\\n        view\\n        returns (uint)\\n    {\\n        return Math.min(block.timestamp, periodFinish[token]);\\n    }\\n\\n    //**************************************************************************\\n    //************************ NOTIFY ******************************************\\n    //**************************************************************************\\n\\n    function _notifyRewardAmount(address token, uint amount)\\n        internal\\n        virtual\\n        lock\\n    {\\n        require(token != underlying, \\\"Wrong token for rewards\\\");\\n        require(amount > 0, \\\"Zero amount\\\");\\n        require(isRewardToken[token], \\\"Token not allowed\\\");\\n        if (rewardRate[token] == 0) {\\n            _writeRewardPerTokenCheckpoint(token, 0, block.timestamp);\\n        }\\n        (\\n            rewardPerTokenStored[token],\\n            lastUpdateTime[token]\\n        ) = _updateRewardPerToken(token, type(uint).max, true);\\n\\n        if (block.timestamp >= periodFinish[token]) {\\n            IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\n            rewardRate[token] = (amount * PRECISION) / DURATION;\\n        } else {\\n            uint _remaining = periodFinish[token] - block.timestamp;\\n            uint _left = _remaining * rewardRate[token];\\n            // not sure what the reason was in the original solidly implementation for this restriction\\n            // however, by design probably it is a good idea against human errors\\n            require(\\n                amount > _left / PRECISION,\\n                \\\"Amount should be higher than remaining rewards\\\"\\n            );\\n            IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\n            rewardRate[token] = (amount * PRECISION + _left) / DURATION;\\n        }\\n\\n        periodFinish[token] = block.timestamp + DURATION;\\n        emit NotifyReward(msg.sender, token, amount);\\n    }\\n\\n    //**************************************************************************\\n    //************************ CHECKPOINTS *************************************\\n    //**************************************************************************\\n\\n    function getPriorBalanceIndex(address account, uint timestamp)\\n        external\\n        view\\n        returns (uint)\\n    {\\n        return _getPriorBalanceIndex(account, timestamp);\\n    }\\n\\n    /// @notice Determine the prior balance for an account as of a block number\\n    /// @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n    /// @param account The address of the account to check\\n    /// @param timestamp The timestamp to get the balance at\\n    /// @return The balance the account had as of the given block\\n    function _getPriorBalanceIndex(address account, uint timestamp)\\n        internal\\n        view\\n        returns (uint)\\n    {\\n        uint nCheckpoints = numCheckpoints[account];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n        return checkpoints[account].findLowerIndex(nCheckpoints, timestamp);\\n    }\\n\\n    function getPriorSupplyIndex(uint timestamp) external view returns (uint) {\\n        return _getPriorSupplyIndex(timestamp);\\n    }\\n\\n    function _getPriorSupplyIndex(uint timestamp) internal view returns (uint) {\\n        uint nCheckpoints = supplyNumCheckpoints;\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n        return supplyCheckpoints.findLowerIndex(nCheckpoints, timestamp);\\n    }\\n\\n    function getPriorRewardPerToken(address token, uint timestamp)\\n        external\\n        view\\n        returns (uint, uint)\\n    {\\n        return _getPriorRewardPerToken(token, timestamp);\\n    }\\n\\n    function _getPriorRewardPerToken(address token, uint timestamp)\\n        internal\\n        view\\n        returns (uint, uint)\\n    {\\n        uint nCheckpoints = rewardPerTokenNumCheckpoints[token];\\n        if (nCheckpoints == 0) {\\n            return (0, 0);\\n        }\\n        mapping(uint => CheckpointLib.Checkpoint)\\n            storage cps = rewardPerTokenCheckpoints[token];\\n        uint lower = cps.findLowerIndex(nCheckpoints, timestamp);\\n        CheckpointLib.Checkpoint memory cp = cps[lower];\\n        return (cp.value, cp.timestamp);\\n    }\\n\\n    function _writeCheckpoint(address account, uint balance) internal {\\n        uint _timestamp = block.timestamp;\\n        uint _nCheckPoints = numCheckpoints[account];\\n\\n        if (\\n            _nCheckPoints > 0 &&\\n            checkpoints[account][_nCheckPoints - 1].timestamp == _timestamp\\n        ) {\\n            checkpoints[account][_nCheckPoints - 1].value = balance;\\n        } else {\\n            checkpoints[account][_nCheckPoints] = CheckpointLib.Checkpoint(\\n                _timestamp,\\n                balance\\n            );\\n            numCheckpoints[account] = _nCheckPoints + 1;\\n        }\\n    }\\n\\n    function _writeRewardPerTokenCheckpoint(\\n        address token,\\n        uint reward,\\n        uint timestamp\\n    ) internal {\\n        uint _nCheckPoints = rewardPerTokenNumCheckpoints[token];\\n\\n        if (\\n            _nCheckPoints > 0 &&\\n            rewardPerTokenCheckpoints[token][_nCheckPoints - 1].timestamp ==\\n            timestamp\\n        ) {\\n            rewardPerTokenCheckpoints[token][_nCheckPoints - 1].value = reward;\\n        } else {\\n            rewardPerTokenCheckpoints[token][_nCheckPoints] = CheckpointLib\\n                .Checkpoint(timestamp, reward);\\n            rewardPerTokenNumCheckpoints[token] = _nCheckPoints + 1;\\n        }\\n    }\\n\\n    function _writeSupplyCheckpoint() internal {\\n        uint _nCheckPoints = supplyNumCheckpoints;\\n        uint _timestamp = block.timestamp;\\n\\n        if (\\n            _nCheckPoints > 0 &&\\n            supplyCheckpoints[_nCheckPoints - 1].timestamp == _timestamp\\n        ) {\\n            supplyCheckpoints[_nCheckPoints - 1].value = derivedSupply;\\n        } else {\\n            supplyCheckpoints[_nCheckPoints] = CheckpointLib.Checkpoint(\\n                _timestamp,\\n                derivedSupply\\n            );\\n            supplyNumCheckpoints = _nCheckPoints + 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe7254d053c72d3ce0f505c1f4e39835ade8711fee6df2ef29aa6b37fb48ed175\",\"license\":\"MIT\"},\"contracts/interface/IBribe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IBribe {\\n    function notifyRewardAmount(address token, uint amount) external;\\n\\n    function _deposit(uint amount, uint tokenId) external;\\n\\n    function _withdraw(uint amount, uint tokenId) external;\\n\\n    function getRewardForOwner(uint tokenId, address[] memory tokens) external;\\n}\\n\",\"keccak256\":\"0xcf242dd62b6301060e132cc868d817cced4bb4bd21c69e4079cba92e30d333f1\",\"license\":\"MIT\"},\"contracts/interface/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8609505e815e06dac85e0cc77ad7bbb641ceec24e5c8e012483e8576dd09ce09\",\"license\":\"MIT\"},\"contracts/interface/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0x224e032b714ae191e5e419054a144402b01597e8b2eb36db4f6e38d3e42b0db7\",\"license\":\"MIT\"},\"contracts/interface/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed approved,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId)\\n        external\\n        view\\n        returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6983264dae1151fd2451f1cb2e4cb9a369f6dd25577600d1733fe6e4da0dc35d\",\"license\":\"MIT\"},\"contracts/interface/IGauge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IGauge {\\n    function notifyRewardAmount(address token, uint amount) external;\\n\\n    function getReward(address account, address[] memory tokens) external;\\n\\n    function claimFees() external returns (uint claimed0, uint claimed1);\\n}\\n\",\"keccak256\":\"0x182048b6ade43597025a2cbfc86979dcaed29d83abfaa48815efda839c7d6d33\",\"license\":\"MIT\"},\"contracts/interface/IGaugeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IGaugeFactory {\\n    function createGauge(\\n        address _pool,\\n        address _bribe,\\n        address _ve,\\n        address[] memory _allowedRewardTokens\\n    ) external returns (address);\\n\\n    function createGaugeSingle(\\n        address _pool,\\n        address _bribe,\\n        address _ve,\\n        address _voter,\\n        address[] memory _allowedRewardTokens\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0xbd8b9b1868d559e68e5c28894a7ab46434cbcfbc712713bd6ff6315243af0871\",\"license\":\"MIT\"},\"contracts/interface/IMultiRewardsPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IMultiRewardsPool {\\n    function underlying() external view returns (address);\\n\\n    function derivedSupply() external view returns (uint);\\n\\n    function derivedBalances(address account) external view returns (uint);\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function balanceOf(address account) external view returns (uint);\\n\\n    function rewardTokens(uint id) external view returns (address);\\n\\n    function isRewardToken(address token) external view returns (bool);\\n\\n    function rewardTokensLength() external view returns (uint);\\n\\n    function derivedBalance(address account) external view returns (uint);\\n\\n    function left(address token) external view returns (uint);\\n\\n    function earned(address token, address account)\\n        external\\n        view\\n        returns (uint);\\n\\n    function registerRewardToken(address token) external;\\n\\n    function removeRewardToken(address token) external;\\n}\\n\",\"keccak256\":\"0x2fff1488dc483fe0c9ccc3642c522c94868e96d9173304f8fe404d91ad3c4f21\",\"license\":\"MIT\"},\"contracts/interface/IPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IPair {\\n    // Structure to capture time period obervations every 30 minutes, used for local oracles\\n    struct Observation {\\n        uint timestamp;\\n        uint reserve0Cumulative;\\n        uint reserve1Cumulative;\\n    }\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint value,\\n        uint deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function swap(\\n        uint amount0Out,\\n        uint amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n\\n    function mint(address to) external returns (uint liquidity);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 _reserve0,\\n            uint112 _reserve1,\\n            uint32 _blockTimestampLast\\n        );\\n\\n    function getAmountOut(uint, address) external view returns (uint);\\n\\n    function claimFees() external returns (uint, uint);\\n\\n    function tokens() external view returns (address, address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function stable() external view returns (bool);\\n\\n    function metadata()\\n        external\\n        view\\n        returns (\\n            uint dec0,\\n            uint dec1,\\n            uint r0,\\n            uint r1,\\n            bool st,\\n            address t0,\\n            address t1\\n        );\\n}\\n\",\"keccak256\":\"0x978d3132f8f5f6752533d94a3024f25ced205df57475d5e2d7c09f301dd7c762\",\"license\":\"MIT\"},\"contracts/interface/IVe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IVe {\\n    enum DepositType {\\n        DEPOSIT_FOR_TYPE,\\n        CREATE_LOCK_TYPE,\\n        INCREASE_LOCK_AMOUNT,\\n        INCREASE_UNLOCK_TIME,\\n        MERGE_TYPE\\n    }\\n\\n    struct Point {\\n        int128 bias;\\n        int128 slope; // # -dweight / dt\\n        uint ts;\\n        uint blk; // block\\n    }\\n    /* We cannot really do block numbers per se b/c slope is per time, not per block\\n     * and per block could be fairly bad b/c Ethereum changes blocktimes.\\n     * What we can do is to extrapolate ***At functions */\\n\\n    struct LockedBalance {\\n        int128 amount;\\n        uint end;\\n    }\\n\\n    function token() external view returns (address);\\n\\n    function balanceOfNFT(uint) external view returns (uint);\\n\\n    function isApprovedOrOwner(address, uint) external view returns (bool);\\n\\n    function createLockFor(\\n        uint,\\n        uint,\\n        address\\n    ) external returns (uint);\\n\\n    function userPointEpoch(uint tokenId) external view returns (uint);\\n\\n    function epoch() external view returns (uint);\\n\\n    function userPointHistory(uint tokenId, uint loc)\\n        external\\n        view\\n        returns (Point memory);\\n\\n    function pointHistory(uint loc) external view returns (Point memory);\\n\\n    function checkpoint() external;\\n\\n    function depositFor(uint tokenId, uint value) external;\\n\\n    function attachToken(uint tokenId) external;\\n\\n    function detachToken(uint tokenId) external;\\n\\n    function voting(uint tokenId) external;\\n\\n    function abstain(uint tokenId) external;\\n}\\n\",\"keccak256\":\"0x93a173b039792ac393165aab7a92882d0cc1d82257c4dfe13ee26631fe46e52a\",\"license\":\"MIT\"},\"contracts/interface/IVoter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IVoter {\\n    function ve() external view returns (address);\\n\\n    function attachTokenToGauge(uint _tokenId, address account) external;\\n\\n    function detachTokenFromGauge(uint _tokenId, address account) external;\\n\\n    function emitDeposit(\\n        uint _tokenId,\\n        address account,\\n        uint amount\\n    ) external;\\n\\n    function emitWithdraw(\\n        uint _tokenId,\\n        address account,\\n        uint amount\\n    ) external;\\n\\n    function distribute(address _gauge) external;\\n\\n    function notifyRewardAmount(uint amount) external;\\n}\\n\",\"keccak256\":\"0x3585c496f0f5c40e7146bd9878293c200d38948fa20e162c1f7f48b7d475338b\",\"license\":\"MIT\"},\"contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n        (bool success, bytes memory returndata) = target.call(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x798cd9aeb57ae229f05b694ccfb44ea291726b42c0ef5da99de61785ebbc32a8\",\"license\":\"MIT\"},\"contracts/lib/CheckpointLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nlibrary CheckpointLib {\\n    /// @notice A checkpoint for uint value\\n    struct Checkpoint {\\n        uint timestamp;\\n        uint value;\\n    }\\n\\n    function findLowerIndex(\\n        mapping(uint => Checkpoint) storage checkpoints,\\n        uint size,\\n        uint timestamp\\n    ) internal view returns (uint) {\\n        require(size != 0, \\\"Empty checkpoints\\\");\\n\\n        // First check most recent value\\n        if (checkpoints[size - 1].timestamp <= timestamp) {\\n            return (size - 1);\\n        }\\n\\n        // Next check implicit zero value\\n        if (checkpoints[0].timestamp > timestamp) {\\n            return 0;\\n        }\\n\\n        uint lower = 0;\\n        uint upper = size - 1;\\n        while (upper > lower) {\\n            // ceil, avoiding overflow\\n            uint center = upper - (upper - lower) / 2;\\n            Checkpoint memory cp = checkpoints[center];\\n            if (cp.timestamp == timestamp) {\\n                return center;\\n            } else if (cp.timestamp < timestamp) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return lower;\\n    }\\n}\\n\",\"keccak256\":\"0xb5ccd2ad5421f03ed9b67825a8e4c89f6b67eb006352fda4bc444fc1f776bfcd\",\"license\":\"MIT\"},\"contracts/lib/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nlibrary Math {\\n    function max(uint a, uint b) internal pure returns (uint) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function min(uint a, uint b) internal pure returns (uint) {\\n        return a < b ? a : b;\\n    }\\n\\n    function positiveInt128(int128 value) internal pure returns (int128) {\\n        return value < 0 ? int128(0) : value;\\n    }\\n\\n    function closeTo(\\n        uint a,\\n        uint b,\\n        uint target\\n    ) internal pure returns (bool) {\\n        if (a > b) {\\n            if (a - b <= target) {\\n                return true;\\n            }\\n        } else {\\n            if (b - a <= target) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8a50db5ef01ef869b1a7df3cf485d6c87473549c70fbefc54bdea34f8bc78538\",\"license\":\"MIT\"},\"contracts/lib/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../interface/IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint value\\n    ) internal {\\n        uint newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(\\n            data,\\n            \\\"SafeERC20: low-level call failed\\\"\\n        );\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(\\n                abi.decode(returndata, (bool)),\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd09403b2f52a045a82861c53059fb835daabe908fd774f948370979588b3fe1a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613e56806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063559a9c0a1461004657806358c14b6514610075578063b46d346514610088575b600080fd5b6100596100543660046102b6565b61009b565b6040516001600160a01b03909116815260200160405180910390f35b610059610083366004610336565b610138565b600054610059906001600160a01b031681565b60008086868686866040516100af906101d4565b6100bd9594939291906103a5565b604051809103906000f0801580156100d9573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b0383169081179091556040519081529091507faa98436d09d130af48de49867af8b723bbbebb0d737638b5fe8f1bf31bbb71c09060200160405180910390a19695505050505050565b600080858585338660405161014c906101d4565b61015a9594939291906103a5565b604051809103906000f080158015610176573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b0383169081179091556040519081529091507faa98436d09d130af48de49867af8b723bbbebb0d737638b5fe8f1bf31bbb71c09060200160405180910390a195945050505050565b613a06806200041b83390190565b80356001600160a01b03811681146101f957600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261022557600080fd5b8135602067ffffffffffffffff80831115610242576102426101fe565b8260051b604051601f19603f83011681018181108482111715610267576102676101fe565b60405293845285810183019383810192508785111561028557600080fd5b83870191505b848210156102ab5761029c826101e2565b8352918301919083019061028b565b979650505050505050565b600080600080600060a086880312156102ce57600080fd5b6102d7866101e2565b94506102e5602087016101e2565b93506102f3604087016101e2565b9250610301606087016101e2565b9150608086013567ffffffffffffffff81111561031d57600080fd5b61032988828901610214565b9150509295509295909350565b6000806000806080858703121561034c57600080fd5b610355856101e2565b9350610363602086016101e2565b9250610371604086016101e2565b9150606085013567ffffffffffffffff81111561038d57600080fd5b61039987828801610214565b91505092959194509250565b600060a0820160018060a01b0380891684526020818916818601528188166040860152818716606086015260a0608086015282865180855260c087019150828801945060005b818110156104095785518516835294830194918301916001016103eb565b50909b9a505050505050505050505056fe61010060405260016000553480156200001757600080fd5b5060405162003a0638038062003a068339810160408190526200003a916200025d565b6001600160a01b03858116608052600180546001600160a01b03191691841691909117905584828260005b8151811015620000e85760006001600160a01b03168282815181106200008f576200008f6200037d565b60200260200101516001600160a01b031614620000d357620000d3828281518110620000bf57620000bf6200037d565b60200260200101516200010c60201b60201c565b80620000df8162000393565b91505062000065565b5050506001600160a01b0394851660c052505090821660a0521660e05250620003bb565b600c54600a11620001645760405162461bcd60e51b815260206004820152601660248201527f546f6f206d616e792072657761726420746f6b656e730000000000000000000060448201526064015b60405180910390fd5b6001600160a01b0381166000908152600d602052604090205460ff1615620001c45760405162461bcd60e51b8152602060048201526012602482015271105b1c9958591e481c9959da5cdd195c995960721b60448201526064016200015b565b6001600160a01b03166000818152600d60205260408120805460ff19166001908117909155600c805491820181559091527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c70180546001600160a01b0319169091179055565b80516001600160a01b03811681146200024257600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600080600080600060a086880312156200027657600080fd5b62000281866200022a565b94506020620002928188016200022a565b9450620002a2604088016200022a565b9350620002b2606088016200022a565b60808801519093506001600160401b0380821115620002d057600080fd5b818901915089601f830112620002e557600080fd5b815181811115620002fa57620002fa62000247565b8060051b604051601f19603f8301168101818110858211171562000322576200032262000247565b60405291825284820192508381018501918c8311156200034157600080fd5b938501935b828510156200036a576200035a856200022a565b8452938501939285019262000346565b8096505050505050509295509295909350565b634e487b7160e01b600052603260045260246000fd5b600060018201620003b457634e487b7160e01b600052601160045260246000fd5b5060010190565b60805160a05160c05160e05161357e6200048860003960008181610450015281816107a70152818161082d015281816108a101528181610e34015281816121fb01526126a80152600081816103eb0152818161180b01528181611893015281816118de01528181611964015281816119ea0152611a3501526000818161033101528181611eb201528181611f4b0152818161200601526120ca0152600081816104c601528181610d32015281816116c201528181611b120152818161236f015261277f015261357e6000f3fe608060405234801561001057600080fd5b506004361061027f5760003560e01c80637bb7bed11161015c578063d294f093116100ce578063e8111a1211610087578063e8111a12146106a8578063f1229777146106b1578063f7412baf146106c4578063fc97a303146106eb578063fd3140981461070b578063fdb483c71461071e57600080fd5b8063d294f0931461063e578063d35e254414610646578063d7da4bb014610659578063da09d19d14610662578063e2bbb15814610682578063e46dbc981461069557600080fd5b8063a495e5b511610120578063a495e5b514610592578063aa479652146105bd578063b5fd73f8146105dd578063b66503cf14610610578063bf199e6214610623578063c6f678bd1461062b57600080fd5b80637bb7bed11461053b578063853828b61461054e57806393f1c4421461055657806399bcc0521461055f5780639ce43f901461057257600080fd5b80633ca068b6116101f557806363fb415b116101b957806363fb415b1461048e57806368fcee1a146104ae5780636f307dc3146104c15780636fcfff45146104e857806370a082311461050857806376f4be361461052857600080fd5b80633ca068b61461040d5780633d509c971461043857806346c96aac1461044b5780634c02a21c14610472578063570ca7351461047b57600080fd5b8063211dc32d11610247578063211dc32d1461036b578063221ca18c1461037e5780632ce9aead1461039e5780632e1a7d4d146103be57806331279d3d146103d357806337d0208c146103e657600080fd5b806301316ddf146102845780630cdfebfa146102d0578063115c6f391461030257806318160ddd146103235780631f8507161461032c575b600080fd5b6102b6610292366004613182565b60126020908152600092835260408084209091529082529020805460019091015482565b604080519283526020830191909152015b60405180910390f35b6102b66102de366004613182565b600e6020908152600092835260408084209091529082529020805460019091015482565b610315610310366004613182565b610731565b6040519081526020016102c7565b610315600a5481565b6103537f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016102c7565b6103156103793660046131ae565b610746565b61031561038c3660046131e7565b60046020526000908152604090205481565b6103156103ac3660046131e7565b60066020526000908152604090205481565b6103d16103cc366004613204565b610752565b005b6103d16103e1366004613233565b610810565b6103537f000000000000000000000000000000000000000000000000000000000000000081565b61031561041b3660046131ae565b600960209081526000928352604080842090915290825290205481565b6103d16104463660046131e7565b610914565b6103537f000000000000000000000000000000000000000000000000000000000000000081565b61031560165481565b600154610353906001600160a01b031681565b61031561049c3660046131e7565b60036020526000908152604090205481565b6103d16104bc366004613182565b610bef565b6103537f000000000000000000000000000000000000000000000000000000000000000081565b6103156104f63660046131e7565b600f6020526000908152604090205481565b6103156105163660046131e7565b600b6020526000908152604090205481565b610315610536366004613204565b610c29565b610353610549366004613204565b610c34565b6103d1610c5e565b61031560155481565b61031561056d3660046131e7565b610c79565b6103156105803660046131e7565b60076020526000908152604090205481565b6103156105a03660046131ae565b600860209081526000928352604080842090915290825290205481565b6103156105cb3660046131e7565b60136020526000908152604090205481565b6106006105eb3660046131e7565b600d6020526000908152604090205460ff1681565b60405190151581526020016102c7565b6103d161061e366004613182565b610d05565b600c54610315565b6103d1610639366004613204565b610d19565b6102b6610dae565b6103156106543660046131e7565b610ded565b61031560025481565b6103156106703660046131e7565b60056020526000908152604090205481565b6103d161069036600461330d565b610df8565b6103d16106a33660046131e7565b610e6b565b61031560115481565b6103156106bf3660046131e7565b610ebd565b6102b66106d2366004613204565b6010602052600090815260409020805460019091015482565b6103156106f93660046131e7565b60146020526000908152604090205481565b6102b6610719366004613182565b610ec8565b6103d161072c36600461330d565b610ee1565b600061073d8383610efa565b90505b92915050565b600061073d8383610f4f565b336000908152600b6020526040812054820361077a5750336000908152601460205260409020545b6107848282610ee1565b604051633aa53b9160e21b815260048101829052336024820152604481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063ea94ee44906064015b600060405180830381600087803b1580156107f457600080fd5b505af1158015610808573d6000803e3d6000fd5b505050505050565b336001600160a01b038316148061084f5750336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016145b61088c5760405162461bcd60e51b81526020600482015260096024820152682337b93134b23232b760b91b60448201526064015b60405180910390fd5b6040516363453ae160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906363453ae190602401600060405180830381600087803b1580156108ed57600080fd5b505af1158015610901573d6000803e3d6000fd5b505050506109108282846111d0565b5050565b6001546001600160a01b0316331461095d5760405162461bcd60e51b815260206004820152600c60248201526b2737ba1037b832b930ba37b960a11b6044820152606401610883565b6001600160a01b03811660009081526005602052604090205442116109b85760405162461bcd60e51b815260206004820152601160248201527014995dd85c991cc81b9bdd08195b991959607a1b6044820152606401610883565b6001600160a01b0381166000908152600d602052604090205460ff16610a135760405162461bcd60e51b815260206004820152601060248201526f2737ba103932bbb0b932103a37b5b2b760811b6044820152606401610883565b6001600160a01b0381166000908152600d60205260409020805460ff19169055600c5460038111610a925760405162461bcd60e51b8152602060048201526024808201527f4669727374203320746f6b656e732073686f756c64206e6f742062652072656d6044820152631bdd995960e21b6064820152608401610883565b600360005b82821015610af2576000600c8381548110610ab457610ab461332f565b6000918252602090912001546001600160a01b03908116915085168103610adf576001915050610af2565b5081610aea8161335b565b925050610a97565b80610b3f5760405162461bcd60e51b815260206004820181905260248201527f466972737420746f6b656e7320666f7262696464656e20746f2072656d6f76656044820152606401610883565b600c610b4c600185613374565b81548110610b5c57610b5c61332f565b600091825260209091200154600c80546001600160a01b039092169184908110610b8857610b8861332f565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600c805480610bc757610bc761338b565b600082815260209020810160001990810180546001600160a01b031916905501905550505050565b610bfb828260006114a9565b6001600160a01b03909316600090815260076020908152604080832060069092529091209390935590915550565b600061074082611699565b600c8181548110610c4457600080fd5b6000918252602090912001546001600160a01b0316905081565b336000908152600b6020526040902054610c7790610752565b565b6001600160a01b0381166000908152600560205260408120544210610ca057506000919050565b6001600160a01b038216600090815260056020526040812054610cc4904290613374565b6001600160a01b038416600090815260046020526040902054909150670de0b6b3a764000090610cf490836133a1565b610cfe91906133c0565b9392505050565b610d0d6116bb565b50506109108282611ae1565b6040516370a0823160e01b8152336004820152610dab907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610d81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da591906133e2565b82610df8565b50565b600080600054600114610dd35760405162461bcd60e51b8152600401610883906133fb565b6002600055610de06116bb565b9150915060016000559091565b600061074082611e6f565b8015610e0857610e0833826120be565b610e11826122f6565b60405163530e389d60e11b815260048101829052336024820152604481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a61c713a906064016107da565b6001546001600160a01b03163314610eb45760405162461bcd60e51b815260206004820152600c60248201526b2737ba1037b832b930ba37b960a11b6044820152606401610883565b610dab816123d5565b6000610740826124e4565b600080610ed5848461258f565b915091505b9250929050565b8015610ef157610ef13382612619565b61091082612741565b6001600160a01b0382166000908152600f6020526040812054808203610f24576000915050610740565b6001600160a01b0384166000908152600e60205260409020610f479082856127d8565b949350505050565b6001600160a01b0381166000908152600f60205260408120548103610f7657506000610740565b6001600160a01b03808416600081815260086020908152604080832094871683529381528382205492825260128152838220828052905291822054610fbb919061291e565b90506000610fc98483610efa565b6001600160a01b0385166000908152600f602052604081205491925090610ff290600190613374565b90506000811561110457825b611009600184613374565b8111611102576001600160a01b0387166000818152600e60208181526040808420868552808352818520825180840190935280548352600190810154838501529585529290915292829061105e908690613423565b8152602001908152602001600020604051806040016040529081600082015481526020016001820154815250509050600061109d8b846000015161258f565b50905060006110b08c846000015161258f565b509050670de0b6b3a76400006110c68383613374565b85602001516110d591906133a1565b6110df91906133c0565b6110e99087613423565b95505050505080806110fa9061335b565b915050610ffe565b505b6001600160a01b0386166000908152600e6020908152604080832085845282528083208151808301909252805480835260019091015492820192909252919061114e908a9061258f565b506001600160a01b03808b166000908152600960209081526040808320938d1683529290522054909150670de0b6b3a76400009061118d90839061291e565b6111968b6124e4565b6111a09190613374565b83602001516111af91906133a1565b6111b991906133c0565b6111c39084613423565b9998505050505050505050565b6000546001146111f25760405162461bcd60e51b8152600401610883906133fb565b600260009081555b82518110156114955761122a8382815181106112185761121861332f565b602002602001015160001960016114a9565b600760008685815181106112405761124061332f565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000206000600660008887815181106112805761128061332f565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020600084919050558391905055505060006112db8483815181106112cd576112cd61332f565b602002602001015186610f4f565b905042600860008685815181106112f4576112f461332f565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000206000876001600160a01b03166001600160a01b0316815260200190815260200160002081905550600760008584815181106113595761135961332f565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054600960008685815181106113985761139861332f565b6020908102919091018101516001600160a01b0390811683528282019390935260409182016000908120938a168152929052902055801561140a5761140a83828685815181106113ea576113ea61332f565b60200260200101516001600160a01b03166129359092919063ffffffff16565b83828151811061141c5761141c61332f565b60200260200101516001600160a01b0316336001600160a01b03167fe4394b3c25e336e9d6b7fcefab7e3234f1c6b373f13655dc3920664b080b098d838660405161147a9291909182526001600160a01b0316602082015260400190565b60405180910390a3508061148d8161335b565b9150506111fa565b5061149f8361299d565b5050600160005550565b6001600160a01b03831660009081526006602090815260408083205460079092528220546011548392919083036114e35792509050611691565b6001600160a01b038716600090815260046020526040812054900361150e5792504291506116919050565b600061151983611699565b90506000611535600160115461152f9190613374565b89612a22565b9050801561160e57815b61154a600183613374565b811161160c5760008181526010602090815260409182902082518084019093528054835260010154908201819052156115f957600060108161158d856001613423565b81526020019081526020016000206040518060400160405290816000820154815260200160018201548152505090506000806115d88e8460000151866000015187602001518d612a31565b90925090506115e78289613423565b97506115f48e8983612ab5565b975050505b50806116048161335b565b91505061153f565b505b86156116885760008181526010602090815260409182902082518084019093528054835260010154908201819052156116865760006116678b6116508d612bbe565b845161165c908a61291e565b85602001518a612a31565b5090506116748186613423565b94506116818b8642612ab5565b429550505b505b50909350909150505b935093915050565b6011546000908082036116af5750600092915050565b610cfe601082856127d8565b60008060007f00000000000000000000000000000000000000000000000000000000000000009050806001600160a01b031663d294f0936040518163ffffffff1660e01b815260040160408051808303816000875af1158015611722573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611746919061343b565b9093509150821515806117595750600082115b15611adc5760008360155461176e9190613423565b90506000836016546117809190613423565b9050600080846001600160a01b0316639d63848a6040518163ffffffff1660e01b81526004016040805180830381865afa1580156117c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e6919061345f565b604051634cde602960e11b81526001600160a01b0380841660048301529294509092507f0000000000000000000000000000000000000000000000000000000000000000909116906399bcc05290602401602060405180830381865afa158015611854573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061187891906133e2565b84111561193f5760006015556118b86001600160a01b0383167f000000000000000000000000000000000000000000000000000000000000000086612be2565b60405163b66503cf60e01b81526001600160a01b038381166004830152602482018690527f0000000000000000000000000000000000000000000000000000000000000000169063b66503cf90604401600060405180830381600087803b15801561192257600080fd5b505af1158015611936573d6000803e3d6000fd5b50505050611945565b60158490555b604051634cde602960e11b81526001600160a01b0382811660048301527f000000000000000000000000000000000000000000000000000000000000000016906399bcc05290602401602060405180830381865afa1580156119ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119cf91906133e2565b831115611a96576000601655611a0f6001600160a01b0382167f000000000000000000000000000000000000000000000000000000000000000085612be2565b60405163b66503cf60e01b81526001600160a01b038281166004830152602482018590527f0000000000000000000000000000000000000000000000000000000000000000169063b66503cf90604401600060405180830381600087803b158015611a7957600080fd5b505af1158015611a8d573d6000803e3d6000fd5b50505050611a9c565b60168390555b604080518881526020810188905233917fbc567d6cbad26368064baa0ab5a757be46aae4d70f707f9203d9d9b6c8ccbfa3910160405180910390a2505050505b509091565b600054600114611b035760405162461bcd60e51b8152600401610883906133fb565b60026000556001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811690831603611b835760405162461bcd60e51b815260206004820152601760248201527f57726f6e6720746f6b656e20666f7220726577617264730000000000000000006044820152606401610883565b60008111611bc15760405162461bcd60e51b815260206004820152600b60248201526a16995c9bc8185b5bdd5b9d60aa1b6044820152606401610883565b6001600160a01b0382166000908152600d602052604090205460ff16611c1d5760405162461bcd60e51b8152602060048201526011602482015270151bdad95b881b9bdd08185b1b1bddd959607a1b6044820152606401610883565b6001600160a01b0382166000908152600460205260408120549003611c4857611c4882600042612ab5565b611c568260001960016114a9565b6001600160a01b0384166000908152600760209081526040808320600683528184209490945593909255600590915220544210611ce057611ca26001600160a01b038316333084612c94565b62093a80611cb8670de0b6b3a7640000836133a1565b611cc291906133c0565b6001600160a01b038316600090815260046020526040902055611e00565b6001600160a01b038216600090815260056020526040812054611d04904290613374565b6001600160a01b03841660009081526004602052604081205491925090611d2b90836133a1565b9050611d3f670de0b6b3a7640000826133c0565b8311611da45760405162461bcd60e51b815260206004820152602e60248201527f416d6f756e742073686f756c6420626520686967686572207468616e2072656d60448201526d61696e696e67207265776172647360901b6064820152608401610883565b611db96001600160a01b038516333086612c94565b62093a8081611dd0670de0b6b3a7640000866133a1565b611dda9190613423565b611de491906133c0565b6001600160a01b03851660009081526004602052604090205550505b611e0d62093a8042613423565b6001600160a01b0383166000818152600560205260409081902092909255905133907ff70d5c697de7ea828df48e5c4573cb2194c659f1901f70110c52b066dcf5082690611e5e9085815260200190565b60405180910390a350506001600055565b6001600160a01b038116600090815260146020908152604080832054600b909252822054826064611ea18360286133a1565b611eab91906133c0565b90506000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f3291906133e2565b6040516331a9108f60e11b8152600481018790529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636352211e90602401602060405180830381865afa158015611f9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fbe919061348e565b6001600160a01b0316876001600160a01b0316148015611fde5750600081115b156120a0576040516339f890b560e21b81526004810186905260649082906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063e7e242d490602401602060405180830381865afa15801561204d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061207191906133e2565b600a5461207e91906133a1565b61208891906133c0565b61209390603c6133a1565b61209d91906133c0565b91505b6120b36120ad8385613423565b85612a22565b979650505050505050565b816001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636352211e836040518263ffffffff1660e01b815260040161211691815260200190565b602060405180830381865afa158015612133573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612157919061348e565b6001600160a01b0316146121a25760405162461bcd60e51b81526020600482015260126024820152712737ba103b32903a37b5b2b71037bbb732b960711b6044820152606401610883565b6001600160a01b038216600090815260146020526040812054900361225a576001600160a01b03828116600081815260146020526040908190208490555163698473e360e01b81526004810184905260248101919091527f00000000000000000000000000000000000000000000000000000000000000009091169063698473e390604401600060405180830381600087803b15801561224157600080fd5b505af1158015612255573d6000803e3d6000fd5b505050505b6001600160a01b03821660009081526014602052604090205481146122af5760405162461bcd60e51b815260206004820152600b60248201526a2bb937b733903a37b5b2b760a91b6044820152606401610883565b816001600160a01b03167fa88ad287ee039276852a62661add3a03e736aca1a2987ceaebcf4ecfd018ae3f826040516122ea91815260200190565b60405180910390a25050565b6000546001146123185760405162461bcd60e51b8152600401610883906133fb565b6002600055806123585760405162461bcd60e51b815260206004820152600b60248201526a16995c9bc8185b5bdd5b9d60aa1b6044820152606401610883565b6123623382612ccc565b6123976001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333084612c94565b60405181815233907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c906020015b60405180910390a2506001600055565b600c54600a116124205760405162461bcd60e51b8152602060048201526016602482015275546f6f206d616e792072657761726420746f6b656e7360501b6044820152606401610883565b6001600160a01b0381166000908152600d602052604090205460ff161561247e5760405162461bcd60e51b8152602060048201526012602482015271105b1c9958591e481c9959da5cdd195c995960721b6044820152606401610883565b6001600160a01b03166000818152600d60205260408120805460ff19166001908117909155600c805491820181559091527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c70180546001600160a01b0319169091179055565b600060025460000361250c57506001600160a01b031660009081526007602052604090205490565b6002546001600160a01b038316600090815260046020908152604080832054600683528184205460059093529220546125459190612a22565b61254e85612bbe565b6125589190613374565b61256291906133a1565b61256c91906133c0565b6001600160a01b0383166000908152600760205260409020546107409190613423565b6001600160a01b03821660009081526013602052604081205481908082036125be576000809250925050610eda565b6001600160a01b0385166000908152601260205260408120906125e28284886127d8565b6000908152602092835260409081902081518083019092528054808352600190910154919093018190529791965090945050505050565b6001600160a01b038216600090815260146020526040902054811461266e5760405162461bcd60e51b815260206004820152600b60248201526a2bb937b733903a37b5b2b760a91b6044820152606401610883565b6001600160a01b03828116600081815260146020526040808220919091555163411b1f7760e01b81526004810184905260248101919091527f00000000000000000000000000000000000000000000000000000000000000009091169063411b1f7790604401600060405180830381600087803b1580156126ee57600080fd5b505af1158015612702573d6000803e3d6000fd5b50505050816001600160a01b03167f25842dad107a4bb4efa3824996f6140a5f6f3de5197debed6d780dc08bb0a0a0826040516122ea91815260200190565b6000546001146127635760405162461bcd60e51b8152600401610883906133fb565b60026000556127723382612d22565b6127a66001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383612935565b60405181815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364906020016123c5565b60008260000361281e5760405162461bcd60e51b8152602060048201526011602482015270456d70747920636865636b706f696e747360781b6044820152606401610883565b8184600061282d600187613374565b815260200190815260200160002060000154116128565761284f600184613374565b9050610cfe565b60008080526020859052604090205482101561287457506000610cfe565b600080612882600186613374565b90505b81811115612915576000600261289b8484613374565b6128a591906133c0565b6128af9083613374565b600081815260208981526040918290208251808401909352805480845260019091015491830191909152919250908690036128ef57509250610cfe915050565b80518611156129005781935061290e565b61290b600183613374565b92505b5050612885565b50949350505050565b60008183101561292e578161073d565b5090919050565b6040516001600160a01b03831660248201526044810182905261299890849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612d69565b505050565b6001600160a01b03811660009081526003602052604081205460028054919283926129c9908490613374565b909155506129d8905082611e6f565b6001600160a01b0383166000908152600360205260408120829055600280549293508392909190612a0a908490613423565b90915550612a1a90508282612e3b565b610910612f2c565b600081831061292e578161073d565b6000806000612a40878561291e565b6001600160a01b038916600090815260056020908152604080832054600490925290912054919250908690612a7e612a788a8961291e565b84612a22565b612a888585612a22565b612a929190613374565b612a9c91906133a1565b612aa691906133c0565b99919850909650505050505050565b6001600160a01b0383166000908152601360205260409020548015801590612b1157506001600160a01b03841660009081526012602052604081208391612afd600185613374565b815260200190815260200160002060000154145b15612b54576001600160a01b03841660009081526012602052604081208491612b3b600185613374565b8152602081019190915260400160002060010155612bb8565b60408051808201825283815260208082018681526001600160a01b038816600090815260128352848120868252909252929020905181559051600191820155612b9e908290613423565b6001600160a01b0385166000908152601360205260409020555b50505050565b6001600160a01b038116600090815260056020526040812054610740904290612a22565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015612c33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c5791906133e2565b612c619190613423565b6040516001600160a01b038516602482015260448101829052909150612bb890859063095ea7b360e01b90606401612961565b6040516001600160a01b0380851660248301528316604482015260648101829052612bb89085906323b872dd60e01b90608401612961565b612cd4612fd0565b80600a6000828254612ce69190613423565b90915550506001600160a01b0382166000908152600b602052604081208054839290612d13908490613423565b9091555061091090508261299d565b612d2a612fd0565b80600a6000828254612d3c9190613374565b90915550506001600160a01b0382166000908152600b602052604081208054839290612d13908490613374565b6000612dbe826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166130549092919063ffffffff16565b8051909150156129985780806020019051810190612ddc91906134ab565b6129985760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610883565b6001600160a01b0382166000908152600f602052604090205442908015801590612e9957506001600160a01b0384166000908152600e602052604081208391612e85600185613374565b815260200190815260200160002060000154145b15612ec3576001600160a01b0384166000908152600e602052604081208491612b3b600185613374565b60408051808201825283815260208082018681526001600160a01b0388166000908152600e8352848120868252909252929020905181559051600191820155612f0d908290613423565b6001600160a01b0385166000908152600f602052604090205550505050565b601154428115801590612f5e57508060106000612f4a600186613374565b815260200190815260200160002060000154145b15612f8d5760025460106000612f75600186613374565b81526020810191909152604001600020600101555050565b60408051808201825282815260025460208083019182526000868152601090915292909220905181559051600191820155612fc9908390613423565b6011555050565b600c5460005b81811015610910576000600c8281548110612ff357612ff361332f565b6000918252602090912001546001600160a01b031690506130188160001960016114a9565b6001600160a01b03909216600090815260076020908152604080832060069092529091209290925590558061304c8161335b565b915050612fd6565b60606001600160a01b0384163b6130ad5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610883565b600080856001600160a01b0316856040516130c891906134f9565b6000604051808303816000865af19150503d8060008114613105576040519150601f19603f3d011682016040523d82523d6000602084013e61310a565b606091505b509150915061311a828286613124565b9695505050505050565b60608315613133575081610cfe565b8251156131435782518084602001fd5b8160405162461bcd60e51b81526004016108839190613515565b6001600160a01b0381168114610dab57600080fd5b803561317d8161315d565b919050565b6000806040838503121561319557600080fd5b82356131a08161315d565b946020939093013593505050565b600080604083850312156131c157600080fd5b82356131cc8161315d565b915060208301356131dc8161315d565b809150509250929050565b6000602082840312156131f957600080fd5b8135610cfe8161315d565b60006020828403121561321657600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561324657600080fd5b82356132518161315d565b915060208381013567ffffffffffffffff8082111561326f57600080fd5b818601915086601f83011261328357600080fd5b8135818111156132955761329561321d565b8060051b604051601f19603f830116810181811085821117156132ba576132ba61321d565b6040529182528482019250838101850191898311156132d857600080fd5b938501935b828510156132fd576132ee85613172565b845293850193928501926132dd565b8096505050505050509250929050565b6000806040838503121561332057600080fd5b50508035926020909101359150565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161336d5761336d613345565b5060010190565b60008282101561338657613386613345565b500390565b634e487b7160e01b600052603160045260246000fd5b60008160001904831182151516156133bb576133bb613345565b500290565b6000826133dd57634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156133f457600080fd5b5051919050565b6020808252600e908201526d1499595b9d1c985b9d0818d85b1b60921b604082015260600190565b6000821982111561343657613436613345565b500190565b6000806040838503121561344e57600080fd5b505080516020909101519092909150565b6000806040838503121561347257600080fd5b825161347d8161315d565b60208401519092506131dc8161315d565b6000602082840312156134a057600080fd5b8151610cfe8161315d565b6000602082840312156134bd57600080fd5b81518015158114610cfe57600080fd5b60005b838110156134e85781810151838201526020016134d0565b83811115612bb85750506000910152565b6000825161350b8184602087016134cd565b9190910192915050565b60208152600082518060208401526135348160408501602087016134cd565b601f01601f1916919091016040019291505056fea2646970667358221220f1f7b57260340898b5641956443de8c954b596ebb6b2983605fcaf884cb157f264736f6c634300080d0033a26469706673582212201fd168ad808aabc95ce04804697524bfb729c939e028fcae0cf60e9dbf414ee064736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c8063559a9c0a1461004657806358c14b6514610075578063b46d346514610088575b600080fd5b6100596100543660046102b6565b61009b565b6040516001600160a01b03909116815260200160405180910390f35b610059610083366004610336565b610138565b600054610059906001600160a01b031681565b60008086868686866040516100af906101d4565b6100bd9594939291906103a5565b604051809103906000f0801580156100d9573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b0383169081179091556040519081529091507faa98436d09d130af48de49867af8b723bbbebb0d737638b5fe8f1bf31bbb71c09060200160405180910390a19695505050505050565b600080858585338660405161014c906101d4565b61015a9594939291906103a5565b604051809103906000f080158015610176573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b0383169081179091556040519081529091507faa98436d09d130af48de49867af8b723bbbebb0d737638b5fe8f1bf31bbb71c09060200160405180910390a195945050505050565b613a06806200041b83390190565b80356001600160a01b03811681146101f957600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261022557600080fd5b8135602067ffffffffffffffff80831115610242576102426101fe565b8260051b604051601f19603f83011681018181108482111715610267576102676101fe565b60405293845285810183019383810192508785111561028557600080fd5b83870191505b848210156102ab5761029c826101e2565b8352918301919083019061028b565b979650505050505050565b600080600080600060a086880312156102ce57600080fd5b6102d7866101e2565b94506102e5602087016101e2565b93506102f3604087016101e2565b9250610301606087016101e2565b9150608086013567ffffffffffffffff81111561031d57600080fd5b61032988828901610214565b9150509295509295909350565b6000806000806080858703121561034c57600080fd5b610355856101e2565b9350610363602086016101e2565b9250610371604086016101e2565b9150606085013567ffffffffffffffff81111561038d57600080fd5b61039987828801610214565b91505092959194509250565b600060a0820160018060a01b0380891684526020818916818601528188166040860152818716606086015260a0608086015282865180855260c087019150828801945060005b818110156104095785518516835294830194918301916001016103eb565b50909b9a505050505050505050505056fe61010060405260016000553480156200001757600080fd5b5060405162003a0638038062003a068339810160408190526200003a916200025d565b6001600160a01b03858116608052600180546001600160a01b03191691841691909117905584828260005b8151811015620000e85760006001600160a01b03168282815181106200008f576200008f6200037d565b60200260200101516001600160a01b031614620000d357620000d3828281518110620000bf57620000bf6200037d565b60200260200101516200010c60201b60201c565b80620000df8162000393565b91505062000065565b5050506001600160a01b0394851660c052505090821660a0521660e05250620003bb565b600c54600a11620001645760405162461bcd60e51b815260206004820152601660248201527f546f6f206d616e792072657761726420746f6b656e730000000000000000000060448201526064015b60405180910390fd5b6001600160a01b0381166000908152600d602052604090205460ff1615620001c45760405162461bcd60e51b8152602060048201526012602482015271105b1c9958591e481c9959da5cdd195c995960721b60448201526064016200015b565b6001600160a01b03166000818152600d60205260408120805460ff19166001908117909155600c805491820181559091527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c70180546001600160a01b0319169091179055565b80516001600160a01b03811681146200024257600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600080600080600060a086880312156200027657600080fd5b62000281866200022a565b94506020620002928188016200022a565b9450620002a2604088016200022a565b9350620002b2606088016200022a565b60808801519093506001600160401b0380821115620002d057600080fd5b818901915089601f830112620002e557600080fd5b815181811115620002fa57620002fa62000247565b8060051b604051601f19603f8301168101818110858211171562000322576200032262000247565b60405291825284820192508381018501918c8311156200034157600080fd5b938501935b828510156200036a576200035a856200022a565b8452938501939285019262000346565b8096505050505050509295509295909350565b634e487b7160e01b600052603260045260246000fd5b600060018201620003b457634e487b7160e01b600052601160045260246000fd5b5060010190565b60805160a05160c05160e05161357e6200048860003960008181610450015281816107a70152818161082d015281816108a101528181610e34015281816121fb01526126a80152600081816103eb0152818161180b01528181611893015281816118de01528181611964015281816119ea0152611a3501526000818161033101528181611eb201528181611f4b0152818161200601526120ca0152600081816104c601528181610d32015281816116c201528181611b120152818161236f015261277f015261357e6000f3fe608060405234801561001057600080fd5b506004361061027f5760003560e01c80637bb7bed11161015c578063d294f093116100ce578063e8111a1211610087578063e8111a12146106a8578063f1229777146106b1578063f7412baf146106c4578063fc97a303146106eb578063fd3140981461070b578063fdb483c71461071e57600080fd5b8063d294f0931461063e578063d35e254414610646578063d7da4bb014610659578063da09d19d14610662578063e2bbb15814610682578063e46dbc981461069557600080fd5b8063a495e5b511610120578063a495e5b514610592578063aa479652146105bd578063b5fd73f8146105dd578063b66503cf14610610578063bf199e6214610623578063c6f678bd1461062b57600080fd5b80637bb7bed11461053b578063853828b61461054e57806393f1c4421461055657806399bcc0521461055f5780639ce43f901461057257600080fd5b80633ca068b6116101f557806363fb415b116101b957806363fb415b1461048e57806368fcee1a146104ae5780636f307dc3146104c15780636fcfff45146104e857806370a082311461050857806376f4be361461052857600080fd5b80633ca068b61461040d5780633d509c971461043857806346c96aac1461044b5780634c02a21c14610472578063570ca7351461047b57600080fd5b8063211dc32d11610247578063211dc32d1461036b578063221ca18c1461037e5780632ce9aead1461039e5780632e1a7d4d146103be57806331279d3d146103d357806337d0208c146103e657600080fd5b806301316ddf146102845780630cdfebfa146102d0578063115c6f391461030257806318160ddd146103235780631f8507161461032c575b600080fd5b6102b6610292366004613182565b60126020908152600092835260408084209091529082529020805460019091015482565b604080519283526020830191909152015b60405180910390f35b6102b66102de366004613182565b600e6020908152600092835260408084209091529082529020805460019091015482565b610315610310366004613182565b610731565b6040519081526020016102c7565b610315600a5481565b6103537f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016102c7565b6103156103793660046131ae565b610746565b61031561038c3660046131e7565b60046020526000908152604090205481565b6103156103ac3660046131e7565b60066020526000908152604090205481565b6103d16103cc366004613204565b610752565b005b6103d16103e1366004613233565b610810565b6103537f000000000000000000000000000000000000000000000000000000000000000081565b61031561041b3660046131ae565b600960209081526000928352604080842090915290825290205481565b6103d16104463660046131e7565b610914565b6103537f000000000000000000000000000000000000000000000000000000000000000081565b61031560165481565b600154610353906001600160a01b031681565b61031561049c3660046131e7565b60036020526000908152604090205481565b6103d16104bc366004613182565b610bef565b6103537f000000000000000000000000000000000000000000000000000000000000000081565b6103156104f63660046131e7565b600f6020526000908152604090205481565b6103156105163660046131e7565b600b6020526000908152604090205481565b610315610536366004613204565b610c29565b610353610549366004613204565b610c34565b6103d1610c5e565b61031560155481565b61031561056d3660046131e7565b610c79565b6103156105803660046131e7565b60076020526000908152604090205481565b6103156105a03660046131ae565b600860209081526000928352604080842090915290825290205481565b6103156105cb3660046131e7565b60136020526000908152604090205481565b6106006105eb3660046131e7565b600d6020526000908152604090205460ff1681565b60405190151581526020016102c7565b6103d161061e366004613182565b610d05565b600c54610315565b6103d1610639366004613204565b610d19565b6102b6610dae565b6103156106543660046131e7565b610ded565b61031560025481565b6103156106703660046131e7565b60056020526000908152604090205481565b6103d161069036600461330d565b610df8565b6103d16106a33660046131e7565b610e6b565b61031560115481565b6103156106bf3660046131e7565b610ebd565b6102b66106d2366004613204565b6010602052600090815260409020805460019091015482565b6103156106f93660046131e7565b60146020526000908152604090205481565b6102b6610719366004613182565b610ec8565b6103d161072c36600461330d565b610ee1565b600061073d8383610efa565b90505b92915050565b600061073d8383610f4f565b336000908152600b6020526040812054820361077a5750336000908152601460205260409020545b6107848282610ee1565b604051633aa53b9160e21b815260048101829052336024820152604481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063ea94ee44906064015b600060405180830381600087803b1580156107f457600080fd5b505af1158015610808573d6000803e3d6000fd5b505050505050565b336001600160a01b038316148061084f5750336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016145b61088c5760405162461bcd60e51b81526020600482015260096024820152682337b93134b23232b760b91b60448201526064015b60405180910390fd5b6040516363453ae160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906363453ae190602401600060405180830381600087803b1580156108ed57600080fd5b505af1158015610901573d6000803e3d6000fd5b505050506109108282846111d0565b5050565b6001546001600160a01b0316331461095d5760405162461bcd60e51b815260206004820152600c60248201526b2737ba1037b832b930ba37b960a11b6044820152606401610883565b6001600160a01b03811660009081526005602052604090205442116109b85760405162461bcd60e51b815260206004820152601160248201527014995dd85c991cc81b9bdd08195b991959607a1b6044820152606401610883565b6001600160a01b0381166000908152600d602052604090205460ff16610a135760405162461bcd60e51b815260206004820152601060248201526f2737ba103932bbb0b932103a37b5b2b760811b6044820152606401610883565b6001600160a01b0381166000908152600d60205260409020805460ff19169055600c5460038111610a925760405162461bcd60e51b8152602060048201526024808201527f4669727374203320746f6b656e732073686f756c64206e6f742062652072656d6044820152631bdd995960e21b6064820152608401610883565b600360005b82821015610af2576000600c8381548110610ab457610ab461332f565b6000918252602090912001546001600160a01b03908116915085168103610adf576001915050610af2565b5081610aea8161335b565b925050610a97565b80610b3f5760405162461bcd60e51b815260206004820181905260248201527f466972737420746f6b656e7320666f7262696464656e20746f2072656d6f76656044820152606401610883565b600c610b4c600185613374565b81548110610b5c57610b5c61332f565b600091825260209091200154600c80546001600160a01b039092169184908110610b8857610b8861332f565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600c805480610bc757610bc761338b565b600082815260209020810160001990810180546001600160a01b031916905501905550505050565b610bfb828260006114a9565b6001600160a01b03909316600090815260076020908152604080832060069092529091209390935590915550565b600061074082611699565b600c8181548110610c4457600080fd5b6000918252602090912001546001600160a01b0316905081565b336000908152600b6020526040902054610c7790610752565b565b6001600160a01b0381166000908152600560205260408120544210610ca057506000919050565b6001600160a01b038216600090815260056020526040812054610cc4904290613374565b6001600160a01b038416600090815260046020526040902054909150670de0b6b3a764000090610cf490836133a1565b610cfe91906133c0565b9392505050565b610d0d6116bb565b50506109108282611ae1565b6040516370a0823160e01b8152336004820152610dab907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610d81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da591906133e2565b82610df8565b50565b600080600054600114610dd35760405162461bcd60e51b8152600401610883906133fb565b6002600055610de06116bb565b9150915060016000559091565b600061074082611e6f565b8015610e0857610e0833826120be565b610e11826122f6565b60405163530e389d60e11b815260048101829052336024820152604481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a61c713a906064016107da565b6001546001600160a01b03163314610eb45760405162461bcd60e51b815260206004820152600c60248201526b2737ba1037b832b930ba37b960a11b6044820152606401610883565b610dab816123d5565b6000610740826124e4565b600080610ed5848461258f565b915091505b9250929050565b8015610ef157610ef13382612619565b61091082612741565b6001600160a01b0382166000908152600f6020526040812054808203610f24576000915050610740565b6001600160a01b0384166000908152600e60205260409020610f479082856127d8565b949350505050565b6001600160a01b0381166000908152600f60205260408120548103610f7657506000610740565b6001600160a01b03808416600081815260086020908152604080832094871683529381528382205492825260128152838220828052905291822054610fbb919061291e565b90506000610fc98483610efa565b6001600160a01b0385166000908152600f602052604081205491925090610ff290600190613374565b90506000811561110457825b611009600184613374565b8111611102576001600160a01b0387166000818152600e60208181526040808420868552808352818520825180840190935280548352600190810154838501529585529290915292829061105e908690613423565b8152602001908152602001600020604051806040016040529081600082015481526020016001820154815250509050600061109d8b846000015161258f565b50905060006110b08c846000015161258f565b509050670de0b6b3a76400006110c68383613374565b85602001516110d591906133a1565b6110df91906133c0565b6110e99087613423565b95505050505080806110fa9061335b565b915050610ffe565b505b6001600160a01b0386166000908152600e6020908152604080832085845282528083208151808301909252805480835260019091015492820192909252919061114e908a9061258f565b506001600160a01b03808b166000908152600960209081526040808320938d1683529290522054909150670de0b6b3a76400009061118d90839061291e565b6111968b6124e4565b6111a09190613374565b83602001516111af91906133a1565b6111b991906133c0565b6111c39084613423565b9998505050505050505050565b6000546001146111f25760405162461bcd60e51b8152600401610883906133fb565b600260009081555b82518110156114955761122a8382815181106112185761121861332f565b602002602001015160001960016114a9565b600760008685815181106112405761124061332f565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000206000600660008887815181106112805761128061332f565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020600084919050558391905055505060006112db8483815181106112cd576112cd61332f565b602002602001015186610f4f565b905042600860008685815181106112f4576112f461332f565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000206000876001600160a01b03166001600160a01b0316815260200190815260200160002081905550600760008584815181106113595761135961332f565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054600960008685815181106113985761139861332f565b6020908102919091018101516001600160a01b0390811683528282019390935260409182016000908120938a168152929052902055801561140a5761140a83828685815181106113ea576113ea61332f565b60200260200101516001600160a01b03166129359092919063ffffffff16565b83828151811061141c5761141c61332f565b60200260200101516001600160a01b0316336001600160a01b03167fe4394b3c25e336e9d6b7fcefab7e3234f1c6b373f13655dc3920664b080b098d838660405161147a9291909182526001600160a01b0316602082015260400190565b60405180910390a3508061148d8161335b565b9150506111fa565b5061149f8361299d565b5050600160005550565b6001600160a01b03831660009081526006602090815260408083205460079092528220546011548392919083036114e35792509050611691565b6001600160a01b038716600090815260046020526040812054900361150e5792504291506116919050565b600061151983611699565b90506000611535600160115461152f9190613374565b89612a22565b9050801561160e57815b61154a600183613374565b811161160c5760008181526010602090815260409182902082518084019093528054835260010154908201819052156115f957600060108161158d856001613423565b81526020019081526020016000206040518060400160405290816000820154815260200160018201548152505090506000806115d88e8460000151866000015187602001518d612a31565b90925090506115e78289613423565b97506115f48e8983612ab5565b975050505b50806116048161335b565b91505061153f565b505b86156116885760008181526010602090815260409182902082518084019093528054835260010154908201819052156116865760006116678b6116508d612bbe565b845161165c908a61291e565b85602001518a612a31565b5090506116748186613423565b94506116818b8642612ab5565b429550505b505b50909350909150505b935093915050565b6011546000908082036116af5750600092915050565b610cfe601082856127d8565b60008060007f00000000000000000000000000000000000000000000000000000000000000009050806001600160a01b031663d294f0936040518163ffffffff1660e01b815260040160408051808303816000875af1158015611722573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611746919061343b565b9093509150821515806117595750600082115b15611adc5760008360155461176e9190613423565b90506000836016546117809190613423565b9050600080846001600160a01b0316639d63848a6040518163ffffffff1660e01b81526004016040805180830381865afa1580156117c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e6919061345f565b604051634cde602960e11b81526001600160a01b0380841660048301529294509092507f0000000000000000000000000000000000000000000000000000000000000000909116906399bcc05290602401602060405180830381865afa158015611854573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061187891906133e2565b84111561193f5760006015556118b86001600160a01b0383167f000000000000000000000000000000000000000000000000000000000000000086612be2565b60405163b66503cf60e01b81526001600160a01b038381166004830152602482018690527f0000000000000000000000000000000000000000000000000000000000000000169063b66503cf90604401600060405180830381600087803b15801561192257600080fd5b505af1158015611936573d6000803e3d6000fd5b50505050611945565b60158490555b604051634cde602960e11b81526001600160a01b0382811660048301527f000000000000000000000000000000000000000000000000000000000000000016906399bcc05290602401602060405180830381865afa1580156119ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119cf91906133e2565b831115611a96576000601655611a0f6001600160a01b0382167f000000000000000000000000000000000000000000000000000000000000000085612be2565b60405163b66503cf60e01b81526001600160a01b038281166004830152602482018590527f0000000000000000000000000000000000000000000000000000000000000000169063b66503cf90604401600060405180830381600087803b158015611a7957600080fd5b505af1158015611a8d573d6000803e3d6000fd5b50505050611a9c565b60168390555b604080518881526020810188905233917fbc567d6cbad26368064baa0ab5a757be46aae4d70f707f9203d9d9b6c8ccbfa3910160405180910390a2505050505b509091565b600054600114611b035760405162461bcd60e51b8152600401610883906133fb565b60026000556001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811690831603611b835760405162461bcd60e51b815260206004820152601760248201527f57726f6e6720746f6b656e20666f7220726577617264730000000000000000006044820152606401610883565b60008111611bc15760405162461bcd60e51b815260206004820152600b60248201526a16995c9bc8185b5bdd5b9d60aa1b6044820152606401610883565b6001600160a01b0382166000908152600d602052604090205460ff16611c1d5760405162461bcd60e51b8152602060048201526011602482015270151bdad95b881b9bdd08185b1b1bddd959607a1b6044820152606401610883565b6001600160a01b0382166000908152600460205260408120549003611c4857611c4882600042612ab5565b611c568260001960016114a9565b6001600160a01b0384166000908152600760209081526040808320600683528184209490945593909255600590915220544210611ce057611ca26001600160a01b038316333084612c94565b62093a80611cb8670de0b6b3a7640000836133a1565b611cc291906133c0565b6001600160a01b038316600090815260046020526040902055611e00565b6001600160a01b038216600090815260056020526040812054611d04904290613374565b6001600160a01b03841660009081526004602052604081205491925090611d2b90836133a1565b9050611d3f670de0b6b3a7640000826133c0565b8311611da45760405162461bcd60e51b815260206004820152602e60248201527f416d6f756e742073686f756c6420626520686967686572207468616e2072656d60448201526d61696e696e67207265776172647360901b6064820152608401610883565b611db96001600160a01b038516333086612c94565b62093a8081611dd0670de0b6b3a7640000866133a1565b611dda9190613423565b611de491906133c0565b6001600160a01b03851660009081526004602052604090205550505b611e0d62093a8042613423565b6001600160a01b0383166000818152600560205260409081902092909255905133907ff70d5c697de7ea828df48e5c4573cb2194c659f1901f70110c52b066dcf5082690611e5e9085815260200190565b60405180910390a350506001600055565b6001600160a01b038116600090815260146020908152604080832054600b909252822054826064611ea18360286133a1565b611eab91906133c0565b90506000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f3291906133e2565b6040516331a9108f60e11b8152600481018790529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636352211e90602401602060405180830381865afa158015611f9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fbe919061348e565b6001600160a01b0316876001600160a01b0316148015611fde5750600081115b156120a0576040516339f890b560e21b81526004810186905260649082906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063e7e242d490602401602060405180830381865afa15801561204d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061207191906133e2565b600a5461207e91906133a1565b61208891906133c0565b61209390603c6133a1565b61209d91906133c0565b91505b6120b36120ad8385613423565b85612a22565b979650505050505050565b816001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636352211e836040518263ffffffff1660e01b815260040161211691815260200190565b602060405180830381865afa158015612133573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612157919061348e565b6001600160a01b0316146121a25760405162461bcd60e51b81526020600482015260126024820152712737ba103b32903a37b5b2b71037bbb732b960711b6044820152606401610883565b6001600160a01b038216600090815260146020526040812054900361225a576001600160a01b03828116600081815260146020526040908190208490555163698473e360e01b81526004810184905260248101919091527f00000000000000000000000000000000000000000000000000000000000000009091169063698473e390604401600060405180830381600087803b15801561224157600080fd5b505af1158015612255573d6000803e3d6000fd5b505050505b6001600160a01b03821660009081526014602052604090205481146122af5760405162461bcd60e51b815260206004820152600b60248201526a2bb937b733903a37b5b2b760a91b6044820152606401610883565b816001600160a01b03167fa88ad287ee039276852a62661add3a03e736aca1a2987ceaebcf4ecfd018ae3f826040516122ea91815260200190565b60405180910390a25050565b6000546001146123185760405162461bcd60e51b8152600401610883906133fb565b6002600055806123585760405162461bcd60e51b815260206004820152600b60248201526a16995c9bc8185b5bdd5b9d60aa1b6044820152606401610883565b6123623382612ccc565b6123976001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333084612c94565b60405181815233907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c906020015b60405180910390a2506001600055565b600c54600a116124205760405162461bcd60e51b8152602060048201526016602482015275546f6f206d616e792072657761726420746f6b656e7360501b6044820152606401610883565b6001600160a01b0381166000908152600d602052604090205460ff161561247e5760405162461bcd60e51b8152602060048201526012602482015271105b1c9958591e481c9959da5cdd195c995960721b6044820152606401610883565b6001600160a01b03166000818152600d60205260408120805460ff19166001908117909155600c805491820181559091527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c70180546001600160a01b0319169091179055565b600060025460000361250c57506001600160a01b031660009081526007602052604090205490565b6002546001600160a01b038316600090815260046020908152604080832054600683528184205460059093529220546125459190612a22565b61254e85612bbe565b6125589190613374565b61256291906133a1565b61256c91906133c0565b6001600160a01b0383166000908152600760205260409020546107409190613423565b6001600160a01b03821660009081526013602052604081205481908082036125be576000809250925050610eda565b6001600160a01b0385166000908152601260205260408120906125e28284886127d8565b6000908152602092835260409081902081518083019092528054808352600190910154919093018190529791965090945050505050565b6001600160a01b038216600090815260146020526040902054811461266e5760405162461bcd60e51b815260206004820152600b60248201526a2bb937b733903a37b5b2b760a91b6044820152606401610883565b6001600160a01b03828116600081815260146020526040808220919091555163411b1f7760e01b81526004810184905260248101919091527f00000000000000000000000000000000000000000000000000000000000000009091169063411b1f7790604401600060405180830381600087803b1580156126ee57600080fd5b505af1158015612702573d6000803e3d6000fd5b50505050816001600160a01b03167f25842dad107a4bb4efa3824996f6140a5f6f3de5197debed6d780dc08bb0a0a0826040516122ea91815260200190565b6000546001146127635760405162461bcd60e51b8152600401610883906133fb565b60026000556127723382612d22565b6127a66001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383612935565b60405181815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364906020016123c5565b60008260000361281e5760405162461bcd60e51b8152602060048201526011602482015270456d70747920636865636b706f696e747360781b6044820152606401610883565b8184600061282d600187613374565b815260200190815260200160002060000154116128565761284f600184613374565b9050610cfe565b60008080526020859052604090205482101561287457506000610cfe565b600080612882600186613374565b90505b81811115612915576000600261289b8484613374565b6128a591906133c0565b6128af9083613374565b600081815260208981526040918290208251808401909352805480845260019091015491830191909152919250908690036128ef57509250610cfe915050565b80518611156129005781935061290e565b61290b600183613374565b92505b5050612885565b50949350505050565b60008183101561292e578161073d565b5090919050565b6040516001600160a01b03831660248201526044810182905261299890849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612d69565b505050565b6001600160a01b03811660009081526003602052604081205460028054919283926129c9908490613374565b909155506129d8905082611e6f565b6001600160a01b0383166000908152600360205260408120829055600280549293508392909190612a0a908490613423565b90915550612a1a90508282612e3b565b610910612f2c565b600081831061292e578161073d565b6000806000612a40878561291e565b6001600160a01b038916600090815260056020908152604080832054600490925290912054919250908690612a7e612a788a8961291e565b84612a22565b612a888585612a22565b612a929190613374565b612a9c91906133a1565b612aa691906133c0565b99919850909650505050505050565b6001600160a01b0383166000908152601360205260409020548015801590612b1157506001600160a01b03841660009081526012602052604081208391612afd600185613374565b815260200190815260200160002060000154145b15612b54576001600160a01b03841660009081526012602052604081208491612b3b600185613374565b8152602081019190915260400160002060010155612bb8565b60408051808201825283815260208082018681526001600160a01b038816600090815260128352848120868252909252929020905181559051600191820155612b9e908290613423565b6001600160a01b0385166000908152601360205260409020555b50505050565b6001600160a01b038116600090815260056020526040812054610740904290612a22565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015612c33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c5791906133e2565b612c619190613423565b6040516001600160a01b038516602482015260448101829052909150612bb890859063095ea7b360e01b90606401612961565b6040516001600160a01b0380851660248301528316604482015260648101829052612bb89085906323b872dd60e01b90608401612961565b612cd4612fd0565b80600a6000828254612ce69190613423565b90915550506001600160a01b0382166000908152600b602052604081208054839290612d13908490613423565b9091555061091090508261299d565b612d2a612fd0565b80600a6000828254612d3c9190613374565b90915550506001600160a01b0382166000908152600b602052604081208054839290612d13908490613374565b6000612dbe826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166130549092919063ffffffff16565b8051909150156129985780806020019051810190612ddc91906134ab565b6129985760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610883565b6001600160a01b0382166000908152600f602052604090205442908015801590612e9957506001600160a01b0384166000908152600e602052604081208391612e85600185613374565b815260200190815260200160002060000154145b15612ec3576001600160a01b0384166000908152600e602052604081208491612b3b600185613374565b60408051808201825283815260208082018681526001600160a01b0388166000908152600e8352848120868252909252929020905181559051600191820155612f0d908290613423565b6001600160a01b0385166000908152600f602052604090205550505050565b601154428115801590612f5e57508060106000612f4a600186613374565b815260200190815260200160002060000154145b15612f8d5760025460106000612f75600186613374565b81526020810191909152604001600020600101555050565b60408051808201825282815260025460208083019182526000868152601090915292909220905181559051600191820155612fc9908390613423565b6011555050565b600c5460005b81811015610910576000600c8281548110612ff357612ff361332f565b6000918252602090912001546001600160a01b031690506130188160001960016114a9565b6001600160a01b03909216600090815260076020908152604080832060069092529091209290925590558061304c8161335b565b915050612fd6565b60606001600160a01b0384163b6130ad5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610883565b600080856001600160a01b0316856040516130c891906134f9565b6000604051808303816000865af19150503d8060008114613105576040519150601f19603f3d011682016040523d82523d6000602084013e61310a565b606091505b509150915061311a828286613124565b9695505050505050565b60608315613133575081610cfe565b8251156131435782518084602001fd5b8160405162461bcd60e51b81526004016108839190613515565b6001600160a01b0381168114610dab57600080fd5b803561317d8161315d565b919050565b6000806040838503121561319557600080fd5b82356131a08161315d565b946020939093013593505050565b600080604083850312156131c157600080fd5b82356131cc8161315d565b915060208301356131dc8161315d565b809150509250929050565b6000602082840312156131f957600080fd5b8135610cfe8161315d565b60006020828403121561321657600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561324657600080fd5b82356132518161315d565b915060208381013567ffffffffffffffff8082111561326f57600080fd5b818601915086601f83011261328357600080fd5b8135818111156132955761329561321d565b8060051b604051601f19603f830116810181811085821117156132ba576132ba61321d565b6040529182528482019250838101850191898311156132d857600080fd5b938501935b828510156132fd576132ee85613172565b845293850193928501926132dd565b8096505050505050509250929050565b6000806040838503121561332057600080fd5b50508035926020909101359150565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161336d5761336d613345565b5060010190565b60008282101561338657613386613345565b500390565b634e487b7160e01b600052603160045260246000fd5b60008160001904831182151516156133bb576133bb613345565b500290565b6000826133dd57634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156133f457600080fd5b5051919050565b6020808252600e908201526d1499595b9d1c985b9d0818d85b1b60921b604082015260600190565b6000821982111561343657613436613345565b500190565b6000806040838503121561344e57600080fd5b505080516020909101519092909150565b6000806040838503121561347257600080fd5b825161347d8161315d565b60208401519092506131dc8161315d565b6000602082840312156134a057600080fd5b8151610cfe8161315d565b6000602082840312156134bd57600080fd5b81518015158114610cfe57600080fd5b60005b838110156134e85781810151838201526020016134d0565b83811115612bb85750506000910152565b6000825161350b8184602087016134cd565b9190910192915050565b60208152600082518060208401526135348160408501602087016134cd565b601f01601f1916919091016040019291505056fea2646970667358221220f1f7b57260340898b5641956443de8c954b596ebb6b2983605fcaf884cb157f264736f6c634300080d0033a26469706673582212201fd168ad808aabc95ce04804697524bfb729c939e028fcae0cf60e9dbf414ee064736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7101,
        "contract": "contracts/base/reward/GaugeFactory.sol:GaugeFactory",
        "label": "lastGauge",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}