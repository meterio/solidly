{
  "address": "0xbc7C8C9829a385Ce5F984E7918af161C11884022",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "BribeCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_allowedRewardTokens",
          "type": "address[]"
        }
      ],
      "name": "createBribe",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastGauge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8711cf83ae8f9593d99455a3d7a955cfb2b998a49c94005c6cafbb12c8fd6a61",
  "receipt": {
    "to": null,
    "from": "0x1479F0954dF7c667b1817E4Eb3C0f4723eB054F5",
    "contractAddress": "0xbc7C8C9829a385Ce5F984E7918af161C11884022",
    "transactionIndex": 0,
    "gasUsed": "3332057",
    "logsBloom": "0x
    "blockHash": "0x011ec5e0f87def8bf977aea872771ecf4281c041f58fc8c5302785655f5a90b5",
    "transactionHash": "0x8711cf83ae8f9593d99455a3d7a955cfb2b998a49c94005c6cafbb12c8fd6a61",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 18793952,
        "transactionHash": "0x8711cf83ae8f9593d99455a3d7a955cfb2b998a49c94005c6cafbb12c8fd6a61",
        "address": "0xbc7C8C9829a385Ce5F984E7918af161C11884022",
        "topics": [
          "0xb35bf4274d4295009f1ec66ed3f579db287889444366c03d3a695539372e8951"
        ],
        "data": "0x0000000000000000000000001479f0954df7c667b1817e4eb3c0f4723eb054f5",
        "logIndex": 0,
        "blockHash": "0x011ec5e0f87def8bf977aea872771ecf4281c041f58fc8c5302785655f5a90b5"
      }
    ],
    "blockNumber": 18793952,
    "cumulativeGasUsed": "3332057",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f670656e97b2663e52c8e055a678a800",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"BribeCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_allowedRewardTokens\",\"type\":\"address[]\"}],\"name\":\"createBribe\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastGauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/base/reward/BribeFactory.sol\":\"BribeFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/base/Reentrancy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nabstract contract Reentrancy {\\n    /// @dev simple re-entrancy check\\n    uint internal _unlocked = 1;\\n\\n    modifier lock() {\\n        require(_unlocked == 1, \\\"Reentrant call\\\");\\n        _unlocked = 2;\\n        _;\\n        _unlocked = 1;\\n    }\\n}\\n\",\"keccak256\":\"0x59c07b769bd280322dea57c93ed20b3e6e1fe1018ab9937b0dfcaddcfb5f2780\",\"license\":\"MIT\"},\"contracts/base/reward/Bribe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../../interface/IBribe.sol\\\";\\nimport \\\"../../interface/IERC721.sol\\\";\\nimport \\\"../../interface/IVoter.sol\\\";\\nimport \\\"../../interface/IVe.sol\\\";\\nimport \\\"./MultiRewardsPoolBase.sol\\\";\\n\\n/// @title Bribes pay out rewards for a given pool based on the votes\\n///        that were received from the user (goes hand in hand with Gauges.vote())\\ncontract Bribe is IBribe, MultiRewardsPoolBase {\\n    /// @dev Only voter can modify balances (since it only happens on vote())\\n    address public immutable voter;\\n    address public immutable ve;\\n\\n    // Assume that will be created from voter contract through factory\\n    constructor(address _voter, address[] memory _allowedRewardTokens)\\n        MultiRewardsPoolBase(address(0), _voter, _allowedRewardTokens)\\n    {\\n        voter = _voter;\\n        ve = IVoter(_voter).ve();\\n    }\\n\\n    function getReward(uint tokenId, address[] memory tokens) external {\\n        require(\\n            IVe(ve).isApprovedOrOwner(msg.sender, tokenId),\\n            \\\"Not token owner\\\"\\n        );\\n        _getReward(_tokenIdToAddress(tokenId), tokens, msg.sender);\\n    }\\n\\n    /// @dev Used by Voter to allow batched reward claims\\n    function getRewardForOwner(uint tokenId, address[] memory tokens)\\n        external\\n        override\\n    {\\n        require(msg.sender == voter, \\\"Not voter\\\");\\n        address owner = IERC721(ve).ownerOf(tokenId);\\n        _getReward(_tokenIdToAddress(tokenId), tokens, owner);\\n    }\\n\\n    /// @dev This is an external function, but internal notation is used\\n    ///      since it can only be called \\\"internally\\\" from Gauges\\n    function _deposit(uint amount, uint tokenId) external override {\\n        require(msg.sender == voter, \\\"Not voter\\\");\\n        require(amount > 0, \\\"Zero amount\\\");\\n\\n        address adr = _tokenIdToAddress(tokenId);\\n        _increaseBalance(adr, amount);\\n        emit Deposit(adr, amount);\\n    }\\n\\n    function _withdraw(uint amount, uint tokenId) external override {\\n        require(msg.sender == voter, \\\"Not voter\\\");\\n        require(amount > 0, \\\"Zero amount\\\");\\n\\n        address adr = _tokenIdToAddress(tokenId);\\n        _decreaseBalance(adr, amount);\\n        emit Withdraw(adr, amount);\\n    }\\n\\n    /// @dev Used to notify a gauge/bribe of a given reward,\\n    ///      this can create griefing attacks by extending rewards\\n    function notifyRewardAmount(address token, uint amount) external override {\\n        _notifyRewardAmount(token, amount);\\n    }\\n\\n    // use tokenId instead of address for\\n\\n    function tokenIdToAddress(uint tokenId) external pure returns (address) {\\n        return _tokenIdToAddress(tokenId);\\n    }\\n\\n    function _tokenIdToAddress(uint tokenId) internal pure returns (address) {\\n        address adr = address(uint160(tokenId));\\n        require(_addressToTokenId(adr) == tokenId, \\\"Wrong convert\\\");\\n        return adr;\\n    }\\n\\n    function addressToTokenId(address adr) external pure returns (uint) {\\n        return _addressToTokenId(adr);\\n    }\\n\\n    function _addressToTokenId(address adr) internal pure returns (uint) {\\n        return uint(uint160(adr));\\n    }\\n}\\n\",\"keccak256\":\"0xacbd775fba81b53d3e77c2ef89e65034a5a16a27c766ba6145affe2f0bccbace\",\"license\":\"MIT\"},\"contracts/base/reward/BribeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./Bribe.sol\\\";\\nimport \\\"../../interface/IBribeFactory.sol\\\";\\n\\ncontract BribeFactory is IBribeFactory {\\n    address public lastGauge;\\n\\n    event BribeCreated(address value);\\n\\n    function createBribe(address[] memory _allowedRewardTokens)\\n        external\\n        override\\n        returns (address)\\n    {\\n        address _lastGauge = address(\\n            new Bribe(msg.sender, _allowedRewardTokens)\\n        );\\n        lastGauge = _lastGauge;\\n        emit BribeCreated(_lastGauge);\\n        return _lastGauge;\\n    }\\n}\\n\",\"keccak256\":\"0x60baea9105978eb3f752f306ec277b5fa4cc4951940cf71648347387ce18dff4\",\"license\":\"MIT\"},\"contracts/base/reward/MultiRewardsPoolBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../../interface/IERC20.sol\\\";\\nimport \\\"../../interface/IMultiRewardsPool.sol\\\";\\nimport \\\"../../lib/Math.sol\\\";\\nimport \\\"../../lib/SafeERC20.sol\\\";\\nimport \\\"../../lib/CheckpointLib.sol\\\";\\nimport \\\"../Reentrancy.sol\\\";\\n\\nabstract contract MultiRewardsPoolBase is Reentrancy, IMultiRewardsPool {\\n    using SafeERC20 for IERC20;\\n    using CheckpointLib for mapping(uint => CheckpointLib.Checkpoint);\\n\\n    /// @dev Operator can add/remove reward tokens\\n    address public operator;\\n\\n    /// @dev The LP token that needs to be staked for rewards\\n    address public immutable override underlying;\\n\\n    uint public override derivedSupply;\\n    mapping(address => uint) public override derivedBalances;\\n\\n    /// @dev Rewards are released over 7 days\\n    uint internal constant DURATION = 7 days;\\n    uint internal constant PRECISION = 10**18;\\n    uint internal constant MAX_REWARD_TOKENS = 10;\\n\\n    /// Default snx staking contract implementation\\n    /// https://github.com/Synthetixio/synthetix/blob/develop/contracts/StakingRewards.sol\\n\\n    /// @dev Reward rate with precision 1e18\\n    mapping(address => uint) public rewardRate;\\n    mapping(address => uint) public periodFinish;\\n    mapping(address => uint) public lastUpdateTime;\\n    mapping(address => uint) public rewardPerTokenStored;\\n\\n    mapping(address => mapping(address => uint)) public lastEarn;\\n    mapping(address => mapping(address => uint))\\n        public userRewardPerTokenStored;\\n\\n    uint public override totalSupply;\\n    mapping(address => uint) public override balanceOf;\\n\\n    address[] public override rewardTokens;\\n    mapping(address => bool) public override isRewardToken;\\n\\n    /// @notice A record of balance checkpoints for each account, by index\\n    mapping(address => mapping(uint => CheckpointLib.Checkpoint))\\n        public checkpoints;\\n    /// @notice The number of checkpoints for each account\\n    mapping(address => uint) public numCheckpoints;\\n    /// @notice A record of balance checkpoints for each token, by index\\n    mapping(uint => CheckpointLib.Checkpoint) public supplyCheckpoints;\\n    /// @notice The number of checkpoints\\n    uint public supplyNumCheckpoints;\\n    /// @notice A record of balance checkpoints for each token, by index\\n    mapping(address => mapping(uint => CheckpointLib.Checkpoint))\\n        public rewardPerTokenCheckpoints;\\n    /// @notice The number of checkpoints for each token\\n    mapping(address => uint) public rewardPerTokenNumCheckpoints;\\n\\n    event Deposit(address indexed from, uint amount);\\n    event Withdraw(address indexed from, uint amount);\\n    event NotifyReward(\\n        address indexed from,\\n        address indexed reward,\\n        uint amount\\n    );\\n    event ClaimRewards(\\n        address indexed from,\\n        address indexed reward,\\n        uint amount,\\n        address recepient\\n    );\\n\\n    constructor(\\n        address _stake,\\n        address _operator,\\n        address[] memory _allowedRewardTokens\\n    ) {\\n        underlying = _stake;\\n        operator = _operator;\\n        for (uint i; i < _allowedRewardTokens.length; i++) {\\n            if (_allowedRewardTokens[i] != address(0)) {\\n                _registerRewardToken(_allowedRewardTokens[i]);\\n            }\\n        }\\n    }\\n\\n    modifier onlyOperator() {\\n        require(msg.sender == operator, \\\"Not operator\\\");\\n        _;\\n    }\\n\\n    //**************************************************************************\\n    //************************ VIEWS *******************************************\\n    //**************************************************************************\\n\\n    function rewardTokensLength() external view override returns (uint) {\\n        return rewardTokens.length;\\n    }\\n\\n    function rewardPerToken(address token) external view returns (uint) {\\n        return _rewardPerToken(token);\\n    }\\n\\n    function _rewardPerToken(address token) internal view returns (uint) {\\n        if (derivedSupply == 0) {\\n            return rewardPerTokenStored[token];\\n        }\\n        return\\n            rewardPerTokenStored[token] +\\n            (((_lastTimeRewardApplicable(token) -\\n                Math.min(lastUpdateTime[token], periodFinish[token])) *\\n                rewardRate[token]) / derivedSupply);\\n    }\\n\\n    function derivedBalance(address account)\\n        external\\n        view\\n        override\\n        returns (uint)\\n    {\\n        return _derivedBalance(account);\\n    }\\n\\n    function left(address token) external view override returns (uint) {\\n        if (block.timestamp >= periodFinish[token]) return 0;\\n        uint _remaining = periodFinish[token] - block.timestamp;\\n        return (_remaining * rewardRate[token]) / PRECISION;\\n    }\\n\\n    function earned(address token, address account)\\n        external\\n        view\\n        override\\n        returns (uint)\\n    {\\n        return _earned(token, account);\\n    }\\n\\n    //**************************************************************************\\n    //************************ OPERATOR ACTIONS ********************************\\n    //**************************************************************************\\n\\n    function registerRewardToken(address token) external onlyOperator {\\n        _registerRewardToken(token);\\n    }\\n\\n    function _registerRewardToken(address token) internal {\\n        require(\\n            rewardTokens.length < MAX_REWARD_TOKENS,\\n            \\\"Too many reward tokens\\\"\\n        );\\n        require(!isRewardToken[token], \\\"Already registered\\\");\\n        isRewardToken[token] = true;\\n        rewardTokens.push(token);\\n    }\\n\\n    function removeRewardToken(address token) external onlyOperator {\\n        require(periodFinish[token] < block.timestamp, \\\"Rewards not ended\\\");\\n        require(isRewardToken[token], \\\"Not reward token\\\");\\n\\n        isRewardToken[token] = false;\\n        uint length = rewardTokens.length;\\n        require(length > 3, \\\"First 3 tokens should not be removed\\\");\\n        // keep 3 tokens as guarantee against malicious actions\\n        // assume it will be VOLT + pool tokens\\n        uint i = 3;\\n        bool found = false;\\n        for (; i < length; i++) {\\n            address t = rewardTokens[i];\\n            if (t == token) {\\n                found = true;\\n                break;\\n            }\\n        }\\n        require(found, \\\"First tokens forbidden to remove\\\");\\n        rewardTokens[i] = rewardTokens[length - 1];\\n        rewardTokens.pop();\\n    }\\n\\n    //**************************************************************************\\n    //************************ USER ACTIONS ************************************\\n    //**************************************************************************\\n\\n    function _deposit(uint amount) internal virtual lock {\\n        require(amount > 0, \\\"Zero amount\\\");\\n        _increaseBalance(msg.sender, amount);\\n        IERC20(underlying).safeTransferFrom(msg.sender, address(this), amount);\\n        emit Deposit(msg.sender, amount);\\n    }\\n\\n    function _increaseBalance(address account, uint amount) internal virtual {\\n        _updateRewardForAllTokens();\\n\\n        totalSupply += amount;\\n        balanceOf[account] += amount;\\n\\n        _updateDerivedBalanceAndWriteCheckpoints(account);\\n    }\\n\\n    function _withdraw(uint amount) internal virtual lock {\\n        _decreaseBalance(msg.sender, amount);\\n        IERC20(underlying).safeTransfer(msg.sender, amount);\\n        emit Withdraw(msg.sender, amount);\\n    }\\n\\n    function _decreaseBalance(address account, uint amount) internal virtual {\\n        _updateRewardForAllTokens();\\n\\n        totalSupply -= amount;\\n        balanceOf[account] -= amount;\\n\\n        _updateDerivedBalanceAndWriteCheckpoints(account);\\n    }\\n\\n    /// @dev Implement restriction checks!\\n    function _getReward(\\n        address account,\\n        address[] memory tokens,\\n        address recipient\\n    ) internal virtual lock {\\n        for (uint i = 0; i < tokens.length; i++) {\\n            (\\n                rewardPerTokenStored[tokens[i]],\\n                lastUpdateTime[tokens[i]]\\n            ) = _updateRewardPerToken(tokens[i], type(uint).max, true);\\n\\n            uint _reward = _earned(tokens[i], account);\\n            lastEarn[tokens[i]][account] = block.timestamp;\\n            userRewardPerTokenStored[tokens[i]][account] = rewardPerTokenStored[\\n                tokens[i]\\n            ];\\n            if (_reward > 0) {\\n                IERC20(tokens[i]).safeTransfer(recipient, _reward);\\n            }\\n\\n            emit ClaimRewards(msg.sender, tokens[i], _reward, recipient);\\n        }\\n\\n        _updateDerivedBalanceAndWriteCheckpoints(account);\\n    }\\n\\n    function _updateDerivedBalanceAndWriteCheckpoints(address account)\\n        internal\\n    {\\n        uint __derivedBalance = derivedBalances[account];\\n        derivedSupply -= __derivedBalance;\\n        __derivedBalance = _derivedBalance(account);\\n        derivedBalances[account] = __derivedBalance;\\n        derivedSupply += __derivedBalance;\\n\\n        _writeCheckpoint(account, __derivedBalance);\\n        _writeSupplyCheckpoint();\\n    }\\n\\n    //**************************************************************************\\n    //************************ REWARDS CALCULATIONS ****************************\\n    //**************************************************************************\\n\\n    // earned is an estimation, it won't be exact till the supply > rewardPerToken calculations have run\\n    function _earned(address token, address account)\\n        internal\\n        view\\n        returns (uint)\\n    {\\n        // zero checkpoints means zero deposits\\n        if (numCheckpoints[account] == 0) {\\n            return 0;\\n        }\\n        // last claim rewards time\\n        uint _startTimestamp = Math.max(\\n            lastEarn[token][account],\\n            rewardPerTokenCheckpoints[token][0].timestamp\\n        );\\n\\n        // find an index of the balance that the user had on the last claim\\n        uint _startIndex = _getPriorBalanceIndex(account, _startTimestamp);\\n        uint _endIndex = numCheckpoints[account] - 1;\\n\\n        uint reward = 0;\\n\\n        // calculate previous snapshots if exist\\n        if (_endIndex > 0) {\\n            for (uint i = _startIndex; i <= _endIndex - 1; i++) {\\n                CheckpointLib.Checkpoint memory cp0 = checkpoints[account][i];\\n                CheckpointLib.Checkpoint memory cp1 = checkpoints[account][\\n                    i + 1\\n                ];\\n                (uint _rewardPerTokenStored0, ) = _getPriorRewardPerToken(\\n                    token,\\n                    cp0.timestamp\\n                );\\n                (uint _rewardPerTokenStored1, ) = _getPriorRewardPerToken(\\n                    token,\\n                    cp1.timestamp\\n                );\\n                reward +=\\n                    (cp0.value *\\n                        (_rewardPerTokenStored1 - _rewardPerTokenStored0)) /\\n                    PRECISION;\\n            }\\n        }\\n\\n        CheckpointLib.Checkpoint memory cp = checkpoints[account][_endIndex];\\n        (uint _rewardPerTokenStored, ) = _getPriorRewardPerToken(\\n            token,\\n            cp.timestamp\\n        );\\n        reward +=\\n            (cp.value *\\n                (_rewardPerToken(token) -\\n                    Math.max(\\n                        _rewardPerTokenStored,\\n                        userRewardPerTokenStored[token][account]\\n                    ))) /\\n            PRECISION;\\n        return reward;\\n    }\\n\\n    function _derivedBalance(address account)\\n        internal\\n        view\\n        virtual\\n        returns (uint)\\n    {\\n        // supposed to be implemented in a parent contract\\n        return balanceOf[account];\\n    }\\n\\n    /// @dev Update stored rewardPerToken values without the last one snapshot\\n    ///      If the contract will get \\\"out of gas\\\" error on users actions this will be helpful\\n    function batchUpdateRewardPerToken(address token, uint maxRuns) external {\\n        (\\n            rewardPerTokenStored[token],\\n            lastUpdateTime[token]\\n        ) = _updateRewardPerToken(token, maxRuns, false);\\n    }\\n\\n    function _updateRewardForAllTokens() internal {\\n        uint length = rewardTokens.length;\\n        for (uint i; i < length; i++) {\\n            address token = rewardTokens[i];\\n            (\\n                rewardPerTokenStored[token],\\n                lastUpdateTime[token]\\n            ) = _updateRewardPerToken(token, type(uint).max, true);\\n        }\\n    }\\n\\n    /// @dev Should be called only with properly updated snapshots, or with actualLast=false\\n    function _updateRewardPerToken(\\n        address token,\\n        uint maxRuns,\\n        bool actualLast\\n    ) internal returns (uint, uint) {\\n        uint _startTimestamp = lastUpdateTime[token];\\n        uint reward = rewardPerTokenStored[token];\\n\\n        if (supplyNumCheckpoints == 0) {\\n            return (reward, _startTimestamp);\\n        }\\n\\n        if (rewardRate[token] == 0) {\\n            return (reward, block.timestamp);\\n        }\\n        uint _startIndex = _getPriorSupplyIndex(_startTimestamp);\\n        uint _endIndex = Math.min(supplyNumCheckpoints - 1, maxRuns);\\n\\n        if (_endIndex > 0) {\\n            for (uint i = _startIndex; i <= _endIndex - 1; i++) {\\n                CheckpointLib.Checkpoint memory sp0 = supplyCheckpoints[i];\\n                if (sp0.value > 0) {\\n                    CheckpointLib.Checkpoint memory sp1 = supplyCheckpoints[\\n                        i + 1\\n                    ];\\n                    (uint _reward, uint _endTime) = _calcRewardPerToken(\\n                        token,\\n                        sp1.timestamp,\\n                        sp0.timestamp,\\n                        sp0.value,\\n                        _startTimestamp\\n                    );\\n                    reward += _reward;\\n                    _writeRewardPerTokenCheckpoint(token, reward, _endTime);\\n                    _startTimestamp = _endTime;\\n                }\\n            }\\n        }\\n\\n        // need to override the last value with actual numbers only on deposit/withdraw/claim/notify actions\\n        if (actualLast) {\\n            CheckpointLib.Checkpoint memory sp = supplyCheckpoints[_endIndex];\\n            if (sp.value > 0) {\\n                (uint _reward, ) = _calcRewardPerToken(\\n                    token,\\n                    _lastTimeRewardApplicable(token),\\n                    Math.max(sp.timestamp, _startTimestamp),\\n                    sp.value,\\n                    _startTimestamp\\n                );\\n                reward += _reward;\\n                _writeRewardPerTokenCheckpoint(token, reward, block.timestamp);\\n                _startTimestamp = block.timestamp;\\n            }\\n        }\\n\\n        return (reward, _startTimestamp);\\n    }\\n\\n    function _calcRewardPerToken(\\n        address token,\\n        uint lastSupplyTs1,\\n        uint lastSupplyTs0,\\n        uint supply,\\n        uint startTimestamp\\n    ) internal view returns (uint, uint) {\\n        uint endTime = Math.max(lastSupplyTs1, startTimestamp);\\n        uint _periodFinish = periodFinish[token];\\n        return (\\n            ((Math.min(endTime, _periodFinish) -\\n                Math.min(\\n                    Math.max(lastSupplyTs0, startTimestamp),\\n                    _periodFinish\\n                )) * rewardRate[token]) / supply,\\n            endTime\\n        );\\n    }\\n\\n    /// @dev Returns the last time the reward was modified or periodFinish if the reward has ended\\n    function _lastTimeRewardApplicable(address token)\\n        internal\\n        view\\n        returns (uint)\\n    {\\n        return Math.min(block.timestamp, periodFinish[token]);\\n    }\\n\\n    //**************************************************************************\\n    //************************ NOTIFY ******************************************\\n    //**************************************************************************\\n\\n    function _notifyRewardAmount(address token, uint amount)\\n        internal\\n        virtual\\n        lock\\n    {\\n        require(token != underlying, \\\"Wrong token for rewards\\\");\\n        require(amount > 0, \\\"Zero amount\\\");\\n        require(isRewardToken[token], \\\"Token not allowed\\\");\\n        if (rewardRate[token] == 0) {\\n            _writeRewardPerTokenCheckpoint(token, 0, block.timestamp);\\n        }\\n        (\\n            rewardPerTokenStored[token],\\n            lastUpdateTime[token]\\n        ) = _updateRewardPerToken(token, type(uint).max, true);\\n\\n        if (block.timestamp >= periodFinish[token]) {\\n            IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\n            rewardRate[token] = (amount * PRECISION) / DURATION;\\n        } else {\\n            uint _remaining = periodFinish[token] - block.timestamp;\\n            uint _left = _remaining * rewardRate[token];\\n            // not sure what the reason was in the original solidly implementation for this restriction\\n            // however, by design probably it is a good idea against human errors\\n            require(\\n                amount > _left / PRECISION,\\n                \\\"Amount should be higher than remaining rewards\\\"\\n            );\\n            IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\n            rewardRate[token] = (amount * PRECISION + _left) / DURATION;\\n        }\\n\\n        periodFinish[token] = block.timestamp + DURATION;\\n        emit NotifyReward(msg.sender, token, amount);\\n    }\\n\\n    //**************************************************************************\\n    //************************ CHECKPOINTS *************************************\\n    //**************************************************************************\\n\\n    function getPriorBalanceIndex(address account, uint timestamp)\\n        external\\n        view\\n        returns (uint)\\n    {\\n        return _getPriorBalanceIndex(account, timestamp);\\n    }\\n\\n    /// @notice Determine the prior balance for an account as of a block number\\n    /// @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n    /// @param account The address of the account to check\\n    /// @param timestamp The timestamp to get the balance at\\n    /// @return The balance the account had as of the given block\\n    function _getPriorBalanceIndex(address account, uint timestamp)\\n        internal\\n        view\\n        returns (uint)\\n    {\\n        uint nCheckpoints = numCheckpoints[account];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n        return checkpoints[account].findLowerIndex(nCheckpoints, timestamp);\\n    }\\n\\n    function getPriorSupplyIndex(uint timestamp) external view returns (uint) {\\n        return _getPriorSupplyIndex(timestamp);\\n    }\\n\\n    function _getPriorSupplyIndex(uint timestamp) internal view returns (uint) {\\n        uint nCheckpoints = supplyNumCheckpoints;\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n        return supplyCheckpoints.findLowerIndex(nCheckpoints, timestamp);\\n    }\\n\\n    function getPriorRewardPerToken(address token, uint timestamp)\\n        external\\n        view\\n        returns (uint, uint)\\n    {\\n        return _getPriorRewardPerToken(token, timestamp);\\n    }\\n\\n    function _getPriorRewardPerToken(address token, uint timestamp)\\n        internal\\n        view\\n        returns (uint, uint)\\n    {\\n        uint nCheckpoints = rewardPerTokenNumCheckpoints[token];\\n        if (nCheckpoints == 0) {\\n            return (0, 0);\\n        }\\n        mapping(uint => CheckpointLib.Checkpoint)\\n            storage cps = rewardPerTokenCheckpoints[token];\\n        uint lower = cps.findLowerIndex(nCheckpoints, timestamp);\\n        CheckpointLib.Checkpoint memory cp = cps[lower];\\n        return (cp.value, cp.timestamp);\\n    }\\n\\n    function _writeCheckpoint(address account, uint balance) internal {\\n        uint _timestamp = block.timestamp;\\n        uint _nCheckPoints = numCheckpoints[account];\\n\\n        if (\\n            _nCheckPoints > 0 &&\\n            checkpoints[account][_nCheckPoints - 1].timestamp == _timestamp\\n        ) {\\n            checkpoints[account][_nCheckPoints - 1].value = balance;\\n        } else {\\n            checkpoints[account][_nCheckPoints] = CheckpointLib.Checkpoint(\\n                _timestamp,\\n                balance\\n            );\\n            numCheckpoints[account] = _nCheckPoints + 1;\\n        }\\n    }\\n\\n    function _writeRewardPerTokenCheckpoint(\\n        address token,\\n        uint reward,\\n        uint timestamp\\n    ) internal {\\n        uint _nCheckPoints = rewardPerTokenNumCheckpoints[token];\\n\\n        if (\\n            _nCheckPoints > 0 &&\\n            rewardPerTokenCheckpoints[token][_nCheckPoints - 1].timestamp ==\\n            timestamp\\n        ) {\\n            rewardPerTokenCheckpoints[token][_nCheckPoints - 1].value = reward;\\n        } else {\\n            rewardPerTokenCheckpoints[token][_nCheckPoints] = CheckpointLib\\n                .Checkpoint(timestamp, reward);\\n            rewardPerTokenNumCheckpoints[token] = _nCheckPoints + 1;\\n        }\\n    }\\n\\n    function _writeSupplyCheckpoint() internal {\\n        uint _nCheckPoints = supplyNumCheckpoints;\\n        uint _timestamp = block.timestamp;\\n\\n        if (\\n            _nCheckPoints > 0 &&\\n            supplyCheckpoints[_nCheckPoints - 1].timestamp == _timestamp\\n        ) {\\n            supplyCheckpoints[_nCheckPoints - 1].value = derivedSupply;\\n        } else {\\n            supplyCheckpoints[_nCheckPoints] = CheckpointLib.Checkpoint(\\n                _timestamp,\\n                derivedSupply\\n            );\\n            supplyNumCheckpoints = _nCheckPoints + 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe7254d053c72d3ce0f505c1f4e39835ade8711fee6df2ef29aa6b37fb48ed175\",\"license\":\"MIT\"},\"contracts/interface/IBribe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IBribe {\\n    function notifyRewardAmount(address token, uint amount) external;\\n\\n    function _deposit(uint amount, uint tokenId) external;\\n\\n    function _withdraw(uint amount, uint tokenId) external;\\n\\n    function getRewardForOwner(uint tokenId, address[] memory tokens) external;\\n}\\n\",\"keccak256\":\"0xcf242dd62b6301060e132cc868d817cced4bb4bd21c69e4079cba92e30d333f1\",\"license\":\"MIT\"},\"contracts/interface/IBribeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IBribeFactory {\\n    function createBribe(address[] memory _allowedRewardTokens)\\n        external\\n        returns (address);\\n}\\n\",\"keccak256\":\"0x1f360e0ae33b8d5dd8c6a68c0fa2f4fe604c6a91dc143b1e966950a139edc7d8\",\"license\":\"MIT\"},\"contracts/interface/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8609505e815e06dac85e0cc77ad7bbb641ceec24e5c8e012483e8576dd09ce09\",\"license\":\"MIT\"},\"contracts/interface/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0x224e032b714ae191e5e419054a144402b01597e8b2eb36db4f6e38d3e42b0db7\",\"license\":\"MIT\"},\"contracts/interface/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed approved,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId)\\n        external\\n        view\\n        returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6983264dae1151fd2451f1cb2e4cb9a369f6dd25577600d1733fe6e4da0dc35d\",\"license\":\"MIT\"},\"contracts/interface/IMultiRewardsPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IMultiRewardsPool {\\n    function underlying() external view returns (address);\\n\\n    function derivedSupply() external view returns (uint);\\n\\n    function derivedBalances(address account) external view returns (uint);\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function balanceOf(address account) external view returns (uint);\\n\\n    function rewardTokens(uint id) external view returns (address);\\n\\n    function isRewardToken(address token) external view returns (bool);\\n\\n    function rewardTokensLength() external view returns (uint);\\n\\n    function derivedBalance(address account) external view returns (uint);\\n\\n    function left(address token) external view returns (uint);\\n\\n    function earned(address token, address account)\\n        external\\n        view\\n        returns (uint);\\n\\n    function registerRewardToken(address token) external;\\n\\n    function removeRewardToken(address token) external;\\n}\\n\",\"keccak256\":\"0x2fff1488dc483fe0c9ccc3642c522c94868e96d9173304f8fe404d91ad3c4f21\",\"license\":\"MIT\"},\"contracts/interface/IVe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IVe {\\n    enum DepositType {\\n        DEPOSIT_FOR_TYPE,\\n        CREATE_LOCK_TYPE,\\n        INCREASE_LOCK_AMOUNT,\\n        INCREASE_UNLOCK_TIME,\\n        MERGE_TYPE\\n    }\\n\\n    struct Point {\\n        int128 bias;\\n        int128 slope; // # -dweight / dt\\n        uint ts;\\n        uint blk; // block\\n    }\\n    /* We cannot really do block numbers per se b/c slope is per time, not per block\\n     * and per block could be fairly bad b/c Ethereum changes blocktimes.\\n     * What we can do is to extrapolate ***At functions */\\n\\n    struct LockedBalance {\\n        int128 amount;\\n        uint end;\\n    }\\n\\n    function token() external view returns (address);\\n\\n    function balanceOfNFT(uint) external view returns (uint);\\n\\n    function isApprovedOrOwner(address, uint) external view returns (bool);\\n\\n    function createLockFor(\\n        uint,\\n        uint,\\n        address\\n    ) external returns (uint);\\n\\n    function userPointEpoch(uint tokenId) external view returns (uint);\\n\\n    function epoch() external view returns (uint);\\n\\n    function userPointHistory(uint tokenId, uint loc)\\n        external\\n        view\\n        returns (Point memory);\\n\\n    function pointHistory(uint loc) external view returns (Point memory);\\n\\n    function checkpoint() external;\\n\\n    function depositFor(uint tokenId, uint value) external;\\n\\n    function attachToken(uint tokenId) external;\\n\\n    function detachToken(uint tokenId) external;\\n\\n    function voting(uint tokenId) external;\\n\\n    function abstain(uint tokenId) external;\\n}\\n\",\"keccak256\":\"0x93a173b039792ac393165aab7a92882d0cc1d82257c4dfe13ee26631fe46e52a\",\"license\":\"MIT\"},\"contracts/interface/IVoter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IVoter {\\n    function ve() external view returns (address);\\n\\n    function attachTokenToGauge(uint _tokenId, address account) external;\\n\\n    function detachTokenFromGauge(uint _tokenId, address account) external;\\n\\n    function emitDeposit(\\n        uint _tokenId,\\n        address account,\\n        uint amount\\n    ) external;\\n\\n    function emitWithdraw(\\n        uint _tokenId,\\n        address account,\\n        uint amount\\n    ) external;\\n\\n    function distribute(address _gauge) external;\\n\\n    function notifyRewardAmount(uint amount) external;\\n}\\n\",\"keccak256\":\"0x3585c496f0f5c40e7146bd9878293c200d38948fa20e162c1f7f48b7d475338b\",\"license\":\"MIT\"},\"contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n        (bool success, bytes memory returndata) = target.call(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x798cd9aeb57ae229f05b694ccfb44ea291726b42c0ef5da99de61785ebbc32a8\",\"license\":\"MIT\"},\"contracts/lib/CheckpointLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nlibrary CheckpointLib {\\n    /// @notice A checkpoint for uint value\\n    struct Checkpoint {\\n        uint timestamp;\\n        uint value;\\n    }\\n\\n    function findLowerIndex(\\n        mapping(uint => Checkpoint) storage checkpoints,\\n        uint size,\\n        uint timestamp\\n    ) internal view returns (uint) {\\n        require(size != 0, \\\"Empty checkpoints\\\");\\n\\n        // First check most recent value\\n        if (checkpoints[size - 1].timestamp <= timestamp) {\\n            return (size - 1);\\n        }\\n\\n        // Next check implicit zero value\\n        if (checkpoints[0].timestamp > timestamp) {\\n            return 0;\\n        }\\n\\n        uint lower = 0;\\n        uint upper = size - 1;\\n        while (upper > lower) {\\n            // ceil, avoiding overflow\\n            uint center = upper - (upper - lower) / 2;\\n            Checkpoint memory cp = checkpoints[center];\\n            if (cp.timestamp == timestamp) {\\n                return center;\\n            } else if (cp.timestamp < timestamp) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return lower;\\n    }\\n}\\n\",\"keccak256\":\"0xb5ccd2ad5421f03ed9b67825a8e4c89f6b67eb006352fda4bc444fc1f776bfcd\",\"license\":\"MIT\"},\"contracts/lib/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nlibrary Math {\\n    function max(uint a, uint b) internal pure returns (uint) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function min(uint a, uint b) internal pure returns (uint) {\\n        return a < b ? a : b;\\n    }\\n\\n    function positiveInt128(int128 value) internal pure returns (int128) {\\n        return value < 0 ? int128(0) : value;\\n    }\\n\\n    function closeTo(\\n        uint a,\\n        uint b,\\n        uint target\\n    ) internal pure returns (bool) {\\n        if (a > b) {\\n            if (a - b <= target) {\\n                return true;\\n            }\\n        } else {\\n            if (b - a <= target) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8a50db5ef01ef869b1a7df3cf485d6c87473549c70fbefc54bdea34f8bc78538\",\"license\":\"MIT\"},\"contracts/lib/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../interface/IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint value\\n    ) internal {\\n        uint newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(\\n            data,\\n            \\\"SafeERC20: low-level call failed\\\"\\n        );\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(\\n                abi.decode(returndata, (bool)),\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd09403b2f52a045a82861c53059fb835daabe908fd774f948370979588b3fe1a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6469,
        "contract": "contracts/base/reward/BribeFactory.sol:BribeFactory",
        "label": "lastGauge",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}