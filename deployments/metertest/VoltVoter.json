{
  "address": "0xD87BCD2FF3d2E8D4c7e8B3C14d39591773dB4274",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ve",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gaugeFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bribeFactory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "weight",
          "type": "int256"
        }
      ],
      "name": "Abstained",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "gauge",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Attach",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lp",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "gauge",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "gauge",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Detach",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "gauge",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DistributeReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "gauge",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bribe",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "GaugeCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "reward",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "NotifyReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "weight",
          "type": "int256"
        }
      ],
      "name": "Voted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "whitelister",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "Whitelisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lp",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "gauge",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "attachTokenToGauge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bribeFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "bribes",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_bribes",
          "type": "address[]"
        },
        {
          "internalType": "address[][]",
          "name": "_tokens",
          "type": "address[][]"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "claimBribes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_bribes",
          "type": "address[]"
        },
        {
          "internalType": "address[][]",
          "name": "_tokens",
          "type": "address[][]"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "claimFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_gauges",
          "type": "address[]"
        },
        {
          "internalType": "address[][]",
          "name": "_tokens",
          "type": "address[][]"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "createGauge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "detachTokenFromGauge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        }
      ],
      "name": "distribute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributeAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_gauges",
          "type": "address[]"
        }
      ],
      "name": "distributeFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_gauges",
          "type": "address[]"
        }
      ],
      "name": "distributeForGauges",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "finish",
          "type": "uint256"
        }
      ],
      "name": "distributeForPoolsInRange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "emitDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "emitWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gaugeFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "gauges",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "index",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isGauge",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "listingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "notifyRewardAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "poke",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolForGauge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolVote",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gaugeOrBribe",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "registerRewardToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gaugeOrBribe",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "removeRewardToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "reset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "supplyIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_gauges",
          "type": "address[]"
        }
      ],
      "name": "updateFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "updateForRange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        }
      ],
      "name": "updateGauge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "usedWeights",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ve",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_poolVote",
          "type": "address[]"
        },
        {
          "internalType": "int256[]",
          "name": "_weights",
          "type": "int256[]"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "votes",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "weights",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "whitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9d3d85850f211ff40bc091d210f2e21c345e48658d895a1d275cd79f53a27e42",
  "receipt": {
    "to": null,
    "from": "0x1479F0954dF7c667b1817E4Eb3C0f4723eB054F5",
    "contractAddress": "0xD87BCD2FF3d2E8D4c7e8B3C14d39591773dB4274",
    "transactionIndex": 0,
    "gasUsed": "3976065",
    "logsBloom": "0x
    "blockHash": "0x011ec5eb785927c8bf28367cd3ec808c614f1056d480b5600aacc06fb7424aec",
    "transactionHash": "0x9d3d85850f211ff40bc091d210f2e21c345e48658d895a1d275cd79f53a27e42",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 18793963,
        "transactionHash": "0x9d3d85850f211ff40bc091d210f2e21c345e48658d895a1d275cd79f53a27e42",
        "address": "0xD87BCD2FF3d2E8D4c7e8B3C14d39591773dB4274",
        "topics": [
          "0xb35bf4274d4295009f1ec66ed3f579db287889444366c03d3a695539372e8951"
        ],
        "data": "0x0000000000000000000000001479f0954df7c667b1817e4eb3c0f4723eb054f5",
        "logIndex": 0,
        "blockHash": "0x011ec5eb785927c8bf28367cd3ec808c614f1056d480b5600aacc06fb7424aec"
      }
    ],
    "blockNumber": 18793963,
    "cumulativeGasUsed": "3976065",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xc397b6E1Ec697c6396D84c6a0c81313f65d9AA29",
    "0xc55542225EC26d02CF5637777e02c5F0D075935e",
    "0x7F33800c1b2e16361E4604CD626F0fa6bcDaBD09",
    "0xbc7C8C9829a385Ce5F984E7918af161C11884022"
  ],
  "numDeployments": 1,
  "solcInputHash": "f670656e97b2663e52c8e055a678a800",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ve\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gaugeFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bribeFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"weight\",\"type\":\"int256\"}],\"name\":\"Abstained\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Attach\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Detach\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DistributeReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bribe\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"GaugeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NotifyReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"weight\",\"type\":\"int256\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"whitelister\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"Whitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"attachTokenToGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bribeFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bribes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_bribes\",\"type\":\"address[]\"},{\"internalType\":\"address[][]\",\"name\":\"_tokens\",\"type\":\"address[][]\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"claimBribes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_bribes\",\"type\":\"address[]\"},{\"internalType\":\"address[][]\",\"name\":\"_tokens\",\"type\":\"address[][]\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"claimFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_gauges\",\"type\":\"address[]\"},{\"internalType\":\"address[][]\",\"name\":\"_tokens\",\"type\":\"address[][]\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"createGauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"detachTokenFromGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_gauges\",\"type\":\"address[]\"}],\"name\":\"distributeFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_gauges\",\"type\":\"address[]\"}],\"name\":\"distributeForGauges\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finish\",\"type\":\"uint256\"}],\"name\":\"distributeForPoolsInRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emitDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emitWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gaugeFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gauges\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"index\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isGauge\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"poke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolForGauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolVote\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gaugeOrBribe\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"registerRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gaugeOrBribe\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"removeRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"reset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supplyIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_gauges\",\"type\":\"address[]\"}],\"name\":\"updateFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"updateForRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"updateGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"usedWeights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_poolVote\",\"type\":\"address[]\"},{\"internalType\":\"int256[]\",\"name\":\"_weights\",\"type\":\"int256[]\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"weights\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"whitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"attachTokenToGauge(uint256,address)\":{\"details\":\"A gauge should be able to attach a token for preventing transfers/withdraws.\"},\"claimBribes(address[],address[][],uint256)\":{\"details\":\"Batch claim rewards from given bribe contracts for given tokenId.\"},\"claimFees(address[],address[][],uint256)\":{\"details\":\"Claim fees from given bribes.\"},\"claimRewards(address[],address[][])\":{\"details\":\"Batch claim rewards from given gauges.\"},\"createGauge(address)\":{\"details\":\"Create gauge for given pool. Only for a pool with whitelisted tokens.\"},\"detachTokenFromGauge(uint256,address)\":{\"details\":\"Detach given token.\"},\"distribute(address)\":{\"details\":\"Get emission from minter and notify rewards for given gauge.\"},\"distributeAll()\":{\"details\":\"Distribute rewards for all pools.\"},\"distributeFees(address[])\":{\"details\":\"Move fees from deposited pools to bribes for given gauges.\"},\"emitDeposit(uint256,address,uint256)\":{\"details\":\"Emit deposit event for easily handling external actions.\"},\"emitWithdraw(uint256,address,uint256)\":{\"details\":\"Emit withdraw event for easily handling external actions.\"},\"listingFee()\":{\"details\":\"Amount of tokens required to be hold for whitelisting.\"},\"notifyRewardAmount(uint256)\":{\"details\":\"Add rewards to this contract. Usually it is VoltMinter.\"},\"poke(uint256)\":{\"details\":\"Resubmit exist votes for given token. For internal purposes.\"},\"poolsLength()\":{\"details\":\"Length of pools\"},\"registerRewardToken(address,address,uint256)\":{\"details\":\"Add a token to a gauge/bribe as possible reward.\"},\"removeRewardToken(address,address,uint256)\":{\"details\":\"Remove a token from a gauge/bribe allowed rewards list.\"},\"reset(uint256)\":{\"details\":\"Remove all votes for given tokenId.\"},\"updateAll()\":{\"details\":\"Update all gauges.\"},\"updateFor(address[])\":{\"details\":\"Update given gauges.\"},\"updateForRange(uint256,uint256)\":{\"details\":\"Update gauges by indexes in a range.\"},\"updateGauge(address)\":{\"details\":\"Update reward info for given gauge.\"},\"vote(uint256,address[],int256[])\":{\"details\":\"Vote for given pools using a vote power of given tokenId. Reset previous votes.\"},\"whitelist(address,uint256)\":{\"details\":\"Add token to whitelist. Only pools with whitelisted tokens can be added to gauge.\"}},\"stateVariables\":{\"DURATION\":{\"details\":\"Rewards are released over 7 days\"},\"bribes\":{\"details\":\"gauge => bribe\"},\"factory\":{\"details\":\"VoltFactory\"},\"gauges\":{\"details\":\"pool => gauge\"},\"poolForGauge\":{\"details\":\"gauge => pool\"},\"poolVote\":{\"details\":\"nft => pools\"},\"pools\":{\"details\":\"All pools viable for incentives\"},\"totalWeight\":{\"details\":\"Total voting weight\"},\"usedWeights\":{\"details\":\"nft => total voting weight of user\"},\"ve\":{\"details\":\"The ve token that governs these contracts\"},\"votes\":{\"details\":\"nft => pool => votes\"},\"weights\":{\"details\":\"pool => weight\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/base/vote/VoltVoter.sol\":\"VoltVoter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/base/Reentrancy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nabstract contract Reentrancy {\\n    /// @dev simple re-entrancy check\\n    uint internal _unlocked = 1;\\n\\n    modifier lock() {\\n        require(_unlocked == 1, \\\"Reentrant call\\\");\\n        _unlocked = 2;\\n        _;\\n        _unlocked = 1;\\n    }\\n}\\n\",\"keccak256\":\"0x59c07b769bd280322dea57c93ed20b3e6e1fe1018ab9937b0dfcaddcfb5f2780\",\"license\":\"MIT\"},\"contracts/base/vote/VoltVoter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../../interface/IVe.sol\\\";\\nimport \\\"../../interface/IVoter.sol\\\";\\nimport \\\"../../interface/IERC20.sol\\\";\\nimport \\\"../../interface/IERC721.sol\\\";\\nimport \\\"../../interface/IGauge.sol\\\";\\nimport \\\"../../interface/IFactory.sol\\\";\\nimport \\\"../../interface/IPair.sol\\\";\\nimport \\\"../../interface/IBribeFactory.sol\\\";\\nimport \\\"../../interface/IGaugeFactory.sol\\\";\\nimport \\\"../../interface/IMinter.sol\\\";\\nimport \\\"../../interface/IBribe.sol\\\";\\nimport \\\"../../interface/IMultiRewardsPool.sol\\\";\\nimport \\\"../Reentrancy.sol\\\";\\nimport \\\"../../lib/SafeERC20.sol\\\";\\n\\ncontract VoltVoter is IVoter, Reentrancy {\\n    using SafeERC20 for IERC20;\\n\\n    /// @dev The ve token that governs these contracts\\n    address public immutable override ve;\\n    /// @dev VoltFactory\\n    address public immutable factory;\\n    address public immutable token;\\n    address public immutable gaugeFactory;\\n    address public immutable bribeFactory;\\n    /// @dev Rewards are released over 7 days\\n    uint internal constant DURATION = 7 days;\\n    address public minter;\\n\\n    /// @dev Total voting weight\\n    uint public totalWeight;\\n\\n    /// @dev All pools viable for incentives\\n    address[] public pools;\\n    /// @dev pool => gauge\\n    mapping(address => address) public gauges;\\n    /// @dev gauge => pool\\n    mapping(address => address) public poolForGauge;\\n    /// @dev gauge => bribe\\n    mapping(address => address) public bribes;\\n    /// @dev pool => weight\\n    mapping(address => int256) public weights;\\n    /// @dev nft => pool => votes\\n    mapping(uint => mapping(address => int256)) public votes;\\n    /// @dev nft => pools\\n    mapping(uint => address[]) public poolVote;\\n    /// @dev nft => total voting weight of user\\n    mapping(uint => uint) public usedWeights;\\n    mapping(address => bool) public isGauge;\\n    mapping(address => bool) public isWhitelisted;\\n\\n    uint public index;\\n    mapping(address => uint) public supplyIndex;\\n    mapping(address => uint) public claimable;\\n\\n    event GaugeCreated(\\n        address indexed gauge,\\n        address creator,\\n        address indexed bribe,\\n        address indexed pool\\n    );\\n    event Voted(address indexed voter, uint tokenId, int256 weight);\\n    event Abstained(uint tokenId, int256 weight);\\n    event Deposit(\\n        address indexed lp,\\n        address indexed gauge,\\n        uint tokenId,\\n        uint amount\\n    );\\n    event Withdraw(\\n        address indexed lp,\\n        address indexed gauge,\\n        uint tokenId,\\n        uint amount\\n    );\\n    event NotifyReward(\\n        address indexed sender,\\n        address indexed reward,\\n        uint amount\\n    );\\n    event DistributeReward(\\n        address indexed sender,\\n        address indexed gauge,\\n        uint amount\\n    );\\n    event Attach(address indexed owner, address indexed gauge, uint tokenId);\\n    event Detach(address indexed owner, address indexed gauge, uint tokenId);\\n    event Whitelisted(address indexed whitelister, address indexed token);\\n\\n    constructor(\\n        address _ve,\\n        address _factory,\\n        address _gaugeFactory,\\n        address _bribeFactory\\n    ) {\\n        ve = _ve;\\n        factory = _factory;\\n        token = IVe(_ve).token();\\n        gaugeFactory = _gaugeFactory;\\n        bribeFactory = _bribeFactory;\\n        minter = msg.sender;\\n    }\\n\\n    function initialize(address[] memory _tokens, address _minter) external {\\n        require(msg.sender == minter, \\\"!minter\\\");\\n        for (uint i = 0; i < _tokens.length; i++) {\\n            _whitelist(_tokens[i]);\\n        }\\n        minter = _minter;\\n    }\\n\\n    /// @dev Amount of tokens required to be hold for whitelisting.\\n    function listingFee() external view returns (uint) {\\n        return _listingFee();\\n    }\\n\\n    /// @dev 20% of circulation supply.\\n    function _listingFee() internal view returns (uint) {\\n        return (IERC20(token).totalSupply() - IERC20(ve).totalSupply()) / 5;\\n    }\\n\\n    /// @dev Remove all votes for given tokenId.\\n    function reset(uint _tokenId) external {\\n        require(IVe(ve).isApprovedOrOwner(msg.sender, _tokenId), \\\"!owner\\\");\\n        _reset(_tokenId);\\n        IVe(ve).abstain(_tokenId);\\n    }\\n\\n    function _reset(uint _tokenId) internal {\\n        address[] storage _poolVote = poolVote[_tokenId];\\n        uint _poolVoteCnt = _poolVote.length;\\n        int256 _totalWeight = 0;\\n\\n        for (uint i = 0; i < _poolVoteCnt; i++) {\\n            address _pool = _poolVote[i];\\n            int256 _votes = votes[_tokenId][_pool];\\n            _updateFor(gauges[_pool]);\\n            weights[_pool] -= _votes;\\n            votes[_tokenId][_pool] -= _votes;\\n            if (_votes > 0) {\\n                IBribe(bribes[gauges[_pool]])._withdraw(uint(_votes), _tokenId);\\n                _totalWeight += _votes;\\n            } else {\\n                _totalWeight -= _votes;\\n            }\\n            emit Abstained(_tokenId, _votes);\\n        }\\n        totalWeight -= uint(_totalWeight);\\n        usedWeights[_tokenId] = 0;\\n        delete poolVote[_tokenId];\\n    }\\n\\n    /// @dev Resubmit exist votes for given token. For internal purposes.\\n    function poke(uint _tokenId) external {\\n        address[] memory _poolVote = poolVote[_tokenId];\\n        uint _poolCnt = _poolVote.length;\\n        int256[] memory _weights = new int256[](_poolCnt);\\n\\n        for (uint i = 0; i < _poolCnt; i++) {\\n            _weights[i] = votes[_tokenId][_poolVote[i]];\\n        }\\n\\n        _vote(_tokenId, _poolVote, _weights);\\n    }\\n\\n    function _vote(\\n        uint _tokenId,\\n        address[] memory _poolVote,\\n        int256[] memory _weights\\n    ) internal {\\n        _reset(_tokenId);\\n        uint _poolCnt = _poolVote.length;\\n        int256 _weight = int256(IVe(ve).balanceOfNFT(_tokenId));\\n        int256 _totalVoteWeight = 0;\\n        int256 _totalWeight = 0;\\n        int256 _usedWeight = 0;\\n\\n        for (uint i = 0; i < _poolCnt; i++) {\\n            _totalVoteWeight += _weights[i] > 0 ? _weights[i] : -_weights[i];\\n        }\\n\\n        for (uint i = 0; i < _poolCnt; i++) {\\n            address _pool = _poolVote[i];\\n            address _gauge = gauges[_pool];\\n\\n            int256 _poolWeight = (_weights[i] * _weight) / _totalVoteWeight;\\n            require(votes[_tokenId][_pool] == 0, \\\"duplicate pool\\\");\\n            require(_poolWeight != 0, \\\"zero power\\\");\\n            _updateFor(_gauge);\\n\\n            poolVote[_tokenId].push(_pool);\\n\\n            weights[_pool] += _poolWeight;\\n            votes[_tokenId][_pool] += _poolWeight;\\n            if (_poolWeight > 0) {\\n                IBribe(bribes[_gauge])._deposit(uint(_poolWeight), _tokenId);\\n            } else {\\n                _poolWeight = -_poolWeight;\\n            }\\n            _usedWeight += _poolWeight;\\n            _totalWeight += _poolWeight;\\n            emit Voted(msg.sender, _tokenId, _poolWeight);\\n        }\\n        if (_usedWeight > 0) IVe(ve).voting(_tokenId);\\n        totalWeight += uint(_totalWeight);\\n        usedWeights[_tokenId] = uint(_usedWeight);\\n    }\\n\\n    /// @dev Vote for given pools using a vote power of given tokenId. Reset previous votes.\\n    function vote(\\n        uint tokenId,\\n        address[] calldata _poolVote,\\n        int256[] calldata _weights\\n    ) external {\\n        require(IVe(ve).isApprovedOrOwner(msg.sender, tokenId), \\\"!owner\\\");\\n        require(_poolVote.length == _weights.length, \\\"!arrays\\\");\\n        _vote(tokenId, _poolVote, _weights);\\n    }\\n\\n    /// @dev Add token to whitelist. Only pools with whitelisted tokens can be added to gauge.\\n    function whitelist(address _token, uint _tokenId) external {\\n        require(_tokenId > 0, \\\"!token\\\");\\n        require(msg.sender == IERC721(ve).ownerOf(_tokenId), \\\"!owner\\\");\\n        require(IVe(ve).balanceOfNFT(_tokenId) > _listingFee(), \\\"!power\\\");\\n        _whitelist(_token);\\n    }\\n\\n    function _whitelist(address _token) internal {\\n        require(!isWhitelisted[_token], \\\"already whitelisted\\\");\\n        isWhitelisted[_token] = true;\\n        emit Whitelisted(msg.sender, _token);\\n    }\\n\\n    /// @dev Add a token to a gauge/bribe as possible reward.\\n    function registerRewardToken(\\n        address _token,\\n        address _gaugeOrBribe,\\n        uint _tokenId\\n    ) external {\\n        require(_tokenId > 0, \\\"!token\\\");\\n        require(msg.sender == IERC721(ve).ownerOf(_tokenId), \\\"!owner\\\");\\n        require(IVe(ve).balanceOfNFT(_tokenId) > _listingFee(), \\\"!power\\\");\\n        IMultiRewardsPool(_gaugeOrBribe).registerRewardToken(_token);\\n    }\\n\\n    /// @dev Remove a token from a gauge/bribe allowed rewards list.\\n    function removeRewardToken(\\n        address _token,\\n        address _gaugeOrBribe,\\n        uint _tokenId\\n    ) external {\\n        require(_tokenId > 0, \\\"!token\\\");\\n        require(msg.sender == IERC721(ve).ownerOf(_tokenId), \\\"!owner\\\");\\n        require(IVe(ve).balanceOfNFT(_tokenId) > _listingFee(), \\\"!power\\\");\\n        IMultiRewardsPool(_gaugeOrBribe).removeRewardToken(_token);\\n    }\\n\\n    /// @dev Create gauge for given pool. Only for a pool with whitelisted tokens.\\n    function createGauge(address _pool) external returns (address) {\\n        require(gauges[_pool] == address(0x0), \\\"exists\\\");\\n        require(IFactory(factory).isPair(_pool), \\\"!pool\\\");\\n        (address tokenA, address tokenB) = IPair(_pool).tokens();\\n        require(isWhitelisted[tokenA] && isWhitelisted[tokenB], \\\"!whitelisted\\\");\\n\\n        address[] memory allowedRewards = new address[](3);\\n        allowedRewards[0] = tokenA;\\n        allowedRewards[1] = tokenB;\\n        if (token != tokenA && token != tokenB) {\\n            allowedRewards[2] = token;\\n        }\\n\\n        address _bribe = IBribeFactory(bribeFactory).createBribe(\\n            allowedRewards\\n        );\\n        address _gauge = IGaugeFactory(gaugeFactory).createGauge(\\n            _pool,\\n            _bribe,\\n            ve,\\n            allowedRewards\\n        );\\n        IERC20(token).safeIncreaseAllowance(_gauge, type(uint).max);\\n        bribes[_gauge] = _bribe;\\n        gauges[_pool] = _gauge;\\n        poolForGauge[_gauge] = _pool;\\n        isGauge[_gauge] = true;\\n        _updateFor(_gauge);\\n        pools.push(_pool);\\n        emit GaugeCreated(_gauge, msg.sender, _bribe, _pool);\\n        return _gauge;\\n    }\\n\\n    /// @dev A gauge should be able to attach a token for preventing transfers/withdraws.\\n    function attachTokenToGauge(uint tokenId, address account)\\n        external\\n        override\\n    {\\n        require(isGauge[msg.sender], \\\"!gauge\\\");\\n        if (tokenId > 0) {\\n            IVe(ve).attachToken(tokenId);\\n        }\\n        emit Attach(account, msg.sender, tokenId);\\n    }\\n\\n    /// @dev Emit deposit event for easily handling external actions.\\n    function emitDeposit(\\n        uint tokenId,\\n        address account,\\n        uint amount\\n    ) external override {\\n        require(isGauge[msg.sender], \\\"!gauge\\\");\\n        emit Deposit(account, msg.sender, tokenId, amount);\\n    }\\n\\n    /// @dev Detach given token.\\n    function detachTokenFromGauge(uint tokenId, address account)\\n        external\\n        override\\n    {\\n        require(isGauge[msg.sender], \\\"!gauge\\\");\\n        if (tokenId > 0) {\\n            IVe(ve).detachToken(tokenId);\\n        }\\n        emit Detach(account, msg.sender, tokenId);\\n    }\\n\\n    /// @dev Emit withdraw event for easily handling external actions.\\n    function emitWithdraw(\\n        uint tokenId,\\n        address account,\\n        uint amount\\n    ) external override {\\n        require(isGauge[msg.sender], \\\"!gauge\\\");\\n        emit Withdraw(account, msg.sender, tokenId, amount);\\n    }\\n\\n    /// @dev Length of pools\\n    function poolsLength() external view returns (uint) {\\n        return pools.length;\\n    }\\n\\n    /// @dev Add rewards to this contract. Usually it is VoltMinter.\\n    function notifyRewardAmount(uint amount) external override {\\n        require(amount != 0, \\\"zero amount\\\");\\n        uint _totalWeight = totalWeight;\\n        // without votes rewards can not be added\\n        require(_totalWeight != 0, \\\"!weights\\\");\\n        // transfer the distro in\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\n        // 1e18 adjustment is removed during claim\\n        uint _ratio = (amount * 1e18) / _totalWeight;\\n        if (_ratio > 0) {\\n            index += _ratio;\\n        }\\n        emit NotifyReward(msg.sender, token, amount);\\n    }\\n\\n    /// @dev Update given gauges.\\n    function updateFor(address[] memory _gauges) external {\\n        for (uint i = 0; i < _gauges.length; i++) {\\n            _updateFor(_gauges[i]);\\n        }\\n    }\\n\\n    /// @dev Update gauges by indexes in a range.\\n    function updateForRange(uint start, uint end) public {\\n        for (uint i = start; i < end; i++) {\\n            _updateFor(gauges[pools[i]]);\\n        }\\n    }\\n\\n    /// @dev Update all gauges.\\n    function updateAll() external {\\n        updateForRange(0, pools.length);\\n    }\\n\\n    /// @dev Update reward info for given gauge.\\n    function updateGauge(address _gauge) external {\\n        _updateFor(_gauge);\\n    }\\n\\n    function _updateFor(address _gauge) internal {\\n        address _pool = poolForGauge[_gauge];\\n        int256 _supplied = weights[_pool];\\n        if (_supplied > 0) {\\n            uint _supplyIndex = supplyIndex[_gauge];\\n            // get global index for accumulated distro\\n            uint _index = index;\\n            // update _gauge current position to global position\\n            supplyIndex[_gauge] = _index;\\n            // see if there is any difference that need to be accrued\\n            uint _delta = _index - _supplyIndex;\\n            if (_delta > 0) {\\n                // add accrued difference for each supplied token\\n                uint _share = (uint(_supplied) * _delta) / 1e18;\\n                claimable[_gauge] += _share;\\n            }\\n        } else {\\n            // new users are set to the default global state\\n            supplyIndex[_gauge] = index;\\n        }\\n    }\\n\\n    /// @dev Batch claim rewards from given gauges.\\n    function claimRewards(address[] memory _gauges, address[][] memory _tokens)\\n        external\\n    {\\n        for (uint i = 0; i < _gauges.length; i++) {\\n            IGauge(_gauges[i]).getReward(msg.sender, _tokens[i]);\\n        }\\n    }\\n\\n    /// @dev Batch claim rewards from given bribe contracts for given tokenId.\\n    function claimBribes(\\n        address[] memory _bribes,\\n        address[][] memory _tokens,\\n        uint _tokenId\\n    ) external {\\n        require(IVe(ve).isApprovedOrOwner(msg.sender, _tokenId), \\\"!owner\\\");\\n        for (uint i = 0; i < _bribes.length; i++) {\\n            IBribe(_bribes[i]).getRewardForOwner(_tokenId, _tokens[i]);\\n        }\\n    }\\n\\n    /// @dev Claim fees from given bribes.\\n    function claimFees(\\n        address[] memory _bribes,\\n        address[][] memory _tokens,\\n        uint _tokenId\\n    ) external {\\n        require(IVe(ve).isApprovedOrOwner(msg.sender, _tokenId), \\\"!owner\\\");\\n        for (uint i = 0; i < _bribes.length; i++) {\\n            IBribe(_bribes[i]).getRewardForOwner(_tokenId, _tokens[i]);\\n        }\\n    }\\n\\n    /// @dev Move fees from deposited pools to bribes for given gauges.\\n    function distributeFees(address[] memory _gauges) external {\\n        for (uint i = 0; i < _gauges.length; i++) {\\n            IGauge(_gauges[i]).claimFees();\\n        }\\n    }\\n\\n    /// @dev Get emission from minter and notify rewards for given gauge.\\n    function distribute(address _gauge) external override {\\n        _distribute(_gauge);\\n    }\\n\\n    function _distribute(address _gauge) internal lock {\\n        IMinter(minter).updatePeriod();\\n        _updateFor(_gauge);\\n        uint _claimable = claimable[_gauge];\\n        if (\\n            _claimable > IMultiRewardsPool(_gauge).left(token) &&\\n            _claimable / DURATION > 0\\n        ) {\\n            claimable[_gauge] = 0;\\n            IGauge(_gauge).notifyRewardAmount(token, _claimable);\\n            emit DistributeReward(msg.sender, _gauge, _claimable);\\n        }\\n    }\\n\\n    /// @dev Distribute rewards for all pools.\\n    function distributeAll() external {\\n        uint length = pools.length;\\n        for (uint x; x < length; x++) {\\n            _distribute(gauges[pools[x]]);\\n        }\\n    }\\n\\n    function distributeForPoolsInRange(uint start, uint finish) external {\\n        for (uint x = start; x < finish; x++) {\\n            _distribute(gauges[pools[x]]);\\n        }\\n    }\\n\\n    function distributeForGauges(address[] memory _gauges) external {\\n        for (uint x = 0; x < _gauges.length; x++) {\\n            _distribute(_gauges[x]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc9c1b54f821b2b6fb609bcbb74781b7b8bf1f07859cb71d3ce0118a0e1f76943\",\"license\":\"MIT\"},\"contracts/interface/IBribe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IBribe {\\n    function notifyRewardAmount(address token, uint amount) external;\\n\\n    function _deposit(uint amount, uint tokenId) external;\\n\\n    function _withdraw(uint amount, uint tokenId) external;\\n\\n    function getRewardForOwner(uint tokenId, address[] memory tokens) external;\\n}\\n\",\"keccak256\":\"0xcf242dd62b6301060e132cc868d817cced4bb4bd21c69e4079cba92e30d333f1\",\"license\":\"MIT\"},\"contracts/interface/IBribeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IBribeFactory {\\n    function createBribe(address[] memory _allowedRewardTokens)\\n        external\\n        returns (address);\\n}\\n\",\"keccak256\":\"0x1f360e0ae33b8d5dd8c6a68c0fa2f4fe604c6a91dc143b1e966950a139edc7d8\",\"license\":\"MIT\"},\"contracts/interface/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8609505e815e06dac85e0cc77ad7bbb641ceec24e5c8e012483e8576dd09ce09\",\"license\":\"MIT\"},\"contracts/interface/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0x224e032b714ae191e5e419054a144402b01597e8b2eb36db4f6e38d3e42b0db7\",\"license\":\"MIT\"},\"contracts/interface/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed approved,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId)\\n        external\\n        view\\n        returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6983264dae1151fd2451f1cb2e4cb9a369f6dd25577600d1733fe6e4da0dc35d\",\"license\":\"MIT\"},\"contracts/interface/IFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IFactory {\\n    function treasury() external view returns (address);\\n\\n    function isPair(address pair) external view returns (bool);\\n\\n    function getInitializable()\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            bool\\n        );\\n\\n    function isPaused() external view returns (bool);\\n\\n    function pairCodeHash() external pure returns (bytes32);\\n\\n    function getPair(\\n        address tokenA,\\n        address token,\\n        bool stable\\n    ) external view returns (address);\\n\\n    function createPair(\\n        address tokenA,\\n        address tokenB,\\n        bool stable\\n    ) external returns (address pair);\\n}\\n\",\"keccak256\":\"0x22270dbb92d05a3dae6d38084db2ce1db27dee00af111b6502c34efe7106508b\",\"license\":\"MIT\"},\"contracts/interface/IGauge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IGauge {\\n    function notifyRewardAmount(address token, uint amount) external;\\n\\n    function getReward(address account, address[] memory tokens) external;\\n\\n    function claimFees() external returns (uint claimed0, uint claimed1);\\n}\\n\",\"keccak256\":\"0x182048b6ade43597025a2cbfc86979dcaed29d83abfaa48815efda839c7d6d33\",\"license\":\"MIT\"},\"contracts/interface/IGaugeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IGaugeFactory {\\n    function createGauge(\\n        address _pool,\\n        address _bribe,\\n        address _ve,\\n        address[] memory _allowedRewardTokens\\n    ) external returns (address);\\n\\n    function createGaugeSingle(\\n        address _pool,\\n        address _bribe,\\n        address _ve,\\n        address _voter,\\n        address[] memory _allowedRewardTokens\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0xbd8b9b1868d559e68e5c28894a7ab46434cbcfbc712713bd6ff6315243af0871\",\"license\":\"MIT\"},\"contracts/interface/IMinter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IMinter {\\n    function updatePeriod() external returns (uint);\\n}\\n\",\"keccak256\":\"0x9a1754a722d904de8ebd0d66d74707c0b5b8ebd56268fd1e7b247ab621d7c58d\",\"license\":\"MIT\"},\"contracts/interface/IMultiRewardsPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IMultiRewardsPool {\\n    function underlying() external view returns (address);\\n\\n    function derivedSupply() external view returns (uint);\\n\\n    function derivedBalances(address account) external view returns (uint);\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function balanceOf(address account) external view returns (uint);\\n\\n    function rewardTokens(uint id) external view returns (address);\\n\\n    function isRewardToken(address token) external view returns (bool);\\n\\n    function rewardTokensLength() external view returns (uint);\\n\\n    function derivedBalance(address account) external view returns (uint);\\n\\n    function left(address token) external view returns (uint);\\n\\n    function earned(address token, address account)\\n        external\\n        view\\n        returns (uint);\\n\\n    function registerRewardToken(address token) external;\\n\\n    function removeRewardToken(address token) external;\\n}\\n\",\"keccak256\":\"0x2fff1488dc483fe0c9ccc3642c522c94868e96d9173304f8fe404d91ad3c4f21\",\"license\":\"MIT\"},\"contracts/interface/IPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IPair {\\n    // Structure to capture time period obervations every 30 minutes, used for local oracles\\n    struct Observation {\\n        uint timestamp;\\n        uint reserve0Cumulative;\\n        uint reserve1Cumulative;\\n    }\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint value,\\n        uint deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function swap(\\n        uint amount0Out,\\n        uint amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n\\n    function mint(address to) external returns (uint liquidity);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 _reserve0,\\n            uint112 _reserve1,\\n            uint32 _blockTimestampLast\\n        );\\n\\n    function getAmountOut(uint, address) external view returns (uint);\\n\\n    function claimFees() external returns (uint, uint);\\n\\n    function tokens() external view returns (address, address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function stable() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xcb4617d9553f692bbe3b8236caa90ba85e1fad1553ae2bc356f637dbc9c79a4b\",\"license\":\"MIT\"},\"contracts/interface/IVe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IVe {\\n    enum DepositType {\\n        DEPOSIT_FOR_TYPE,\\n        CREATE_LOCK_TYPE,\\n        INCREASE_LOCK_AMOUNT,\\n        INCREASE_UNLOCK_TIME,\\n        MERGE_TYPE\\n    }\\n\\n    struct Point {\\n        int128 bias;\\n        int128 slope; // # -dweight / dt\\n        uint ts;\\n        uint blk; // block\\n    }\\n    /* We cannot really do block numbers per se b/c slope is per time, not per block\\n     * and per block could be fairly bad b/c Ethereum changes blocktimes.\\n     * What we can do is to extrapolate ***At functions */\\n\\n    struct LockedBalance {\\n        int128 amount;\\n        uint end;\\n    }\\n\\n    function token() external view returns (address);\\n\\n    function balanceOfNFT(uint) external view returns (uint);\\n\\n    function isApprovedOrOwner(address, uint) external view returns (bool);\\n\\n    function createLockFor(\\n        uint,\\n        uint,\\n        address\\n    ) external returns (uint);\\n\\n    function userPointEpoch(uint tokenId) external view returns (uint);\\n\\n    function epoch() external view returns (uint);\\n\\n    function userPointHistory(uint tokenId, uint loc)\\n        external\\n        view\\n        returns (Point memory);\\n\\n    function pointHistory(uint loc) external view returns (Point memory);\\n\\n    function checkpoint() external;\\n\\n    function depositFor(uint tokenId, uint value) external;\\n\\n    function attachToken(uint tokenId) external;\\n\\n    function detachToken(uint tokenId) external;\\n\\n    function voting(uint tokenId) external;\\n\\n    function abstain(uint tokenId) external;\\n}\\n\",\"keccak256\":\"0x93a173b039792ac393165aab7a92882d0cc1d82257c4dfe13ee26631fe46e52a\",\"license\":\"MIT\"},\"contracts/interface/IVoter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IVoter {\\n    function ve() external view returns (address);\\n\\n    function attachTokenToGauge(uint _tokenId, address account) external;\\n\\n    function detachTokenFromGauge(uint _tokenId, address account) external;\\n\\n    function emitDeposit(\\n        uint _tokenId,\\n        address account,\\n        uint amount\\n    ) external;\\n\\n    function emitWithdraw(\\n        uint _tokenId,\\n        address account,\\n        uint amount\\n    ) external;\\n\\n    function distribute(address _gauge) external;\\n\\n    function notifyRewardAmount(uint amount) external;\\n}\\n\",\"keccak256\":\"0x3585c496f0f5c40e7146bd9878293c200d38948fa20e162c1f7f48b7d475338b\",\"license\":\"MIT\"},\"contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n        (bool success, bytes memory returndata) = target.call(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x798cd9aeb57ae229f05b694ccfb44ea291726b42c0ef5da99de61785ebbc32a8\",\"license\":\"MIT\"},\"contracts/lib/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../interface/IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint value\\n    ) internal {\\n        uint newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(\\n            data,\\n            \\\"SafeERC20: low-level call failed\\\"\\n        );\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(\\n                abi.decode(returndata, (bool)),\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd09403b2f52a045a82861c53059fb835daabe908fd774f948370979588b3fe1a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61012060405260016000553480156200001757600080fd5b5060405162003bbc38038062003bbc8339810160408190526200003a9162000102565b6001600160a01b03808516608081905290841660a05260408051637e062a3560e11b8152905163fc0c546a916004808201926020929091908290030181865afa1580156200008c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000b291906200015f565b6001600160a01b0390811660c05291821660e05216610100525050600180546001600160a01b0319163317905562000184565b80516001600160a01b0381168114620000fd57600080fd5b919050565b600080600080608085870312156200011957600080fd5b6200012485620000e5565b93506200013460208601620000e5565b92506200014460408601620000e5565b91506200015460608601620000e5565b905092959194509250565b6000602082840312156200017257600080fd5b6200017d82620000e5565b9392505050565b60805160a05160c05160e0516101005161392862000294600039600081816106c601526119410152600081816102f801526119bf0152600081816106ed01528181610b3001528181610ba701528181611869015281816118a2015281816118d401528181611a81015281816121d8015281816122940152612b8a015260008181610608015261166301526000818161031f01528181610838015281816108ef01528181610c4801528181610e3a01528181610efb0152818161105b015281816111e5015281816112bb01528181611431015281816114f2015281816119f001528181611d9d01528181611e5e01528181611faa0152818161257b015281816129540152612b0801526139286000f3fe608060405234801561001057600080fd5b50600436106102955760003560e01c80636ecbe38a11610167578063ac4afa38116100ce578063ddbe883c11610087578063ddbe883c1461067b578063e380fcad1461068e578063ea94ee44146106ae578063eb4a78e0146106c1578063fc0c546a146106e8578063fecdad601461070f57600080fd5b8063ac4afa38146105c7578063b9a09fd5146105da578063c45a015514610603578063c527ee1f1461062a578063d23254b41461063d578063d560b0d71461066857600080fd5b8063a5f4301e11610120578063a5f4301e14610522578063a61c713a14610535578063a7cac84614610548578063a86a366d14610568578063a8c5d95a1461057b578063aa79979b146105a457600080fd5b80636ecbe38a146104ad5780637715ee75146104c057806379e93824146104d357806396c82e57146104f357806398fc55d8146104fc5780639b6a9d721461050f57600080fd5b80633c6b16ab1161020b57806353d78693116101c457806353d786931461045157806353f38e6b1461045957806363453ae11461046c578063666256aa1461047f578063698473e3146104925780636a1b7ecc146104a557600080fd5b80633c6b16ab146103dd578063402914f5146103f0578063411b1f7714610410578063436596c414610423578063462d0b2e1461042b5780634c6e62b61461043e57600080fd5b806320b1cb6f1161025d57806320b1cb6f146103565780632716ae66146103695780632986c0e51461037b578063310bd74b1461038457806332145f90146103975780633af32abf146103aa57600080fd5b806306d6a1b21461029a57806307546172146102e05780630d52333c146102f35780631f8507161461031a5780632025e9b814610341575b600080fd5b6102c36102a8366004612fd8565b6005602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6001546102c3906001600160a01b031681565b6102c37f000000000000000000000000000000000000000000000000000000000000000081565b6102c37f000000000000000000000000000000000000000000000000000000000000000081565b61035461034f3660046130d4565b610722565b005b610354610364366004613191565b610766565b6003545b6040519081526020016102d7565b61036d600d5481565b6103546103923660046131f5565b61081c565b6103546103a53660046131f5565b610956565b6103cd6103b8366004612fd8565b600c6020526000908152604090205460ff1681565b60405190151581526020016102d7565b6103546103eb3660046131f5565b610aa6565b61036d6103fe366004612fd8565b600f6020526000908152604090205481565b61035461041e36600461320e565b610bfd565b610354610cf2565b61035461043936600461323e565b610d5c565b61035461044c366004613285565b610e04565b610354610fec565b6103546104673660046132c6565b610ffd565b61035461047a366004612fd8565b611033565b61035461048d3660046132e8565b61103f565b6103546104a036600461320e565b61119b565b61036d611287565b6103546104bb366004612fd8565b611296565b6103546104ce3660046132e8565b61129f565b61036d6104e13660046131f5565b600a6020526000908152604090205481565b61036d60025481565b61035461050a366004613355565b6113fb565b61035461051d3660046132c6565b61158b565b6102c3610530366004612fd8565b6115f1565b610354610543366004613381565b611bb6565b61036d610556366004612fd8565b60076020526000908152604090205481565b6102c36105763660046132c6565b611c28565b6102c3610589366004612fd8565b6006602052600090815260409020546001600160a01b031681565b6103cd6105b2366004612fd8565b600b6020526000908152604090205460ff1681565b6102c36105d53660046131f5565b611c60565b6102c36105e8366004612fd8565b6004602052600090815260409020546001600160a01b031681565b6102c37f000000000000000000000000000000000000000000000000000000000000000081565b6103546106383660046130d4565b611c8a565b61036d61064b36600461320e565b600860209081526000928352604080842090915290825290205481565b6103546106763660046130d4565b611d27565b610354610689366004613285565b611d67565b61036d61069c366004612fd8565b600e6020526000908152604090205481565b6103546106bc366004613381565b611f1c565b6102c37f000000000000000000000000000000000000000000000000000000000000000081565b6102c37f000000000000000000000000000000000000000000000000000000000000000081565b61035461071d3660046133f4565b611f8e565b60005b8151811015610762576107508282815181106107435761074361346e565b60200260200101516120e0565b8061075a8161349a565b915050610725565b5050565b60005b8251811015610817578281815181106107845761078461346e565b60200260200101516001600160a01b03166331279d3d338484815181106107ad576107ad61346e565b60200260200101516040518363ffffffff1660e01b81526004016107d29291906134f7565b600060405180830381600087803b1580156107ec57600080fd5b505af1158015610800573d6000803e3d6000fd5b50505050808061080f9061349a565b915050610769565b505050565b60405163430c208160e01b8152336004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063430c208190604401602060405180830381865afa158015610887573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ab919061351b565b6108d05760405162461bcd60e51b81526004016108c79061353d565b60405180910390fd5b6108d981612348565b60405163c1f0fb9f60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c1f0fb9f90602401600060405180830381600087803b15801561093b57600080fd5b505af115801561094f573d6000803e3d6000fd5b5050505050565b6000818152600960209081526040808320805482518185028101850190935280835291929091908301828280156109b657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610998575b5050505050905060008151905060008167ffffffffffffffff8111156109de576109de612ff5565b604051908082528060200260200182016040528015610a07578160200160208202803683370190505b50905060005b82811015610a9457600860008681526020019081526020016000206000858381518110610a3c57610a3c61346e565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054828281518110610a7757610a7761346e565b602090810291909101015280610a8c8161349a565b915050610a0d565b50610aa0848483612557565b50505050565b80600003610ae45760405162461bcd60e51b815260206004820152600b60248201526a1e995c9bc8185b5bdd5b9d60aa1b60448201526064016108c7565b6002546000819003610b235760405162461bcd60e51b8152602060048201526008602482015267217765696768747360c01b60448201526064016108c7565b610b586001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163330856129eb565b600081610b6d84670de0b6b3a764000061355d565b610b779190613592565b90508015610b975780600d6000828254610b9191906135a6565b90915550505b6040518381526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169033907ff70d5c697de7ea828df48e5c4573cb2194c659f1901f70110c52b066dcf50826906020015b60405180910390a3505050565b336000908152600b602052604090205460ff16610c2c5760405162461bcd60e51b81526004016108c7906135be565b8115610cad57604051634c3c15a760e11b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906398782b4e90602401600060405180830381600087803b158015610c9457600080fd5b505af1158015610ca8573d6000803e3d6000fd5b505050505b60405182815233906001600160a01b038316907fae268d9aab12f3605f58efd74fd3801fa812b03fdb44317eb70f46dff0e19e22906020015b60405180910390a35050565b60035460005b8181101561076257610d4a6004600060038481548110610d1a57610d1a61346e565b60009182526020808320909101546001600160a01b039081168452908301939093526040909101902054166120e0565b80610d548161349a565b915050610cf8565b6001546001600160a01b03163314610da05760405162461bcd60e51b815260206004820152600760248201526610b6b4b73a32b960c91b60448201526064016108c7565b60005b8251811015610de057610dce838281518110610dc157610dc161346e565b6020026020010151612a56565b80610dd88161349a565b915050610da3565b50600180546001600160a01b0319166001600160a01b039290921691909117905550565b60008111610e245760405162461bcd60e51b81526004016108c7906135de565b6040516331a9108f60e11b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636352211e90602401602060405180830381865afa158015610e89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ead91906135fe565b6001600160a01b0316336001600160a01b031614610edd5760405162461bcd60e51b81526004016108c79061353d565b610ee5612b02565b6040516339f890b560e21b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e7e242d490602401602060405180830381865afa158015610f4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6e919061361b565b11610f8b5760405162461bcd60e51b81526004016108c790613634565b604051631c8db79360e31b81526001600160a01b03848116600483015283169063e46dbc98906024015b600060405180830381600087803b158015610fcf57600080fd5b505af1158015610fe3573d6000803e3d6000fd5b50505050505050565b600354610ffb9060009061158b565b565b815b81811015610817576110216004600060038481548110610d1a57610d1a61346e565b8061102b8161349a565b915050610fff565b61103c816120e0565b50565b60405163430c208160e01b8152336004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063430c208190604401602060405180830381865afa1580156110aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ce919061351b565b6110ea5760405162461bcd60e51b81526004016108c79061353d565b60005b8351811015610aa0578381815181106111085761110861346e565b60200260200101516001600160a01b031663a7852afa838584815181106111315761113161346e565b60200260200101516040518363ffffffff1660e01b8152600401611156929190613654565b600060405180830381600087803b15801561117057600080fd5b505af1158015611184573d6000803e3d6000fd5b5050505080806111939061349a565b9150506110ed565b336000908152600b602052604090205460ff166111ca5760405162461bcd60e51b81526004016108c7906135be565b811561124a576040516246b3bd60e81b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906346b3bd0090602401600060405180830381600087803b15801561123157600080fd5b505af1158015611245573d6000803e3d6000fd5b505050505b60405182815233906001600160a01b038316907f60940192810a6fb3bce3fd3e2e3a13fd6ccc7605e963fb87ee971aba829989bd90602001610ce6565b6000611291612b02565b905090565b61103c81612c1e565b60405163430c208160e01b8152336004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063430c208190604401602060405180830381865afa15801561130a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132e919061351b565b61134a5760405162461bcd60e51b81526004016108c79061353d565b60005b8351811015610aa0578381815181106113685761136861346e565b60200260200101516001600160a01b031663a7852afa838584815181106113915761139161346e565b60200260200101516040518363ffffffff1660e01b81526004016113b6929190613654565b600060405180830381600087803b1580156113d057600080fd5b505af11580156113e4573d6000803e3d6000fd5b5050505080806113f39061349a565b91505061134d565b6000811161141b5760405162461bcd60e51b81526004016108c7906135de565b6040516331a9108f60e11b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636352211e90602401602060405180830381865afa158015611480573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a491906135fe565b6001600160a01b0316336001600160a01b0316146114d45760405162461bcd60e51b81526004016108c79061353d565b6114dc612b02565b6040516339f890b560e21b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e7e242d490602401602060405180830381865afa158015611541573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611565919061361b565b116115825760405162461bcd60e51b81526004016108c790613634565b61076282612a56565b815b81811015610817576115df60046000600384815481106115af576115af61346e565b60009182526020808320909101546001600160a01b03908116845290830193909352604090910190205416612c1e565b806115e98161349a565b91505061158d565b6001600160a01b03818116600090815260046020526040812054909116156116445760405162461bcd60e51b815260206004820152600660248201526565786973747360d01b60448201526064016108c7565b60405163e5e31b1360e01b81526001600160a01b0383811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063e5e31b1390602401602060405180830381865afa1580156116aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ce919061351b565b6117025760405162461bcd60e51b8152602060048201526005602482015264085c1bdbdb60da1b60448201526064016108c7565b600080836001600160a01b0316639d63848a6040518163ffffffff1660e01b81526004016040805180830381865afa158015611742573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611766919061366d565b6001600160a01b0382166000908152600c6020526040902054919350915060ff1680156117ab57506001600160a01b0381166000908152600c602052604090205460ff165b6117e65760405162461bcd60e51b815260206004820152600c60248201526b085dda1a5d195b1a5cdd195960a21b60448201526064016108c7565b6040805160038082526080820190925260009160208201606080368337019050509050828160008151811061181d5761181d61346e565b60200260200101906001600160a01b031690816001600160a01b03168152505081816001815181106118515761185161346e565b6001600160a01b0392831660209182029290920101527f00000000000000000000000000000000000000000000000000000000000000008116908416148015906118cd5750816001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614155b15611927577f0000000000000000000000000000000000000000000000000000000000000000816002815181106119065761190661346e565b60200260200101906001600160a01b031690816001600160a01b0316815250505b60405163897cd6b360e01b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063897cd6b39061197690859060040161369c565b6020604051808303816000875af1158015611995573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b991906135fe565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166358c14b6588847f0000000000000000000000000000000000000000000000000000000000000000876040518563ffffffff1660e01b8152600401611a2f94939291906136af565b6020604051808303816000875af1158015611a4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a7291906135fe565b9050611aaa6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001682600019612d02565b6001600160a01b03808216600081815260066020908152604080832080548689166001600160a01b031991821617909155948c16808452600483528184208054871686179055938352600582528083208054909516909317909355600b9092529020805460ff19166001179055611b2081612c1e565b600380546001810182556000919091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b0319166001600160a01b03898116918217909255604051338152909184811691908416907f48d3c521fd0d5541640f58c6d6381eed7cb2e8c9df421ae165a4f4c2d221ee0d9060200160405180910390a49695505050505050565b336000908152600b602052604090205460ff16611be55760405162461bcd60e51b81526004016108c7906135be565b604080518481526020810183905233916001600160a01b038516917fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d79101610bf0565b60096020528160005260406000208181548110611c4457600080fd5b6000918252602090912001546001600160a01b03169150829050565b60038181548110611c7057600080fd5b6000918252602090912001546001600160a01b0316905081565b60005b815181101561076257818181518110611ca857611ca861346e565b60200260200101516001600160a01b031663d294f0936040518163ffffffff1660e01b815260040160408051808303816000875af1158015611cee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d1291906136ed565b50508080611d1f9061349a565b915050611c8d565b60005b815181101561076257611d55828281518110611d4857611d4861346e565b6020026020010151612c1e565b80611d5f8161349a565b915050611d2a565b60008111611d875760405162461bcd60e51b81526004016108c7906135de565b6040516331a9108f60e11b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636352211e90602401602060405180830381865afa158015611dec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e1091906135fe565b6001600160a01b0316336001600160a01b031614611e405760405162461bcd60e51b81526004016108c79061353d565b611e48612b02565b6040516339f890b560e21b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e7e242d490602401602060405180830381865afa158015611ead573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed1919061361b565b11611eee5760405162461bcd60e51b81526004016108c790613634565b604051633d509c9760e01b81526001600160a01b038481166004830152831690633d509c9790602401610fb5565b336000908152600b602052604090205460ff16611f4b5760405162461bcd60e51b81526004016108c7906135be565b604080518481526020810183905233916001600160a01b038516917ff341246adaac6f497bc2a656f546ab9e182111d630394f0c57c710a59a2cb5679101610bf0565b60405163430c208160e01b8152336004820152602481018690527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063430c208190604401602060405180830381865afa158015611ff9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061201d919061351b565b6120395760405162461bcd60e51b81526004016108c79061353d565b8281146120725760405162461bcd60e51b81526020600482015260076024820152662161727261797360c81b60448201526064016108c7565b61094f858585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060408051602080890282810182019093528882529093508892508791829185019084908082843760009201919091525061255792505050565b6000546001146121235760405162461bcd60e51b815260206004820152600e60248201526d1499595b9d1c985b9d0818d85b1b60921b60448201526064016108c7565b6002600081905550600160009054906101000a90046001600160a01b03166001600160a01b031663a83627de6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015612180573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121a4919061361b565b506121ae81612c1e565b6001600160a01b038181166000818152600f602052604090819020549051634cde602960e11b81527f00000000000000000000000000000000000000000000000000000000000000009093166004840152916399bcc05290602401602060405180830381865afa158015612226573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061224a919061361b565b811180156122645750600061226262093a8083613592565b115b1561233f576001600160a01b038281166000818152600f6020526040808220919091555163b66503cf60e01b81527f00000000000000000000000000000000000000000000000000000000000000009092166004830152602482018390529063b66503cf90604401600060405180830381600087803b1580156122e657600080fd5b505af11580156122fa573d6000803e3d6000fd5b50506040518381526001600160a01b03851692503391507f4fa9693cae526341d334e2862ca2413b2e503f1266255f9e0869fb36e6d89b179060200160405180910390a35b50506001600055565b600081815260096020526040812080549091805b8281101561251b5760008482815481106123785761237861346e565b60009182526020808320909101548883526008825260408084206001600160a01b0392831680865290845281852054600490945293205492935090916123be9116612c1e565b6001600160a01b038216600090815260076020526040812080548392906123e6908490613711565b909155505060008781526008602090815260408083206001600160a01b03861684529091528120805483929061241d908490613711565b909155505060008113156124c0576001600160a01b038281166000908152600460208181526040808420548516845260069091529182902054915163278afc8b60e21b8152908101849052602481018a9052911690639e2bf22c90604401600060405180830381600087803b15801561249557600080fd5b505af11580156124a9573d6000803e3d6000fd5b5050505080846124b99190613750565b93506124cd565b6124ca8185613711565b93505b60408051888152602081018390527f6b3894ce60b9bbe9d93f1a4e6fc25b6b93cd8222e73ab6348d79c596f5b51de9910160405180910390a1505080806125139061349a565b91505061235c565b50806002600082825461252e9190613791565b90915550506000848152600a6020908152604080832083905560099091528120610aa091612f91565b61256083612348565b81516040516339f890b560e21b8152600481018590526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e7e242d490602401602060405180830381865afa1580156125ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125ee919061361b565b90506000806000805b858110156126815760008782815181106126135761261361346e565b602002602001015113612648578681815181106126325761263261346e565b6020026020010151612643906137a8565b612663565b86818151811061265a5761265a61346e565b60200260200101515b61266d9085613750565b9350806126798161349a565b9150506125f7565b5060005b858110156129345760008882815181106126a1576126a161346e565b6020908102919091018101516001600160a01b038082166000908152600490935260408320548b51929450169190879089908c90879081106126e5576126e561346e565b60200260200101516126f791906137c4565b6127019190613849565b60008d81526008602090815260408083206001600160a01b0388168452909152902054909150156127655760405162461bcd60e51b815260206004820152600e60248201526d191d5c1b1a58d85d19481c1bdbdb60921b60448201526064016108c7565b806000036127a25760405162461bcd60e51b815260206004820152600a6024820152693d32b937903837bbb2b960b11b60448201526064016108c7565b6127ab82612c1e565b60008c815260096020908152604080832080546001810182559084528284200180546001600160a01b0319166001600160a01b0388169081179091558352600790915281208054839290612800908490613750565b909155505060008c81526008602090815260408083206001600160a01b038716845290915281208054839290612837908490613750565b909155505060008113156128be576001600160a01b038083166000908152600660205260409081902054905163f320772360e01b815260048101849052602481018f905291169063f320772390604401600060405180830381600087803b1580156128a157600080fd5b505af11580156128b5573d6000803e3d6000fd5b505050506128ca565b6128c7816137a8565b90505b6128d48186613750565b94506128e08187613750565b604080518e81526020810184905291975033917f1263a2295e53acd6ef8f655b8afc11fa0f2cf11925be7aa1757d741ef32a926c910160405180910390a2505050808061292c9061349a565b915050612685565b5060008113156129b95760405163fd4a77f160e01b8152600481018990527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063fd4a77f190602401600060405180830381600087803b1580156129a057600080fd5b505af11580156129b4573d6000803e3d6000fd5b505050505b81600260008282546129cb91906135a6565b90915550506000978852600a602052604090972096909655505050505050565b6040516001600160a01b0380851660248301528316604482015260648101829052610aa09085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612db4565b6001600160a01b0381166000908152600c602052604090205460ff1615612ab55760405162461bcd60e51b8152602060048201526013602482015272185b1c9958591e481dda1a5d195b1a5cdd1959606a1b60448201526064016108c7565b6001600160a01b0381166000818152600c6020526040808220805460ff191660011790555133917f6661a7108aecd07864384529117d96c319c1163e3010c01390f6b704726e07de91a350565b600060057f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b88919061361b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612be6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c0a919061361b565b612c149190613791565b6112919190613592565b6001600160a01b0380821660009081526005602090815260408083205490931680835260079091529181205490811315612ce1576001600160a01b0383166000908152600e602052604081208054600d549182905591612c7e8383613791565b90508015612cd9576000670de0b6b3a7640000612c9b838761355d565b612ca59190613592565b6001600160a01b0388166000908152600f6020526040812080549293508392909190612cd29084906135a6565b9091555050505b505050505050565b600d546001600160a01b0384166000908152600e6020526040902055505050565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015612d53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d77919061361b565b612d8191906135a6565b6040516001600160a01b038516602482015260448101829052909150610aa090859063095ea7b360e01b90606401612a1f565b6000612e09826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612e869092919063ffffffff16565b8051909150156108175780806020019051810190612e27919061351b565b6108175760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016108c7565b60606001600160a01b0384163b612edf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108c7565b600080856001600160a01b031685604051612efa91906138a3565b6000604051808303816000865af19150503d8060008114612f37576040519150601f19603f3d011682016040523d82523d6000602084013e612f3c565b606091505b5091509150612f4c828286612f58565b925050505b9392505050565b60608315612f67575081612f51565b825115612f775782518084602001fd5b8160405162461bcd60e51b81526004016108c791906138bf565b508054600082559060005260206000209081019061103c91905b80821115612fbf5760008155600101612fab565b5090565b6001600160a01b038116811461103c57600080fd5b600060208284031215612fea57600080fd5b8135612f5181612fc3565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561303457613034612ff5565b604052919050565b600067ffffffffffffffff82111561305657613056612ff5565b5060051b60200190565b600082601f83011261307157600080fd5b813560206130866130818361303c565b61300b565b82815260059290921b840181019181810190868411156130a557600080fd5b8286015b848110156130c95780356130bc81612fc3565b83529183019183016130a9565b509695505050505050565b6000602082840312156130e657600080fd5b813567ffffffffffffffff8111156130fd57600080fd5b61310984828501613060565b949350505050565b600082601f83011261312257600080fd5b813560206131326130818361303c565b82815260059290921b8401810191818101908684111561315157600080fd5b8286015b848110156130c957803567ffffffffffffffff8111156131755760008081fd5b6131838986838b0101613060565b845250918301918301613155565b600080604083850312156131a457600080fd5b823567ffffffffffffffff808211156131bc57600080fd5b6131c886838701613060565b935060208501359150808211156131de57600080fd5b506131eb85828601613111565b9150509250929050565b60006020828403121561320757600080fd5b5035919050565b6000806040838503121561322157600080fd5b82359150602083013561323381612fc3565b809150509250929050565b6000806040838503121561325157600080fd5b823567ffffffffffffffff81111561326857600080fd5b61327485828601613060565b925050602083013561323381612fc3565b60008060006060848603121561329a57600080fd5b83356132a581612fc3565b925060208401356132b581612fc3565b929592945050506040919091013590565b600080604083850312156132d957600080fd5b50508035926020909101359150565b6000806000606084860312156132fd57600080fd5b833567ffffffffffffffff8082111561331557600080fd5b61332187838801613060565b9450602086013591508082111561333757600080fd5b5061334486828701613111565b925050604084013590509250925092565b6000806040838503121561336857600080fd5b823561337381612fc3565b946020939093013593505050565b60008060006060848603121561339657600080fd5b8335925060208401356132b581612fc3565b60008083601f8401126133ba57600080fd5b50813567ffffffffffffffff8111156133d257600080fd5b6020830191508360208260051b85010111156133ed57600080fd5b9250929050565b60008060008060006060868803121561340c57600080fd5b85359450602086013567ffffffffffffffff8082111561342b57600080fd5b61343789838a016133a8565b9096509450604088013591508082111561345057600080fd5b5061345d888289016133a8565b969995985093965092949392505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016134ac576134ac613484565b5060010190565b600081518084526020808501945080840160005b838110156134ec5781516001600160a01b0316875295820195908201906001016134c7565b509495945050505050565b6001600160a01b0383168152604060208201819052600090613109908301846134b3565b60006020828403121561352d57600080fd5b81518015158114612f5157600080fd5b60208082526006908201526510b7bbb732b960d11b604082015260600190565b600081600019048311821515161561357757613577613484565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826135a1576135a161357c565b500490565b600082198211156135b9576135b9613484565b500190565b60208082526006908201526521676175676560d01b604082015260600190565b60208082526006908201526510ba37b5b2b760d11b604082015260600190565b60006020828403121561361057600080fd5b8151612f5181612fc3565b60006020828403121561362d57600080fd5b5051919050565b60208082526006908201526510b837bbb2b960d11b604082015260600190565b82815260406020820152600061310960408301846134b3565b6000806040838503121561368057600080fd5b825161368b81612fc3565b602084015190925061323381612fc3565b602081526000612f5160208301846134b3565b6001600160a01b0385811682528481166020830152831660408201526080606082018190526000906136e3908301846134b3565b9695505050505050565b6000806040838503121561370057600080fd5b505080516020909101519092909150565b60008083128015600160ff1b85018412161561372f5761372f613484565b6001600160ff1b038401831381161561374a5761374a613484565b50500390565b600080821280156001600160ff1b038490038513161561377257613772613484565b600160ff1b839003841281161561378b5761378b613484565b50500190565b6000828210156137a3576137a3613484565b500390565b6000600160ff1b82016137bd576137bd613484565b5060000390565b60006001600160ff1b03818413828413808216868404861116156137ea576137ea613484565b600160ff1b600087128281168783058912161561380957613809613484565b6000871292508782058712848416161561382557613825613484565b8785058712818416161561383b5761383b613484565b505050929093029392505050565b6000826138585761385861357c565b600160ff1b82146000198414161561387257613872613484565b500590565b60005b8381101561389257818101518382015260200161387a565b83811115610aa05750506000910152565b600082516138b5818460208701613877565b9190910192915050565b60208152600082518060208401526138de816040850160208701613877565b601f01601f1916919091016040019291505056fea2646970667358221220b0f58a5dcdd98800cf7f60b1fbe5ab4525e74330f56e5dc3b9f82d866443a58464736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102955760003560e01c80636ecbe38a11610167578063ac4afa38116100ce578063ddbe883c11610087578063ddbe883c1461067b578063e380fcad1461068e578063ea94ee44146106ae578063eb4a78e0146106c1578063fc0c546a146106e8578063fecdad601461070f57600080fd5b8063ac4afa38146105c7578063b9a09fd5146105da578063c45a015514610603578063c527ee1f1461062a578063d23254b41461063d578063d560b0d71461066857600080fd5b8063a5f4301e11610120578063a5f4301e14610522578063a61c713a14610535578063a7cac84614610548578063a86a366d14610568578063a8c5d95a1461057b578063aa79979b146105a457600080fd5b80636ecbe38a146104ad5780637715ee75146104c057806379e93824146104d357806396c82e57146104f357806398fc55d8146104fc5780639b6a9d721461050f57600080fd5b80633c6b16ab1161020b57806353d78693116101c457806353d786931461045157806353f38e6b1461045957806363453ae11461046c578063666256aa1461047f578063698473e3146104925780636a1b7ecc146104a557600080fd5b80633c6b16ab146103dd578063402914f5146103f0578063411b1f7714610410578063436596c414610423578063462d0b2e1461042b5780634c6e62b61461043e57600080fd5b806320b1cb6f1161025d57806320b1cb6f146103565780632716ae66146103695780632986c0e51461037b578063310bd74b1461038457806332145f90146103975780633af32abf146103aa57600080fd5b806306d6a1b21461029a57806307546172146102e05780630d52333c146102f35780631f8507161461031a5780632025e9b814610341575b600080fd5b6102c36102a8366004612fd8565b6005602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6001546102c3906001600160a01b031681565b6102c37f000000000000000000000000000000000000000000000000000000000000000081565b6102c37f000000000000000000000000000000000000000000000000000000000000000081565b61035461034f3660046130d4565b610722565b005b610354610364366004613191565b610766565b6003545b6040519081526020016102d7565b61036d600d5481565b6103546103923660046131f5565b61081c565b6103546103a53660046131f5565b610956565b6103cd6103b8366004612fd8565b600c6020526000908152604090205460ff1681565b60405190151581526020016102d7565b6103546103eb3660046131f5565b610aa6565b61036d6103fe366004612fd8565b600f6020526000908152604090205481565b61035461041e36600461320e565b610bfd565b610354610cf2565b61035461043936600461323e565b610d5c565b61035461044c366004613285565b610e04565b610354610fec565b6103546104673660046132c6565b610ffd565b61035461047a366004612fd8565b611033565b61035461048d3660046132e8565b61103f565b6103546104a036600461320e565b61119b565b61036d611287565b6103546104bb366004612fd8565b611296565b6103546104ce3660046132e8565b61129f565b61036d6104e13660046131f5565b600a6020526000908152604090205481565b61036d60025481565b61035461050a366004613355565b6113fb565b61035461051d3660046132c6565b61158b565b6102c3610530366004612fd8565b6115f1565b610354610543366004613381565b611bb6565b61036d610556366004612fd8565b60076020526000908152604090205481565b6102c36105763660046132c6565b611c28565b6102c3610589366004612fd8565b6006602052600090815260409020546001600160a01b031681565b6103cd6105b2366004612fd8565b600b6020526000908152604090205460ff1681565b6102c36105d53660046131f5565b611c60565b6102c36105e8366004612fd8565b6004602052600090815260409020546001600160a01b031681565b6102c37f000000000000000000000000000000000000000000000000000000000000000081565b6103546106383660046130d4565b611c8a565b61036d61064b36600461320e565b600860209081526000928352604080842090915290825290205481565b6103546106763660046130d4565b611d27565b610354610689366004613285565b611d67565b61036d61069c366004612fd8565b600e6020526000908152604090205481565b6103546106bc366004613381565b611f1c565b6102c37f000000000000000000000000000000000000000000000000000000000000000081565b6102c37f000000000000000000000000000000000000000000000000000000000000000081565b61035461071d3660046133f4565b611f8e565b60005b8151811015610762576107508282815181106107435761074361346e565b60200260200101516120e0565b8061075a8161349a565b915050610725565b5050565b60005b8251811015610817578281815181106107845761078461346e565b60200260200101516001600160a01b03166331279d3d338484815181106107ad576107ad61346e565b60200260200101516040518363ffffffff1660e01b81526004016107d29291906134f7565b600060405180830381600087803b1580156107ec57600080fd5b505af1158015610800573d6000803e3d6000fd5b50505050808061080f9061349a565b915050610769565b505050565b60405163430c208160e01b8152336004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063430c208190604401602060405180830381865afa158015610887573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ab919061351b565b6108d05760405162461bcd60e51b81526004016108c79061353d565b60405180910390fd5b6108d981612348565b60405163c1f0fb9f60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c1f0fb9f90602401600060405180830381600087803b15801561093b57600080fd5b505af115801561094f573d6000803e3d6000fd5b5050505050565b6000818152600960209081526040808320805482518185028101850190935280835291929091908301828280156109b657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610998575b5050505050905060008151905060008167ffffffffffffffff8111156109de576109de612ff5565b604051908082528060200260200182016040528015610a07578160200160208202803683370190505b50905060005b82811015610a9457600860008681526020019081526020016000206000858381518110610a3c57610a3c61346e565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054828281518110610a7757610a7761346e565b602090810291909101015280610a8c8161349a565b915050610a0d565b50610aa0848483612557565b50505050565b80600003610ae45760405162461bcd60e51b815260206004820152600b60248201526a1e995c9bc8185b5bdd5b9d60aa1b60448201526064016108c7565b6002546000819003610b235760405162461bcd60e51b8152602060048201526008602482015267217765696768747360c01b60448201526064016108c7565b610b586001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163330856129eb565b600081610b6d84670de0b6b3a764000061355d565b610b779190613592565b90508015610b975780600d6000828254610b9191906135a6565b90915550505b6040518381526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169033907ff70d5c697de7ea828df48e5c4573cb2194c659f1901f70110c52b066dcf50826906020015b60405180910390a3505050565b336000908152600b602052604090205460ff16610c2c5760405162461bcd60e51b81526004016108c7906135be565b8115610cad57604051634c3c15a760e11b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906398782b4e90602401600060405180830381600087803b158015610c9457600080fd5b505af1158015610ca8573d6000803e3d6000fd5b505050505b60405182815233906001600160a01b038316907fae268d9aab12f3605f58efd74fd3801fa812b03fdb44317eb70f46dff0e19e22906020015b60405180910390a35050565b60035460005b8181101561076257610d4a6004600060038481548110610d1a57610d1a61346e565b60009182526020808320909101546001600160a01b039081168452908301939093526040909101902054166120e0565b80610d548161349a565b915050610cf8565b6001546001600160a01b03163314610da05760405162461bcd60e51b815260206004820152600760248201526610b6b4b73a32b960c91b60448201526064016108c7565b60005b8251811015610de057610dce838281518110610dc157610dc161346e565b6020026020010151612a56565b80610dd88161349a565b915050610da3565b50600180546001600160a01b0319166001600160a01b039290921691909117905550565b60008111610e245760405162461bcd60e51b81526004016108c7906135de565b6040516331a9108f60e11b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636352211e90602401602060405180830381865afa158015610e89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ead91906135fe565b6001600160a01b0316336001600160a01b031614610edd5760405162461bcd60e51b81526004016108c79061353d565b610ee5612b02565b6040516339f890b560e21b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e7e242d490602401602060405180830381865afa158015610f4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6e919061361b565b11610f8b5760405162461bcd60e51b81526004016108c790613634565b604051631c8db79360e31b81526001600160a01b03848116600483015283169063e46dbc98906024015b600060405180830381600087803b158015610fcf57600080fd5b505af1158015610fe3573d6000803e3d6000fd5b50505050505050565b600354610ffb9060009061158b565b565b815b81811015610817576110216004600060038481548110610d1a57610d1a61346e565b8061102b8161349a565b915050610fff565b61103c816120e0565b50565b60405163430c208160e01b8152336004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063430c208190604401602060405180830381865afa1580156110aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ce919061351b565b6110ea5760405162461bcd60e51b81526004016108c79061353d565b60005b8351811015610aa0578381815181106111085761110861346e565b60200260200101516001600160a01b031663a7852afa838584815181106111315761113161346e565b60200260200101516040518363ffffffff1660e01b8152600401611156929190613654565b600060405180830381600087803b15801561117057600080fd5b505af1158015611184573d6000803e3d6000fd5b5050505080806111939061349a565b9150506110ed565b336000908152600b602052604090205460ff166111ca5760405162461bcd60e51b81526004016108c7906135be565b811561124a576040516246b3bd60e81b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906346b3bd0090602401600060405180830381600087803b15801561123157600080fd5b505af1158015611245573d6000803e3d6000fd5b505050505b60405182815233906001600160a01b038316907f60940192810a6fb3bce3fd3e2e3a13fd6ccc7605e963fb87ee971aba829989bd90602001610ce6565b6000611291612b02565b905090565b61103c81612c1e565b60405163430c208160e01b8152336004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063430c208190604401602060405180830381865afa15801561130a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132e919061351b565b61134a5760405162461bcd60e51b81526004016108c79061353d565b60005b8351811015610aa0578381815181106113685761136861346e565b60200260200101516001600160a01b031663a7852afa838584815181106113915761139161346e565b60200260200101516040518363ffffffff1660e01b81526004016113b6929190613654565b600060405180830381600087803b1580156113d057600080fd5b505af11580156113e4573d6000803e3d6000fd5b5050505080806113f39061349a565b91505061134d565b6000811161141b5760405162461bcd60e51b81526004016108c7906135de565b6040516331a9108f60e11b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636352211e90602401602060405180830381865afa158015611480573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a491906135fe565b6001600160a01b0316336001600160a01b0316146114d45760405162461bcd60e51b81526004016108c79061353d565b6114dc612b02565b6040516339f890b560e21b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e7e242d490602401602060405180830381865afa158015611541573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611565919061361b565b116115825760405162461bcd60e51b81526004016108c790613634565b61076282612a56565b815b81811015610817576115df60046000600384815481106115af576115af61346e565b60009182526020808320909101546001600160a01b03908116845290830193909352604090910190205416612c1e565b806115e98161349a565b91505061158d565b6001600160a01b03818116600090815260046020526040812054909116156116445760405162461bcd60e51b815260206004820152600660248201526565786973747360d01b60448201526064016108c7565b60405163e5e31b1360e01b81526001600160a01b0383811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063e5e31b1390602401602060405180830381865afa1580156116aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ce919061351b565b6117025760405162461bcd60e51b8152602060048201526005602482015264085c1bdbdb60da1b60448201526064016108c7565b600080836001600160a01b0316639d63848a6040518163ffffffff1660e01b81526004016040805180830381865afa158015611742573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611766919061366d565b6001600160a01b0382166000908152600c6020526040902054919350915060ff1680156117ab57506001600160a01b0381166000908152600c602052604090205460ff165b6117e65760405162461bcd60e51b815260206004820152600c60248201526b085dda1a5d195b1a5cdd195960a21b60448201526064016108c7565b6040805160038082526080820190925260009160208201606080368337019050509050828160008151811061181d5761181d61346e565b60200260200101906001600160a01b031690816001600160a01b03168152505081816001815181106118515761185161346e565b6001600160a01b0392831660209182029290920101527f00000000000000000000000000000000000000000000000000000000000000008116908416148015906118cd5750816001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614155b15611927577f0000000000000000000000000000000000000000000000000000000000000000816002815181106119065761190661346e565b60200260200101906001600160a01b031690816001600160a01b0316815250505b60405163897cd6b360e01b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063897cd6b39061197690859060040161369c565b6020604051808303816000875af1158015611995573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b991906135fe565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166358c14b6588847f0000000000000000000000000000000000000000000000000000000000000000876040518563ffffffff1660e01b8152600401611a2f94939291906136af565b6020604051808303816000875af1158015611a4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a7291906135fe565b9050611aaa6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001682600019612d02565b6001600160a01b03808216600081815260066020908152604080832080548689166001600160a01b031991821617909155948c16808452600483528184208054871686179055938352600582528083208054909516909317909355600b9092529020805460ff19166001179055611b2081612c1e565b600380546001810182556000919091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b0319166001600160a01b03898116918217909255604051338152909184811691908416907f48d3c521fd0d5541640f58c6d6381eed7cb2e8c9df421ae165a4f4c2d221ee0d9060200160405180910390a49695505050505050565b336000908152600b602052604090205460ff16611be55760405162461bcd60e51b81526004016108c7906135be565b604080518481526020810183905233916001600160a01b038516917fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d79101610bf0565b60096020528160005260406000208181548110611c4457600080fd5b6000918252602090912001546001600160a01b03169150829050565b60038181548110611c7057600080fd5b6000918252602090912001546001600160a01b0316905081565b60005b815181101561076257818181518110611ca857611ca861346e565b60200260200101516001600160a01b031663d294f0936040518163ffffffff1660e01b815260040160408051808303816000875af1158015611cee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d1291906136ed565b50508080611d1f9061349a565b915050611c8d565b60005b815181101561076257611d55828281518110611d4857611d4861346e565b6020026020010151612c1e565b80611d5f8161349a565b915050611d2a565b60008111611d875760405162461bcd60e51b81526004016108c7906135de565b6040516331a9108f60e11b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636352211e90602401602060405180830381865afa158015611dec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e1091906135fe565b6001600160a01b0316336001600160a01b031614611e405760405162461bcd60e51b81526004016108c79061353d565b611e48612b02565b6040516339f890b560e21b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e7e242d490602401602060405180830381865afa158015611ead573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed1919061361b565b11611eee5760405162461bcd60e51b81526004016108c790613634565b604051633d509c9760e01b81526001600160a01b038481166004830152831690633d509c9790602401610fb5565b336000908152600b602052604090205460ff16611f4b5760405162461bcd60e51b81526004016108c7906135be565b604080518481526020810183905233916001600160a01b038516917ff341246adaac6f497bc2a656f546ab9e182111d630394f0c57c710a59a2cb5679101610bf0565b60405163430c208160e01b8152336004820152602481018690527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063430c208190604401602060405180830381865afa158015611ff9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061201d919061351b565b6120395760405162461bcd60e51b81526004016108c79061353d565b8281146120725760405162461bcd60e51b81526020600482015260076024820152662161727261797360c81b60448201526064016108c7565b61094f858585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060408051602080890282810182019093528882529093508892508791829185019084908082843760009201919091525061255792505050565b6000546001146121235760405162461bcd60e51b815260206004820152600e60248201526d1499595b9d1c985b9d0818d85b1b60921b60448201526064016108c7565b6002600081905550600160009054906101000a90046001600160a01b03166001600160a01b031663a83627de6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015612180573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121a4919061361b565b506121ae81612c1e565b6001600160a01b038181166000818152600f602052604090819020549051634cde602960e11b81527f00000000000000000000000000000000000000000000000000000000000000009093166004840152916399bcc05290602401602060405180830381865afa158015612226573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061224a919061361b565b811180156122645750600061226262093a8083613592565b115b1561233f576001600160a01b038281166000818152600f6020526040808220919091555163b66503cf60e01b81527f00000000000000000000000000000000000000000000000000000000000000009092166004830152602482018390529063b66503cf90604401600060405180830381600087803b1580156122e657600080fd5b505af11580156122fa573d6000803e3d6000fd5b50506040518381526001600160a01b03851692503391507f4fa9693cae526341d334e2862ca2413b2e503f1266255f9e0869fb36e6d89b179060200160405180910390a35b50506001600055565b600081815260096020526040812080549091805b8281101561251b5760008482815481106123785761237861346e565b60009182526020808320909101548883526008825260408084206001600160a01b0392831680865290845281852054600490945293205492935090916123be9116612c1e565b6001600160a01b038216600090815260076020526040812080548392906123e6908490613711565b909155505060008781526008602090815260408083206001600160a01b03861684529091528120805483929061241d908490613711565b909155505060008113156124c0576001600160a01b038281166000908152600460208181526040808420548516845260069091529182902054915163278afc8b60e21b8152908101849052602481018a9052911690639e2bf22c90604401600060405180830381600087803b15801561249557600080fd5b505af11580156124a9573d6000803e3d6000fd5b5050505080846124b99190613750565b93506124cd565b6124ca8185613711565b93505b60408051888152602081018390527f6b3894ce60b9bbe9d93f1a4e6fc25b6b93cd8222e73ab6348d79c596f5b51de9910160405180910390a1505080806125139061349a565b91505061235c565b50806002600082825461252e9190613791565b90915550506000848152600a6020908152604080832083905560099091528120610aa091612f91565b61256083612348565b81516040516339f890b560e21b8152600481018590526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e7e242d490602401602060405180830381865afa1580156125ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125ee919061361b565b90506000806000805b858110156126815760008782815181106126135761261361346e565b602002602001015113612648578681815181106126325761263261346e565b6020026020010151612643906137a8565b612663565b86818151811061265a5761265a61346e565b60200260200101515b61266d9085613750565b9350806126798161349a565b9150506125f7565b5060005b858110156129345760008882815181106126a1576126a161346e565b6020908102919091018101516001600160a01b038082166000908152600490935260408320548b51929450169190879089908c90879081106126e5576126e561346e565b60200260200101516126f791906137c4565b6127019190613849565b60008d81526008602090815260408083206001600160a01b0388168452909152902054909150156127655760405162461bcd60e51b815260206004820152600e60248201526d191d5c1b1a58d85d19481c1bdbdb60921b60448201526064016108c7565b806000036127a25760405162461bcd60e51b815260206004820152600a6024820152693d32b937903837bbb2b960b11b60448201526064016108c7565b6127ab82612c1e565b60008c815260096020908152604080832080546001810182559084528284200180546001600160a01b0319166001600160a01b0388169081179091558352600790915281208054839290612800908490613750565b909155505060008c81526008602090815260408083206001600160a01b038716845290915281208054839290612837908490613750565b909155505060008113156128be576001600160a01b038083166000908152600660205260409081902054905163f320772360e01b815260048101849052602481018f905291169063f320772390604401600060405180830381600087803b1580156128a157600080fd5b505af11580156128b5573d6000803e3d6000fd5b505050506128ca565b6128c7816137a8565b90505b6128d48186613750565b94506128e08187613750565b604080518e81526020810184905291975033917f1263a2295e53acd6ef8f655b8afc11fa0f2cf11925be7aa1757d741ef32a926c910160405180910390a2505050808061292c9061349a565b915050612685565b5060008113156129b95760405163fd4a77f160e01b8152600481018990527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063fd4a77f190602401600060405180830381600087803b1580156129a057600080fd5b505af11580156129b4573d6000803e3d6000fd5b505050505b81600260008282546129cb91906135a6565b90915550506000978852600a602052604090972096909655505050505050565b6040516001600160a01b0380851660248301528316604482015260648101829052610aa09085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612db4565b6001600160a01b0381166000908152600c602052604090205460ff1615612ab55760405162461bcd60e51b8152602060048201526013602482015272185b1c9958591e481dda1a5d195b1a5cdd1959606a1b60448201526064016108c7565b6001600160a01b0381166000818152600c6020526040808220805460ff191660011790555133917f6661a7108aecd07864384529117d96c319c1163e3010c01390f6b704726e07de91a350565b600060057f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b88919061361b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612be6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c0a919061361b565b612c149190613791565b6112919190613592565b6001600160a01b0380821660009081526005602090815260408083205490931680835260079091529181205490811315612ce1576001600160a01b0383166000908152600e602052604081208054600d549182905591612c7e8383613791565b90508015612cd9576000670de0b6b3a7640000612c9b838761355d565b612ca59190613592565b6001600160a01b0388166000908152600f6020526040812080549293508392909190612cd29084906135a6565b9091555050505b505050505050565b600d546001600160a01b0384166000908152600e6020526040902055505050565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015612d53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d77919061361b565b612d8191906135a6565b6040516001600160a01b038516602482015260448101829052909150610aa090859063095ea7b360e01b90606401612a1f565b6000612e09826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612e869092919063ffffffff16565b8051909150156108175780806020019051810190612e27919061351b565b6108175760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016108c7565b60606001600160a01b0384163b612edf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108c7565b600080856001600160a01b031685604051612efa91906138a3565b6000604051808303816000865af19150503d8060008114612f37576040519150601f19603f3d011682016040523d82523d6000602084013e612f3c565b606091505b5091509150612f4c828286612f58565b925050505b9392505050565b60608315612f67575081612f51565b825115612f775782518084602001fd5b8160405162461bcd60e51b81526004016108c791906138bf565b508054600082559060005260206000209081019061103c91905b80821115612fbf5760008155600101612fab565b5090565b6001600160a01b038116811461103c57600080fd5b600060208284031215612fea57600080fd5b8135612f5181612fc3565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561303457613034612ff5565b604052919050565b600067ffffffffffffffff82111561305657613056612ff5565b5060051b60200190565b600082601f83011261307157600080fd5b813560206130866130818361303c565b61300b565b82815260059290921b840181019181810190868411156130a557600080fd5b8286015b848110156130c95780356130bc81612fc3565b83529183019183016130a9565b509695505050505050565b6000602082840312156130e657600080fd5b813567ffffffffffffffff8111156130fd57600080fd5b61310984828501613060565b949350505050565b600082601f83011261312257600080fd5b813560206131326130818361303c565b82815260059290921b8401810191818101908684111561315157600080fd5b8286015b848110156130c957803567ffffffffffffffff8111156131755760008081fd5b6131838986838b0101613060565b845250918301918301613155565b600080604083850312156131a457600080fd5b823567ffffffffffffffff808211156131bc57600080fd5b6131c886838701613060565b935060208501359150808211156131de57600080fd5b506131eb85828601613111565b9150509250929050565b60006020828403121561320757600080fd5b5035919050565b6000806040838503121561322157600080fd5b82359150602083013561323381612fc3565b809150509250929050565b6000806040838503121561325157600080fd5b823567ffffffffffffffff81111561326857600080fd5b61327485828601613060565b925050602083013561323381612fc3565b60008060006060848603121561329a57600080fd5b83356132a581612fc3565b925060208401356132b581612fc3565b929592945050506040919091013590565b600080604083850312156132d957600080fd5b50508035926020909101359150565b6000806000606084860312156132fd57600080fd5b833567ffffffffffffffff8082111561331557600080fd5b61332187838801613060565b9450602086013591508082111561333757600080fd5b5061334486828701613111565b925050604084013590509250925092565b6000806040838503121561336857600080fd5b823561337381612fc3565b946020939093013593505050565b60008060006060848603121561339657600080fd5b8335925060208401356132b581612fc3565b60008083601f8401126133ba57600080fd5b50813567ffffffffffffffff8111156133d257600080fd5b6020830191508360208260051b85010111156133ed57600080fd5b9250929050565b60008060008060006060868803121561340c57600080fd5b85359450602086013567ffffffffffffffff8082111561342b57600080fd5b61343789838a016133a8565b9096509450604088013591508082111561345057600080fd5b5061345d888289016133a8565b969995985093965092949392505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016134ac576134ac613484565b5060010190565b600081518084526020808501945080840160005b838110156134ec5781516001600160a01b0316875295820195908201906001016134c7565b509495945050505050565b6001600160a01b0383168152604060208201819052600090613109908301846134b3565b60006020828403121561352d57600080fd5b81518015158114612f5157600080fd5b60208082526006908201526510b7bbb732b960d11b604082015260600190565b600081600019048311821515161561357757613577613484565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826135a1576135a161357c565b500490565b600082198211156135b9576135b9613484565b500190565b60208082526006908201526521676175676560d01b604082015260600190565b60208082526006908201526510ba37b5b2b760d11b604082015260600190565b60006020828403121561361057600080fd5b8151612f5181612fc3565b60006020828403121561362d57600080fd5b5051919050565b60208082526006908201526510b837bbb2b960d11b604082015260600190565b82815260406020820152600061310960408301846134b3565b6000806040838503121561368057600080fd5b825161368b81612fc3565b602084015190925061323381612fc3565b602081526000612f5160208301846134b3565b6001600160a01b0385811682528481166020830152831660408201526080606082018190526000906136e3908301846134b3565b9695505050505050565b6000806040838503121561370057600080fd5b505080516020909101519092909150565b60008083128015600160ff1b85018412161561372f5761372f613484565b6001600160ff1b038401831381161561374a5761374a613484565b50500390565b600080821280156001600160ff1b038490038513161561377257613772613484565b600160ff1b839003841281161561378b5761378b613484565b50500190565b6000828210156137a3576137a3613484565b500390565b6000600160ff1b82016137bd576137bd613484565b5060000390565b60006001600160ff1b03818413828413808216868404861116156137ea576137ea613484565b600160ff1b600087128281168783058912161561380957613809613484565b6000871292508782058712848416161561382557613825613484565b8785058712818416161561383b5761383b613484565b505050929093029392505050565b6000826138585761385861357c565b600160ff1b82146000198414161561387257613872613484565b500590565b60005b8381101561389257818101518382015260200161387a565b83811115610aa05750506000910152565b600082516138b5818460208701613877565b9190910192915050565b60208152600082518060208401526138de816040850160208701613877565b601f01601f1916919091016040019291505056fea2646970667358221220b0f58a5dcdd98800cf7f60b1fbe5ab4525e74330f56e5dc3b9f82d866443a58464736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "attachTokenToGauge(uint256,address)": {
        "details": "A gauge should be able to attach a token for preventing transfers/withdraws."
      },
      "claimBribes(address[],address[][],uint256)": {
        "details": "Batch claim rewards from given bribe contracts for given tokenId."
      },
      "claimFees(address[],address[][],uint256)": {
        "details": "Claim fees from given bribes."
      },
      "claimRewards(address[],address[][])": {
        "details": "Batch claim rewards from given gauges."
      },
      "createGauge(address)": {
        "details": "Create gauge for given pool. Only for a pool with whitelisted tokens."
      },
      "detachTokenFromGauge(uint256,address)": {
        "details": "Detach given token."
      },
      "distribute(address)": {
        "details": "Get emission from minter and notify rewards for given gauge."
      },
      "distributeAll()": {
        "details": "Distribute rewards for all pools."
      },
      "distributeFees(address[])": {
        "details": "Move fees from deposited pools to bribes for given gauges."
      },
      "emitDeposit(uint256,address,uint256)": {
        "details": "Emit deposit event for easily handling external actions."
      },
      "emitWithdraw(uint256,address,uint256)": {
        "details": "Emit withdraw event for easily handling external actions."
      },
      "listingFee()": {
        "details": "Amount of tokens required to be hold for whitelisting."
      },
      "notifyRewardAmount(uint256)": {
        "details": "Add rewards to this contract. Usually it is VoltMinter."
      },
      "poke(uint256)": {
        "details": "Resubmit exist votes for given token. For internal purposes."
      },
      "poolsLength()": {
        "details": "Length of pools"
      },
      "registerRewardToken(address,address,uint256)": {
        "details": "Add a token to a gauge/bribe as possible reward."
      },
      "removeRewardToken(address,address,uint256)": {
        "details": "Remove a token from a gauge/bribe allowed rewards list."
      },
      "reset(uint256)": {
        "details": "Remove all votes for given tokenId."
      },
      "updateAll()": {
        "details": "Update all gauges."
      },
      "updateFor(address[])": {
        "details": "Update given gauges."
      },
      "updateForRange(uint256,uint256)": {
        "details": "Update gauges by indexes in a range."
      },
      "updateGauge(address)": {
        "details": "Update reward info for given gauge."
      },
      "vote(uint256,address[],int256[])": {
        "details": "Vote for given pools using a vote power of given tokenId. Reset previous votes."
      },
      "whitelist(address,uint256)": {
        "details": "Add token to whitelist. Only pools with whitelisted tokens can be added to gauge."
      }
    },
    "stateVariables": {
      "DURATION": {
        "details": "Rewards are released over 7 days"
      },
      "bribes": {
        "details": "gauge => bribe"
      },
      "factory": {
        "details": "VoltFactory"
      },
      "gauges": {
        "details": "pool => gauge"
      },
      "poolForGauge": {
        "details": "gauge => pool"
      },
      "poolVote": {
        "details": "nft => pools"
      },
      "pools": {
        "details": "All pools viable for incentives"
      },
      "totalWeight": {
        "details": "Total voting weight"
      },
      "usedWeights": {
        "details": "nft => total voting weight of user"
      },
      "ve": {
        "details": "The ve token that governs these contracts"
      },
      "votes": {
        "details": "nft => pool => votes"
      },
      "weights": {
        "details": "pool => weight"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 116,
        "contract": "contracts/base/vote/VoltVoter.sol:VoltVoter",
        "label": "_unlocked",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 14861,
        "contract": "contracts/base/vote/VoltVoter.sol:VoltVoter",
        "label": "minter",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 14864,
        "contract": "contracts/base/vote/VoltVoter.sol:VoltVoter",
        "label": "totalWeight",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 14868,
        "contract": "contracts/base/vote/VoltVoter.sol:VoltVoter",
        "label": "pools",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 14873,
        "contract": "contracts/base/vote/VoltVoter.sol:VoltVoter",
        "label": "gauges",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 14878,
        "contract": "contracts/base/vote/VoltVoter.sol:VoltVoter",
        "label": "poolForGauge",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 14883,
        "contract": "contracts/base/vote/VoltVoter.sol:VoltVoter",
        "label": "bribes",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 14888,
        "contract": "contracts/base/vote/VoltVoter.sol:VoltVoter",
        "label": "weights",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_int256)"
      },
      {
        "astId": 14895,
        "contract": "contracts/base/vote/VoltVoter.sol:VoltVoter",
        "label": "votes",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_int256))"
      },
      {
        "astId": 14901,
        "contract": "contracts/base/vote/VoltVoter.sol:VoltVoter",
        "label": "poolVote",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 14906,
        "contract": "contracts/base/vote/VoltVoter.sol:VoltVoter",
        "label": "usedWeights",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 14910,
        "contract": "contracts/base/vote/VoltVoter.sol:VoltVoter",
        "label": "isGauge",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 14914,
        "contract": "contracts/base/vote/VoltVoter.sol:VoltVoter",
        "label": "isWhitelisted",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 14916,
        "contract": "contracts/base/vote/VoltVoter.sol:VoltVoter",
        "label": "index",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 14920,
        "contract": "contracts/base/vote/VoltVoter.sol:VoltVoter",
        "label": "supplyIndex",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 14924,
        "contract": "contracts/base/vote/VoltVoter.sol:VoltVoter",
        "label": "claimable",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_int256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_int256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => int256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_int256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}