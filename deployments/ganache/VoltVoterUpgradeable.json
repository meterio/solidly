{
  "address": "0x96474d57D767c9A1941e60bbE7F73Bd286dDF9A3",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "weight",
          "type": "int256"
        }
      ],
      "name": "Abstained",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "gauge",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Attach",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lp",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "gauge",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "gauge",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Detach",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "gauge",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DistributeReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "gauge",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bribe",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "GaugeCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "reward",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "NotifyReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "weight",
          "type": "int256"
        }
      ],
      "name": "Voted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "whitelister",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "Whitelisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lp",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "gauge",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "attachTokenToGauge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bribeFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "bribes",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_bribes",
          "type": "address[]"
        },
        {
          "internalType": "address[][]",
          "name": "_tokens",
          "type": "address[][]"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "claimBribes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_bribes",
          "type": "address[]"
        },
        {
          "internalType": "address[][]",
          "name": "_tokens",
          "type": "address[][]"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "claimFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_gauges",
          "type": "address[]"
        },
        {
          "internalType": "address[][]",
          "name": "_tokens",
          "type": "address[][]"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "createGauge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "detachTokenFromGauge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        }
      ],
      "name": "distribute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributeAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_gauges",
          "type": "address[]"
        }
      ],
      "name": "distributeFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_gauges",
          "type": "address[]"
        }
      ],
      "name": "distributeForGauges",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "finish",
          "type": "uint256"
        }
      ],
      "name": "distributeForPoolsInRange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "emitDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "emitWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gaugeFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "gauges",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "index",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ve",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gaugeFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bribeFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isGauge",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "listingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "notifyRewardAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "poke",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolForGauge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolVote",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gaugeOrBribe",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "registerRewardToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gaugeOrBribe",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "removeRewardToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "reset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "supplyIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_gauges",
          "type": "address[]"
        }
      ],
      "name": "updateFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "updateForRange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        }
      ],
      "name": "updateGauge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "usedWeights",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ve",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_poolVote",
          "type": "address[]"
        },
        {
          "internalType": "int256[]",
          "name": "_weights",
          "type": "int256[]"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "votes",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "weights",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "whitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x002d2757011540a79041d8de78a311d66a2af02cae5370bc55b528bda2c7af6a",
  "receipt": {
    "to": null,
    "from": "0x1381C573b97Bf393A81fA42760DD21E109d8092B",
    "contractAddress": "0x96474d57D767c9A1941e60bbE7F73Bd286dDF9A3",
    "transactionIndex": 0,
    "gasUsed": "3182856",
    "logsBloom": "0x
    "blockHash": "0xcb27703e996654ac97254fb3f47202956dc1bdbfc52355815c5e704f5a8cbfed",
    "transactionHash": "0x002d2757011540a79041d8de78a311d66a2af02cae5370bc55b528bda2c7af6a",
    "logs": [],
    "blockNumber": 12,
    "cumulativeGasUsed": "3182856",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "3b3b283a31496f0704cc082007acea88",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"weight\",\"type\":\"int256\"}],\"name\":\"Abstained\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Attach\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Detach\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DistributeReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bribe\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"GaugeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NotifyReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"weight\",\"type\":\"int256\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"whitelister\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"Whitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"attachTokenToGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bribeFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bribes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_bribes\",\"type\":\"address[]\"},{\"internalType\":\"address[][]\",\"name\":\"_tokens\",\"type\":\"address[][]\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"claimBribes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_bribes\",\"type\":\"address[]\"},{\"internalType\":\"address[][]\",\"name\":\"_tokens\",\"type\":\"address[][]\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"claimFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_gauges\",\"type\":\"address[]\"},{\"internalType\":\"address[][]\",\"name\":\"_tokens\",\"type\":\"address[][]\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"createGauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"detachTokenFromGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_gauges\",\"type\":\"address[]\"}],\"name\":\"distributeFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_gauges\",\"type\":\"address[]\"}],\"name\":\"distributeForGauges\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finish\",\"type\":\"uint256\"}],\"name\":\"distributeForPoolsInRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emitDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emitWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gaugeFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gauges\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"index\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ve\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gaugeFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bribeFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isGauge\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"poke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolForGauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolVote\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gaugeOrBribe\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"registerRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gaugeOrBribe\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"removeRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"reset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supplyIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_gauges\",\"type\":\"address[]\"}],\"name\":\"updateFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"updateForRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"updateGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"usedWeights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_poolVote\",\"type\":\"address[]\"},{\"internalType\":\"int256[]\",\"name\":\"_weights\",\"type\":\"int256[]\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"weights\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"whitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"attachTokenToGauge(uint256,address)\":{\"details\":\"A gauge should be able to attach a token for preventing transfers/withdraws.\"},\"claimBribes(address[],address[][],uint256)\":{\"details\":\"Batch claim rewards from given bribe contracts for given tokenId.\"},\"claimFees(address[],address[][],uint256)\":{\"details\":\"Claim fees from given bribes.\"},\"claimRewards(address[],address[][])\":{\"details\":\"Batch claim rewards from given gauges.\"},\"createGauge(address)\":{\"details\":\"Create gauge for given pool. Only for a pool with whitelisted tokens.\"},\"detachTokenFromGauge(uint256,address)\":{\"details\":\"Detach given token.\"},\"distribute(address)\":{\"details\":\"Get emission from minter and notify rewards for given gauge.\"},\"distributeAll()\":{\"details\":\"Distribute rewards for all pools.\"},\"distributeFees(address[])\":{\"details\":\"Move fees from deposited pools to bribes for given gauges.\"},\"emitDeposit(uint256,address,uint256)\":{\"details\":\"Emit deposit event for easily handling external actions.\"},\"emitWithdraw(uint256,address,uint256)\":{\"details\":\"Emit withdraw event for easily handling external actions.\"},\"listingFee()\":{\"details\":\"Amount of tokens required to be hold for whitelisting.\"},\"notifyRewardAmount(uint256)\":{\"details\":\"Add rewards to this contract. Usually it is VoltMinter.\"},\"poke(uint256)\":{\"details\":\"Resubmit exist votes for given token. For internal purposes.\"},\"poolsLength()\":{\"details\":\"Length of pools\"},\"registerRewardToken(address,address,uint256)\":{\"details\":\"Add a token to a gauge/bribe as possible reward.\"},\"removeRewardToken(address,address,uint256)\":{\"details\":\"Remove a token from a gauge/bribe allowed rewards list.\"},\"reset(uint256)\":{\"details\":\"Remove all votes for given tokenId.\"},\"updateAll()\":{\"details\":\"Update all gauges.\"},\"updateFor(address[])\":{\"details\":\"Update given gauges.\"},\"updateForRange(uint256,uint256)\":{\"details\":\"Update gauges by indexes in a range.\"},\"updateGauge(address)\":{\"details\":\"Update reward info for given gauge.\"},\"vote(uint256,address[],int256[])\":{\"details\":\"Vote for given pools using a vote power of given tokenId. Reset previous votes.\"},\"whitelist(address,uint256)\":{\"details\":\"Add token to whitelist. Only pools with whitelisted tokens can be added to gauge.\"}},\"stateVariables\":{\"DURATION\":{\"details\":\"Rewards are released over 7 days\"},\"bribes\":{\"details\":\"gauge => bribe\"},\"factory\":{\"details\":\"VoltFactory\"},\"gauges\":{\"details\":\"pool => gauge\"},\"poolForGauge\":{\"details\":\"gauge => pool\"},\"poolVote\":{\"details\":\"nft => pools\"},\"pools\":{\"details\":\"All pools viable for incentives\"},\"totalWeight\":{\"details\":\"Total voting weight\"},\"usedWeights\":{\"details\":\"nft => total voting weight of user\"},\"ve\":{\"details\":\"The ve token that governs these contracts\"},\"votes\":{\"details\":\"nft => pool => votes\"},\"weights\":{\"details\":\"pool => weight\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/base/vote/VoltVoterUpgradeable.sol\":\"VoltVoterUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/base/Reentrancy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nabstract contract Reentrancy {\\n    /// @dev simple re-entrancy check\\n    uint internal _unlocked = 1;\\n\\n    modifier lock() {\\n        require(_unlocked == 1, \\\"Reentrant call\\\");\\n        _unlocked = 2;\\n        _;\\n        _unlocked = 1;\\n    }\\n}\\n\",\"keccak256\":\"0x59c07b769bd280322dea57c93ed20b3e6e1fe1018ab9937b0dfcaddcfb5f2780\",\"license\":\"MIT\"},\"contracts/base/vote/VoltVoterUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../../interface/IVe.sol\\\";\\nimport \\\"../../interface/IVoter.sol\\\";\\nimport \\\"../../interface/IERC20.sol\\\";\\nimport \\\"../../interface/IERC721.sol\\\";\\nimport \\\"../../interface/IGauge.sol\\\";\\nimport \\\"../../interface/IFactory.sol\\\";\\nimport \\\"../../interface/IPair.sol\\\";\\nimport \\\"../../interface/IBribeFactory.sol\\\";\\nimport \\\"../../interface/IGaugeFactory.sol\\\";\\nimport \\\"../../interface/IMinter.sol\\\";\\nimport \\\"../../interface/IBribe.sol\\\";\\nimport \\\"../../interface/IMultiRewardsPool.sol\\\";\\nimport \\\"../Reentrancy.sol\\\";\\nimport \\\"../../lib/SafeERC20.sol\\\";\\nimport \\\"../../lib/Initializable.sol\\\";\\n\\ncontract VoltVoterUpgradeable is IVoter, Reentrancy, Initializable {\\n    using SafeERC20 for IERC20;\\n\\n    /// @dev The ve token that governs these contracts\\n    address public override ve;\\n    /// @dev VoltFactory\\n    address public factory;\\n    address public token;\\n    address public gaugeFactory;\\n    address public bribeFactory;\\n    /// @dev Rewards are released over 7 days\\n    uint internal constant DURATION = 7 days;\\n    address public minter;\\n\\n    /// @dev Total voting weight\\n    uint public totalWeight;\\n\\n    /// @dev All pools viable for incentives\\n    address[] public pools;\\n    /// @dev pool => gauge\\n    mapping(address => address) public gauges;\\n    /// @dev gauge => pool\\n    mapping(address => address) public poolForGauge;\\n    /// @dev gauge => bribe\\n    mapping(address => address) public bribes;\\n    /// @dev pool => weight\\n    mapping(address => int256) public weights;\\n    /// @dev nft => pool => votes\\n    mapping(uint => mapping(address => int256)) public votes;\\n    /// @dev nft => pools\\n    mapping(uint => address[]) public poolVote;\\n    /// @dev nft => total voting weight of user\\n    mapping(uint => uint) public usedWeights;\\n    mapping(address => bool) public isGauge;\\n    mapping(address => bool) public isWhitelisted;\\n\\n    uint public index;\\n    mapping(address => uint) public supplyIndex;\\n    mapping(address => uint) public claimable;\\n\\n    event GaugeCreated(\\n        address indexed gauge,\\n        address creator,\\n        address indexed bribe,\\n        address indexed pool\\n    );\\n    event Voted(address indexed voter, uint tokenId, int256 weight);\\n    event Abstained(uint tokenId, int256 weight);\\n    event Deposit(\\n        address indexed lp,\\n        address indexed gauge,\\n        uint tokenId,\\n        uint amount\\n    );\\n    event Withdraw(\\n        address indexed lp,\\n        address indexed gauge,\\n        uint tokenId,\\n        uint amount\\n    );\\n    event NotifyReward(\\n        address indexed sender,\\n        address indexed reward,\\n        uint amount\\n    );\\n    event DistributeReward(\\n        address indexed sender,\\n        address indexed gauge,\\n        uint amount\\n    );\\n    event Attach(address indexed owner, address indexed gauge, uint tokenId);\\n    event Detach(address indexed owner, address indexed gauge, uint tokenId);\\n    event Whitelisted(address indexed whitelister, address indexed token);\\n\\n    function initialize(\\n        address _ve,\\n        address _factory,\\n        address _gaugeFactory,\\n        address _bribeFactory,\\n        address _minter\\n    ) public initializer{\\n        ve = _ve;\\n        factory = _factory;\\n        token = IVe(_ve).token();\\n        gaugeFactory = _gaugeFactory;\\n        bribeFactory = _bribeFactory;\\n        minter = _minter;\\n        _unlocked = 1;\\n    }\\n\\n    function init(address[] memory _tokens, address _minter) external {\\n        require(msg.sender == minter, \\\"!minter\\\");\\n        for (uint i = 0; i < _tokens.length; i++) {\\n            _whitelist(_tokens[i]);\\n        }\\n        minter = _minter;\\n    }\\n\\n    /// @dev Amount of tokens required to be hold for whitelisting.\\n    function listingFee() external view returns (uint) {\\n        return _listingFee();\\n    }\\n\\n    /// @dev 20% of circulation supply.\\n    function _listingFee() internal view returns (uint) {\\n        return (IERC20(token).totalSupply() - IERC20(ve).totalSupply()) / 5;\\n    }\\n\\n    /// @dev Remove all votes for given tokenId.\\n    function reset(uint _tokenId) external {\\n        require(IVe(ve).isApprovedOrOwner(msg.sender, _tokenId), \\\"!owner\\\");\\n        _reset(_tokenId);\\n        IVe(ve).abstain(_tokenId);\\n    }\\n\\n    function _reset(uint _tokenId) internal {\\n        address[] storage _poolVote = poolVote[_tokenId];\\n        uint _poolVoteCnt = _poolVote.length;\\n        int256 _totalWeight = 0;\\n\\n        for (uint i = 0; i < _poolVoteCnt; i++) {\\n            address _pool = _poolVote[i];\\n            int256 _votes = votes[_tokenId][_pool];\\n            _updateFor(gauges[_pool]);\\n            weights[_pool] -= _votes;\\n            votes[_tokenId][_pool] -= _votes;\\n            if (_votes > 0) {\\n                IBribe(bribes[gauges[_pool]])._withdraw(uint(_votes), _tokenId);\\n                _totalWeight += _votes;\\n            } else {\\n                _totalWeight -= _votes;\\n            }\\n            emit Abstained(_tokenId, _votes);\\n        }\\n        totalWeight -= uint(_totalWeight);\\n        usedWeights[_tokenId] = 0;\\n        delete poolVote[_tokenId];\\n    }\\n\\n    /// @dev Resubmit exist votes for given token. For internal purposes.\\n    function poke(uint _tokenId) external {\\n        address[] memory _poolVote = poolVote[_tokenId];\\n        uint _poolCnt = _poolVote.length;\\n        int256[] memory _weights = new int256[](_poolCnt);\\n\\n        for (uint i = 0; i < _poolCnt; i++) {\\n            _weights[i] = votes[_tokenId][_poolVote[i]];\\n        }\\n\\n        _vote(_tokenId, _poolVote, _weights);\\n    }\\n\\n    function _vote(\\n        uint _tokenId,\\n        address[] memory _poolVote,\\n        int256[] memory _weights\\n    ) internal {\\n        _reset(_tokenId);\\n        uint _poolCnt = _poolVote.length;\\n        int256 _weight = int256(IVe(ve).balanceOfNFT(_tokenId));\\n        int256 _totalVoteWeight = 0;\\n        int256 _totalWeight = 0;\\n        int256 _usedWeight = 0;\\n\\n        for (uint i = 0; i < _poolCnt; i++) {\\n            _totalVoteWeight += _weights[i] > 0 ? _weights[i] : -_weights[i];\\n        }\\n\\n        for (uint i = 0; i < _poolCnt; i++) {\\n            address _pool = _poolVote[i];\\n            address _gauge = gauges[_pool];\\n\\n            int256 _poolWeight = (_weights[i] * _weight) / _totalVoteWeight;\\n            require(votes[_tokenId][_pool] == 0, \\\"duplicate pool\\\");\\n            require(_poolWeight != 0, \\\"zero power\\\");\\n            _updateFor(_gauge);\\n\\n            poolVote[_tokenId].push(_pool);\\n\\n            weights[_pool] += _poolWeight;\\n            votes[_tokenId][_pool] += _poolWeight;\\n            if (_poolWeight > 0) {\\n                IBribe(bribes[_gauge])._deposit(uint(_poolWeight), _tokenId);\\n            } else {\\n                _poolWeight = -_poolWeight;\\n            }\\n            _usedWeight += _poolWeight;\\n            _totalWeight += _poolWeight;\\n            emit Voted(msg.sender, _tokenId, _poolWeight);\\n        }\\n        if (_usedWeight > 0) IVe(ve).voting(_tokenId);\\n        totalWeight += uint(_totalWeight);\\n        usedWeights[_tokenId] = uint(_usedWeight);\\n    }\\n\\n    /// @dev Vote for given pools using a vote power of given tokenId. Reset previous votes.\\n    function vote(\\n        uint tokenId,\\n        address[] calldata _poolVote,\\n        int256[] calldata _weights\\n    ) external {\\n        require(IVe(ve).isApprovedOrOwner(msg.sender, tokenId), \\\"!owner\\\");\\n        require(_poolVote.length == _weights.length, \\\"!arrays\\\");\\n        _vote(tokenId, _poolVote, _weights);\\n    }\\n\\n    /// @dev Add token to whitelist. Only pools with whitelisted tokens can be added to gauge.\\n    function whitelist(address _token, uint _tokenId) external {\\n        require(_tokenId > 0, \\\"!token\\\");\\n        require(msg.sender == IERC721(ve).ownerOf(_tokenId), \\\"!owner\\\");\\n        require(IVe(ve).balanceOfNFT(_tokenId) > _listingFee(), \\\"!power\\\");\\n        _whitelist(_token);\\n    }\\n\\n    function _whitelist(address _token) internal {\\n        require(!isWhitelisted[_token], \\\"already whitelisted\\\");\\n        isWhitelisted[_token] = true;\\n        emit Whitelisted(msg.sender, _token);\\n    }\\n\\n    /// @dev Add a token to a gauge/bribe as possible reward.\\n    function registerRewardToken(\\n        address _token,\\n        address _gaugeOrBribe,\\n        uint _tokenId\\n    ) external {\\n        require(_tokenId > 0, \\\"!token\\\");\\n        require(msg.sender == IERC721(ve).ownerOf(_tokenId), \\\"!owner\\\");\\n        require(IVe(ve).balanceOfNFT(_tokenId) > _listingFee(), \\\"!power\\\");\\n        IMultiRewardsPool(_gaugeOrBribe).registerRewardToken(_token);\\n    }\\n\\n    /// @dev Remove a token from a gauge/bribe allowed rewards list.\\n    function removeRewardToken(\\n        address _token,\\n        address _gaugeOrBribe,\\n        uint _tokenId\\n    ) external {\\n        require(_tokenId > 0, \\\"!token\\\");\\n        require(msg.sender == IERC721(ve).ownerOf(_tokenId), \\\"!owner\\\");\\n        require(IVe(ve).balanceOfNFT(_tokenId) > _listingFee(), \\\"!power\\\");\\n        IMultiRewardsPool(_gaugeOrBribe).removeRewardToken(_token);\\n    }\\n\\n    /// @dev Create gauge for given pool. Only for a pool with whitelisted tokens.\\n    function createGauge(address _pool) external returns (address) {\\n        require(gauges[_pool] == address(0x0), \\\"exists\\\");\\n        require(IFactory(factory).isPair(_pool), \\\"!pool\\\");\\n        (address tokenA, address tokenB) = IPair(_pool).tokens();\\n        require(isWhitelisted[tokenA] && isWhitelisted[tokenB], \\\"!whitelisted\\\");\\n\\n        address[] memory allowedRewards = new address[](3);\\n        allowedRewards[0] = tokenA;\\n        allowedRewards[1] = tokenB;\\n        if (token != tokenA && token != tokenB) {\\n            allowedRewards[2] = token;\\n        }\\n\\n        address _bribe = IBribeFactory(bribeFactory).createBribe(\\n            allowedRewards\\n        );\\n        address _gauge = IGaugeFactory(gaugeFactory).createGauge(\\n            _pool,\\n            _bribe,\\n            ve,\\n            allowedRewards\\n        );\\n        IERC20(token).safeIncreaseAllowance(_gauge, type(uint).max);\\n        bribes[_gauge] = _bribe;\\n        gauges[_pool] = _gauge;\\n        poolForGauge[_gauge] = _pool;\\n        isGauge[_gauge] = true;\\n        _updateFor(_gauge);\\n        pools.push(_pool);\\n        emit GaugeCreated(_gauge, msg.sender, _bribe, _pool);\\n        return _gauge;\\n    }\\n\\n    /// @dev A gauge should be able to attach a token for preventing transfers/withdraws.\\n    function attachTokenToGauge(uint tokenId, address account)\\n        external\\n        override\\n    {\\n        require(isGauge[msg.sender], \\\"!gauge\\\");\\n        if (tokenId > 0) {\\n            IVe(ve).attachToken(tokenId);\\n        }\\n        emit Attach(account, msg.sender, tokenId);\\n    }\\n\\n    /// @dev Emit deposit event for easily handling external actions.\\n    function emitDeposit(\\n        uint tokenId,\\n        address account,\\n        uint amount\\n    ) external override {\\n        require(isGauge[msg.sender], \\\"!gauge\\\");\\n        emit Deposit(account, msg.sender, tokenId, amount);\\n    }\\n\\n    /// @dev Detach given token.\\n    function detachTokenFromGauge(uint tokenId, address account)\\n        external\\n        override\\n    {\\n        require(isGauge[msg.sender], \\\"!gauge\\\");\\n        if (tokenId > 0) {\\n            IVe(ve).detachToken(tokenId);\\n        }\\n        emit Detach(account, msg.sender, tokenId);\\n    }\\n\\n    /// @dev Emit withdraw event for easily handling external actions.\\n    function emitWithdraw(\\n        uint tokenId,\\n        address account,\\n        uint amount\\n    ) external override {\\n        require(isGauge[msg.sender], \\\"!gauge\\\");\\n        emit Withdraw(account, msg.sender, tokenId, amount);\\n    }\\n\\n    /// @dev Length of pools\\n    function poolsLength() external view returns (uint) {\\n        return pools.length;\\n    }\\n\\n    /// @dev Add rewards to this contract. Usually it is VoltMinter.\\n    function notifyRewardAmount(uint amount) external override {\\n        require(amount != 0, \\\"zero amount\\\");\\n        uint _totalWeight = totalWeight;\\n        // without votes rewards can not be added\\n        require(_totalWeight != 0, \\\"!weights\\\");\\n        // transfer the distro in\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\n        // 1e18 adjustment is removed during claim\\n        uint _ratio = (amount * 1e18) / _totalWeight;\\n        if (_ratio > 0) {\\n            index += _ratio;\\n        }\\n        emit NotifyReward(msg.sender, token, amount);\\n    }\\n\\n    /// @dev Update given gauges.\\n    function updateFor(address[] memory _gauges) external {\\n        for (uint i = 0; i < _gauges.length; i++) {\\n            _updateFor(_gauges[i]);\\n        }\\n    }\\n\\n    /// @dev Update gauges by indexes in a range.\\n    function updateForRange(uint start, uint end) public {\\n        for (uint i = start; i < end; i++) {\\n            _updateFor(gauges[pools[i]]);\\n        }\\n    }\\n\\n    /// @dev Update all gauges.\\n    function updateAll() external {\\n        updateForRange(0, pools.length);\\n    }\\n\\n    /// @dev Update reward info for given gauge.\\n    function updateGauge(address _gauge) external {\\n        _updateFor(_gauge);\\n    }\\n\\n    function _updateFor(address _gauge) internal {\\n        address _pool = poolForGauge[_gauge];\\n        int256 _supplied = weights[_pool];\\n        if (_supplied > 0) {\\n            uint _supplyIndex = supplyIndex[_gauge];\\n            // get global index for accumulated distro\\n            uint _index = index;\\n            // update _gauge current position to global position\\n            supplyIndex[_gauge] = _index;\\n            // see if there is any difference that need to be accrued\\n            uint _delta = _index - _supplyIndex;\\n            if (_delta > 0) {\\n                // add accrued difference for each supplied token\\n                uint _share = (uint(_supplied) * _delta) / 1e18;\\n                claimable[_gauge] += _share;\\n            }\\n        } else {\\n            // new users are set to the default global state\\n            supplyIndex[_gauge] = index;\\n        }\\n    }\\n\\n    /// @dev Batch claim rewards from given gauges.\\n    function claimRewards(address[] memory _gauges, address[][] memory _tokens)\\n        external\\n    {\\n        for (uint i = 0; i < _gauges.length; i++) {\\n            IGauge(_gauges[i]).getReward(msg.sender, _tokens[i]);\\n        }\\n    }\\n\\n    /// @dev Batch claim rewards from given bribe contracts for given tokenId.\\n    function claimBribes(\\n        address[] memory _bribes,\\n        address[][] memory _tokens,\\n        uint _tokenId\\n    ) external {\\n        require(IVe(ve).isApprovedOrOwner(msg.sender, _tokenId), \\\"!owner\\\");\\n        for (uint i = 0; i < _bribes.length; i++) {\\n            IBribe(_bribes[i]).getRewardForOwner(_tokenId, _tokens[i]);\\n        }\\n    }\\n\\n    /// @dev Claim fees from given bribes.\\n    function claimFees(\\n        address[] memory _bribes,\\n        address[][] memory _tokens,\\n        uint _tokenId\\n    ) external {\\n        require(IVe(ve).isApprovedOrOwner(msg.sender, _tokenId), \\\"!owner\\\");\\n        for (uint i = 0; i < _bribes.length; i++) {\\n            IBribe(_bribes[i]).getRewardForOwner(_tokenId, _tokens[i]);\\n        }\\n    }\\n\\n    /// @dev Move fees from deposited pools to bribes for given gauges.\\n    function distributeFees(address[] memory _gauges) external {\\n        for (uint i = 0; i < _gauges.length; i++) {\\n            IGauge(_gauges[i]).claimFees();\\n        }\\n    }\\n\\n    /// @dev Get emission from minter and notify rewards for given gauge.\\n    function distribute(address _gauge) external override {\\n        _distribute(_gauge);\\n    }\\n\\n    function _distribute(address _gauge) internal lock {\\n        IMinter(minter).updatePeriod();\\n        _updateFor(_gauge);\\n        uint _claimable = claimable[_gauge];\\n        if (\\n            _claimable > IMultiRewardsPool(_gauge).left(token) &&\\n            _claimable / DURATION > 0\\n        ) {\\n            claimable[_gauge] = 0;\\n            IGauge(_gauge).notifyRewardAmount(token, _claimable);\\n            emit DistributeReward(msg.sender, _gauge, _claimable);\\n        }\\n    }\\n\\n    /// @dev Distribute rewards for all pools.\\n    function distributeAll() external {\\n        uint length = pools.length;\\n        for (uint x; x < length; x++) {\\n            _distribute(gauges[pools[x]]);\\n        }\\n    }\\n\\n    function distributeForPoolsInRange(uint start, uint finish) external {\\n        for (uint x = start; x < finish; x++) {\\n            _distribute(gauges[pools[x]]);\\n        }\\n    }\\n\\n    function distributeForGauges(address[] memory _gauges) external {\\n        for (uint x = 0; x < _gauges.length; x++) {\\n            _distribute(_gauges[x]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07b67d414d397c51caf6b00f0d4023f5b234a454ccd796ae7a4dc5a4a50e6d3d\",\"license\":\"MIT\"},\"contracts/interface/IBribe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IBribe {\\n    function notifyRewardAmount(address token, uint amount) external;\\n\\n    function _deposit(uint amount, uint tokenId) external;\\n\\n    function _withdraw(uint amount, uint tokenId) external;\\n\\n    function getRewardForOwner(uint tokenId, address[] memory tokens) external;\\n}\\n\",\"keccak256\":\"0xcf242dd62b6301060e132cc868d817cced4bb4bd21c69e4079cba92e30d333f1\",\"license\":\"MIT\"},\"contracts/interface/IBribeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IBribeFactory {\\n    function createBribe(address[] memory _allowedRewardTokens)\\n        external\\n        returns (address);\\n}\\n\",\"keccak256\":\"0x1f360e0ae33b8d5dd8c6a68c0fa2f4fe604c6a91dc143b1e966950a139edc7d8\",\"license\":\"MIT\"},\"contracts/interface/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8609505e815e06dac85e0cc77ad7bbb641ceec24e5c8e012483e8576dd09ce09\",\"license\":\"MIT\"},\"contracts/interface/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0x224e032b714ae191e5e419054a144402b01597e8b2eb36db4f6e38d3e42b0db7\",\"license\":\"MIT\"},\"contracts/interface/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed approved,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId)\\n        external\\n        view\\n        returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6983264dae1151fd2451f1cb2e4cb9a369f6dd25577600d1733fe6e4da0dc35d\",\"license\":\"MIT\"},\"contracts/interface/IFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IFactory {\\n    function treasury() external view returns (address);\\n\\n    function isPair(address pair) external view returns (bool);\\n\\n    function getInitializable()\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            bool\\n        );\\n\\n    function isPaused() external view returns (bool);\\n\\n    function pairCodeHash() external pure returns (bytes32);\\n\\n    function getPair(\\n        address tokenA,\\n        address token,\\n        bool stable\\n    ) external view returns (address);\\n\\n    function createPair(\\n        address tokenA,\\n        address tokenB,\\n        bool stable\\n    ) external returns (address pair);\\n}\\n\",\"keccak256\":\"0x22270dbb92d05a3dae6d38084db2ce1db27dee00af111b6502c34efe7106508b\",\"license\":\"MIT\"},\"contracts/interface/IGauge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IGauge {\\n    function notifyRewardAmount(address token, uint amount) external;\\n\\n    function getReward(address account, address[] memory tokens) external;\\n\\n    function claimFees() external returns (uint claimed0, uint claimed1);\\n}\\n\",\"keccak256\":\"0x182048b6ade43597025a2cbfc86979dcaed29d83abfaa48815efda839c7d6d33\",\"license\":\"MIT\"},\"contracts/interface/IGaugeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IGaugeFactory {\\n    function createGauge(\\n        address _pool,\\n        address _bribe,\\n        address _ve,\\n        address[] memory _allowedRewardTokens\\n    ) external returns (address);\\n\\n    function createGaugeSingle(\\n        address _pool,\\n        address _bribe,\\n        address _ve,\\n        address _voter,\\n        address[] memory _allowedRewardTokens\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0xbd8b9b1868d559e68e5c28894a7ab46434cbcfbc712713bd6ff6315243af0871\",\"license\":\"MIT\"},\"contracts/interface/IMinter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IMinter {\\n    function updatePeriod() external returns (uint);\\n}\\n\",\"keccak256\":\"0x9a1754a722d904de8ebd0d66d74707c0b5b8ebd56268fd1e7b247ab621d7c58d\",\"license\":\"MIT\"},\"contracts/interface/IMultiRewardsPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IMultiRewardsPool {\\n    function underlying() external view returns (address);\\n\\n    function derivedSupply() external view returns (uint);\\n\\n    function derivedBalances(address account) external view returns (uint);\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function balanceOf(address account) external view returns (uint);\\n\\n    function rewardTokens(uint id) external view returns (address);\\n\\n    function isRewardToken(address token) external view returns (bool);\\n\\n    function rewardTokensLength() external view returns (uint);\\n\\n    function derivedBalance(address account) external view returns (uint);\\n\\n    function left(address token) external view returns (uint);\\n\\n    function earned(address token, address account)\\n        external\\n        view\\n        returns (uint);\\n\\n    function registerRewardToken(address token) external;\\n\\n    function removeRewardToken(address token) external;\\n}\\n\",\"keccak256\":\"0x2fff1488dc483fe0c9ccc3642c522c94868e96d9173304f8fe404d91ad3c4f21\",\"license\":\"MIT\"},\"contracts/interface/IPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IPair {\\n    // Structure to capture time period obervations every 30 minutes, used for local oracles\\n    struct Observation {\\n        uint timestamp;\\n        uint reserve0Cumulative;\\n        uint reserve1Cumulative;\\n    }\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint value,\\n        uint deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function swap(\\n        uint amount0Out,\\n        uint amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n\\n    function mint(address to) external returns (uint liquidity);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 _reserve0,\\n            uint112 _reserve1,\\n            uint32 _blockTimestampLast\\n        );\\n\\n    function getAmountOut(uint, address) external view returns (uint);\\n\\n    function claimFees() external returns (uint, uint);\\n\\n    function tokens() external view returns (address, address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function stable() external view returns (bool);\\n\\n    function metadata()\\n        external\\n        view\\n        returns (\\n            uint dec0,\\n            uint dec1,\\n            uint r0,\\n            uint r1,\\n            bool st,\\n            address t0,\\n            address t1\\n        );\\n}\\n\",\"keccak256\":\"0x978d3132f8f5f6752533d94a3024f25ced205df57475d5e2d7c09f301dd7c762\",\"license\":\"MIT\"},\"contracts/interface/IVe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IVe {\\n    enum DepositType {\\n        DEPOSIT_FOR_TYPE,\\n        CREATE_LOCK_TYPE,\\n        INCREASE_LOCK_AMOUNT,\\n        INCREASE_UNLOCK_TIME,\\n        MERGE_TYPE\\n    }\\n\\n    struct Point {\\n        int128 bias;\\n        int128 slope; // # -dweight / dt\\n        uint ts;\\n        uint blk; // block\\n    }\\n    /* We cannot really do block numbers per se b/c slope is per time, not per block\\n     * and per block could be fairly bad b/c Ethereum changes blocktimes.\\n     * What we can do is to extrapolate ***At functions */\\n\\n    struct LockedBalance {\\n        int128 amount;\\n        uint end;\\n    }\\n\\n    function token() external view returns (address);\\n\\n    function balanceOfNFT(uint) external view returns (uint);\\n\\n    function isApprovedOrOwner(address, uint) external view returns (bool);\\n\\n    function createLockFor(\\n        uint,\\n        uint,\\n        address\\n    ) external returns (uint);\\n\\n    function userPointEpoch(uint tokenId) external view returns (uint);\\n\\n    function epoch() external view returns (uint);\\n\\n    function userPointHistory(uint tokenId, uint loc)\\n        external\\n        view\\n        returns (Point memory);\\n\\n    function pointHistory(uint loc) external view returns (Point memory);\\n\\n    function checkpoint() external;\\n\\n    function depositFor(uint tokenId, uint value) external;\\n\\n    function attachToken(uint tokenId) external;\\n\\n    function detachToken(uint tokenId) external;\\n\\n    function voting(uint tokenId) external;\\n\\n    function abstain(uint tokenId) external;\\n}\\n\",\"keccak256\":\"0x93a173b039792ac393165aab7a92882d0cc1d82257c4dfe13ee26631fe46e52a\",\"license\":\"MIT\"},\"contracts/interface/IVoter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IVoter {\\n    function ve() external view returns (address);\\n\\n    function attachTokenToGauge(uint _tokenId, address account) external;\\n\\n    function detachTokenFromGauge(uint _tokenId, address account) external;\\n\\n    function emitDeposit(\\n        uint _tokenId,\\n        address account,\\n        uint amount\\n    ) external;\\n\\n    function emitWithdraw(\\n        uint _tokenId,\\n        address account,\\n        uint amount\\n    ) external;\\n\\n    function distribute(address _gauge) external;\\n\\n    function notifyRewardAmount(uint amount) external;\\n}\\n\",\"keccak256\":\"0x3585c496f0f5c40e7146bd9878293c200d38948fa20e162c1f7f48b7d475338b\",\"license\":\"MIT\"},\"contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n        (bool success, bytes memory returndata) = target.call(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return\\n            functionDelegateCall(\\n                target,\\n                data,\\n                \\\"Address: low-level delegate call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x284fcdaef2f20ec54759bfb0821ee3a3459a1f0bc302b29e7fcc3c2f42e728df\",\"license\":\"MIT\"},\"contracts/lib/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x38183be1332f4c833a8279b7d913f523431e50aa59f4f513020b82628c7d6c0e\",\"license\":\"MIT\"},\"contracts/lib/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../interface/IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint value\\n    ) internal {\\n        uint newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(\\n            data,\\n            \\\"SafeERC20: low-level call failed\\\"\\n        );\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(\\n                abi.decode(returndata, (bool)),\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd09403b2f52a045a82861c53059fb835daabe908fd774f948370979588b3fe1a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600160005534801561001557600080fd5b50613842806100256000396000f3fe608060405234801561001057600080fd5b50600436106102a05760003560e01c80637715ee7511610167578063ac4afa38116100ce578063ddbe883c11610087578063ddbe883c14610663578063e380fcad14610676578063ea94ee4414610696578063eb4a78e0146106a9578063fc0c546a146106bc578063fecdad60146106cf57600080fd5b8063ac4afa38146105c3578063b9a09fd5146105d6578063c45a0155146105ff578063c527ee1f14610612578063d23254b414610625578063d560b0d71461065057600080fd5b8063a5f4301e11610120578063a5f4301e1461051e578063a61c713a14610531578063a7cac84614610544578063a86a366d14610564578063a8c5d95a14610577578063aa79979b146105a057600080fd5b80637715ee75146104a957806379e93824146104bc5780637e1ddf64146104dc57806396c82e57146104ef57806398fc55d8146104f85780639b6a9d721461050b57600080fd5b80633c6b16ab1161020b57806353f38e6b116101c457806353f38e6b1461044257806363453ae114610455578063666256aa14610468578063698473e31461047b5780636a1b7ecc1461048e5780636ecbe38a1461049657600080fd5b80633c6b16ab146103d9578063402914f5146103ec578063411b1f771461040c578063436596c41461041f5780634c6e62b61461042757806353d786931461043a57600080fd5b806320b1cb6f1161025d57806320b1cb6f146103525780632716ae66146103655780632986c0e514610377578063310bd74b1461038057806332145f90146103935780633af32abf146103a657600080fd5b806306d6a1b2146102a557806307546172146102eb5780630d52333c146102fe5780631459457a146103115780631f850716146103265780632025e9b81461033f575b600080fd5b6102ce6102b3366004612e81565b600a602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6006546102ce906001600160a01b031681565b6004546102ce906001600160a01b031681565b61032461031f366004612e9e565b6106e2565b005b6001546102ce906201000090046001600160a01b031681565b61032461034d366004612fee565b610890565b6103246103603660046130ab565b6108d4565b6008545b6040519081526020016102e2565b61036960125481565b61032461038e36600461310f565b61098a565b6103246103a136600461310f565b610a8d565b6103c96103b4366004612e81565b60116020526000908152604090205460ff1681565b60405190151581526020016102e2565b6103246103e736600461310f565b610bdd565b6103696103fa366004612e81565b60146020526000908152604090205481565b61032461041a366004613128565b610cfb565b610324610dd9565b610324610435366004613158565b610e43565b610324610ffd565b610324610450366004613199565b61100e565b610324610463366004612e81565b611044565b6103246104763660046131bb565b611050565b610324610489366004613128565b611195565b61036961126a565b6103246104a4366004612e81565b611279565b6103246104b73660046131bb565b611282565b6103696104ca36600461310f565b600f6020526000908152604090205481565b6103246104ea366004613228565b6113c7565b61036960075481565b61032461050636600461326f565b61146f565b610324610519366004613199565b6115d1565b6102ce61052c366004612e81565b611637565b61032461053f36600461329b565b611b25565b610369610552366004612e81565b600c6020526000908152604090205481565b6102ce610572366004613199565b611b97565b6102ce610585366004612e81565b600b602052600090815260409020546001600160a01b031681565b6103c96105ae366004612e81565b60106020526000908152604090205460ff1681565b6102ce6105d136600461310f565b611bcf565b6102ce6105e4366004612e81565b6009602052600090815260409020546001600160a01b031681565b6002546102ce906001600160a01b031681565b610324610620366004612fee565b611bf9565b610369610633366004613128565b600d60209081526000928352604080842090915290825290205481565b61032461065e366004612fee565b611c96565b610324610671366004613158565b611cd6565b610369610684366004612e81565b60136020526000908152604090205481565b6103246106a436600461329b565b611e5d565b6005546102ce906001600160a01b031681565b6003546102ce906001600160a01b031681565b6103246106dd36600461330e565b611ecf565b600154610100900460ff166106fd5760015460ff1615610701565b303b155b6107695760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b600154610100900460ff1615801561078b576001805461ffff19166101011790555b6001805462010000600160b01b031916620100006001600160a01b0389811691820292909217909255600280546001600160a01b03191691881691909117905560408051637e062a3560e11b8152905163fc0c546a916004808201926020929091908290030181865afa158015610806573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082a9190613388565b600380546001600160a01b03199081166001600160a01b03938416179091556004805482168784161790556005805482168684161790556006805490911691841691909117905560016000558015610888576001805461ff00191690555b505050505050565b60005b81518110156108d0576108be8282815181106108b1576108b16133a5565b602002602001015161200a565b806108c8816133d1565b915050610893565b5050565b60005b8251811015610985578281815181106108f2576108f26133a5565b60200260200101516001600160a01b03166331279d3d3384848151811061091b5761091b6133a5565b60200260200101516040518363ffffffff1660e01b815260040161094092919061342e565b600060405180830381600087803b15801561095a57600080fd5b505af115801561096e573d6000803e3d6000fd5b50505050808061097d906133d1565b9150506108d7565b505050565b60015460405163430c208160e01b815233600482015260248101839052620100009091046001600160a01b03169063430c208190604401602060405180830381865afa1580156109de573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a029190613452565b610a1e5760405162461bcd60e51b815260040161076090613474565b610a2781612236565b60015460405163c1f0fb9f60e01b815260048101839052620100009091046001600160a01b03169063c1f0fb9f90602401600060405180830381600087803b158015610a7257600080fd5b505af1158015610a86573d6000803e3d6000fd5b5050505050565b6000818152600e6020908152604080832080548251818502810185019093528083529192909190830182828015610aed57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610acf575b5050505050905060008151905060008167ffffffffffffffff811115610b1557610b15612f0f565b604051908082528060200260200182016040528015610b3e578160200160208202803683370190505b50905060005b82811015610bcb57600d60008681526020019081526020016000206000858381518110610b7357610b736133a5565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054828281518110610bae57610bae6133a5565b602090810291909101015280610bc3816133d1565b915050610b44565b50610bd7848483612446565b50505050565b80600003610c1b5760405162461bcd60e51b815260206004820152600b60248201526a1e995c9bc8185b5bdd5b9d60aa1b6044820152606401610760565b6007546000819003610c5a5760405162461bcd60e51b8152602060048201526008602482015267217765696768747360c01b6044820152606401610760565b600354610c72906001600160a01b03163330856128ab565b600081610c8784670de0b6b3a7640000613494565b610c9191906134c9565b90508015610cb1578060126000828254610cab91906134dd565b90915550505b6003546040518481526001600160a01b039091169033907ff70d5c697de7ea828df48e5c4573cb2194c659f1901f70110c52b066dcf50826906020015b60405180910390a3505050565b3360009081526010602052604090205460ff16610d2a5760405162461bcd60e51b8152600401610760906134f5565b8115610d9457600154604051634c3c15a760e11b815260048101849052620100009091046001600160a01b0316906398782b4e90602401600060405180830381600087803b158015610d7b57600080fd5b505af1158015610d8f573d6000803e3d6000fd5b505050505b60405182815233906001600160a01b038316907fae268d9aab12f3605f58efd74fd3801fa812b03fdb44317eb70f46dff0e19e22906020015b60405180910390a35050565b60085460005b818110156108d057610e316009600060088481548110610e0157610e016133a5565b60009182526020808320909101546001600160a01b0390811684529083019390935260409091019020541661200a565b80610e3b816133d1565b915050610ddf565b60008111610e635760405162461bcd60e51b815260040161076090613515565b6001546040516331a9108f60e11b815260048101839052620100009091046001600160a01b031690636352211e90602401602060405180830381865afa158015610eb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed59190613388565b6001600160a01b0316336001600160a01b031614610f055760405162461bcd60e51b815260040161076090613474565b610f0d612916565b6001546040516339f890b560e21b815260048101849052620100009091046001600160a01b03169063e7e242d490602401602060405180830381865afa158015610f5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7f9190613535565b11610f9c5760405162461bcd60e51b81526004016107609061354e565b604051631c8db79360e31b81526001600160a01b03848116600483015283169063e46dbc98906024015b600060405180830381600087803b158015610fe057600080fd5b505af1158015610ff4573d6000803e3d6000fd5b50505050505050565b60085461100c906000906115d1565b565b815b81811015610985576110326009600060088481548110610e0157610e016133a5565b8061103c816133d1565b915050611010565b61104d8161200a565b50565b60015460405163430c208160e01b815233600482015260248101839052620100009091046001600160a01b03169063430c208190604401602060405180830381865afa1580156110a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c89190613452565b6110e45760405162461bcd60e51b815260040161076090613474565b60005b8351811015610bd757838181518110611102576111026133a5565b60200260200101516001600160a01b031663a7852afa8385848151811061112b5761112b6133a5565b60200260200101516040518363ffffffff1660e01b815260040161115092919061356e565b600060405180830381600087803b15801561116a57600080fd5b505af115801561117e573d6000803e3d6000fd5b50505050808061118d906133d1565b9150506110e7565b3360009081526010602052604090205460ff166111c45760405162461bcd60e51b8152600401610760906134f5565b811561122d576001546040516246b3bd60e81b815260048101849052620100009091046001600160a01b0316906346b3bd0090602401600060405180830381600087803b15801561121457600080fd5b505af1158015611228573d6000803e3d6000fd5b505050505b60405182815233906001600160a01b038316907f60940192810a6fb3bce3fd3e2e3a13fd6ccc7605e963fb87ee971aba829989bd90602001610dcd565b6000611274612916565b905090565b61104d81612a1c565b60015460405163430c208160e01b815233600482015260248101839052620100009091046001600160a01b03169063430c208190604401602060405180830381865afa1580156112d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112fa9190613452565b6113165760405162461bcd60e51b815260040161076090613474565b60005b8351811015610bd757838181518110611334576113346133a5565b60200260200101516001600160a01b031663a7852afa8385848151811061135d5761135d6133a5565b60200260200101516040518363ffffffff1660e01b815260040161138292919061356e565b600060405180830381600087803b15801561139c57600080fd5b505af11580156113b0573d6000803e3d6000fd5b5050505080806113bf906133d1565b915050611319565b6006546001600160a01b0316331461140b5760405162461bcd60e51b815260206004820152600760248201526610b6b4b73a32b960c91b6044820152606401610760565b60005b825181101561144b5761143983828151811061142c5761142c6133a5565b6020026020010151612aff565b80611443816133d1565b91505061140e565b50600680546001600160a01b0319166001600160a01b039290921691909117905550565b6000811161148f5760405162461bcd60e51b815260040161076090613515565b6001546040516331a9108f60e11b815260048101839052620100009091046001600160a01b031690636352211e90602401602060405180830381865afa1580156114dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115019190613388565b6001600160a01b0316336001600160a01b0316146115315760405162461bcd60e51b815260040161076090613474565b611539612916565b6001546040516339f890b560e21b815260048101849052620100009091046001600160a01b03169063e7e242d490602401602060405180830381865afa158015611587573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ab9190613535565b116115c85760405162461bcd60e51b81526004016107609061354e565b6108d082612aff565b815b818110156109855761162560096000600884815481106115f5576115f56133a5565b60009182526020808320909101546001600160a01b03908116845290830193909352604090910190205416612a1c565b8061162f816133d1565b9150506115d3565b6001600160a01b038181166000908152600960205260408120549091161561168a5760405162461bcd60e51b815260206004820152600660248201526565786973747360d01b6044820152606401610760565b60025460405163e5e31b1360e01b81526001600160a01b0384811660048301529091169063e5e31b1390602401602060405180830381865afa1580156116d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116f89190613452565b61172c5760405162461bcd60e51b8152602060048201526005602482015264085c1bdbdb60da1b6044820152606401610760565b600080836001600160a01b0316639d63848a6040518163ffffffff1660e01b81526004016040805180830381865afa15801561176c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117909190613587565b6001600160a01b038216600090815260116020526040902054919350915060ff1680156117d557506001600160a01b03811660009081526011602052604090205460ff165b6118105760405162461bcd60e51b815260206004820152600c60248201526b085dda1a5d195b1a5cdd195960a21b6044820152606401610760565b60408051600380825260808201909252600091602082016060803683370190505090508281600081518110611847576118476133a5565b60200260200101906001600160a01b031690816001600160a01b031681525050818160018151811061187b5761187b6133a5565b6001600160a01b0392831660209182029290920101526003548116908416148015906118b557506003546001600160a01b03838116911614155b156118ff5760035481516001600160a01b0390911690829060029081106118de576118de6133a5565b60200260200101906001600160a01b031690816001600160a01b0316815250505b60055460405163897cd6b360e01b81526000916001600160a01b03169063897cd6b3906119309085906004016135b6565b6020604051808303816000875af115801561194f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119739190613388565b600480546001546040516358c14b6560e01b81529394506000936001600160a01b03928316936358c14b65936119ba938d93899362010000909204909216918a91016135c9565b6020604051808303816000875af11580156119d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119fd9190613388565b600354909150611a19906001600160a01b031682600019612bab565b6001600160a01b038082166000818152600b6020908152604080832080548689166001600160a01b031991821617909155948c16808452600983528184208054871686179055938352600a8252808320805490951690931790935560109092529020805460ff19166001179055611a8f81612a1c565b600880546001810182556000919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30180546001600160a01b0319166001600160a01b03898116918217909255604051338152909184811691908416907f48d3c521fd0d5541640f58c6d6381eed7cb2e8c9df421ae165a4f4c2d221ee0d9060200160405180910390a49695505050505050565b3360009081526010602052604090205460ff16611b545760405162461bcd60e51b8152600401610760906134f5565b604080518481526020810183905233916001600160a01b038516917fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d79101610cee565b600e6020528160005260406000208181548110611bb357600080fd5b6000918252602090912001546001600160a01b03169150829050565b60088181548110611bdf57600080fd5b6000918252602090912001546001600160a01b0316905081565b60005b81518110156108d057818181518110611c1757611c176133a5565b60200260200101516001600160a01b031663d294f0936040518163ffffffff1660e01b815260040160408051808303816000875af1158015611c5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c819190613607565b50508080611c8e906133d1565b915050611bfc565b60005b81518110156108d057611cc4828281518110611cb757611cb76133a5565b6020026020010151612a1c565b80611cce816133d1565b915050611c99565b60008111611cf65760405162461bcd60e51b815260040161076090613515565b6001546040516331a9108f60e11b815260048101839052620100009091046001600160a01b031690636352211e90602401602060405180830381865afa158015611d44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d689190613388565b6001600160a01b0316336001600160a01b031614611d985760405162461bcd60e51b815260040161076090613474565b611da0612916565b6001546040516339f890b560e21b815260048101849052620100009091046001600160a01b03169063e7e242d490602401602060405180830381865afa158015611dee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e129190613535565b11611e2f5760405162461bcd60e51b81526004016107609061354e565b604051633d509c9760e01b81526001600160a01b038481166004830152831690633d509c9790602401610fc6565b3360009081526010602052604090205460ff16611e8c5760405162461bcd60e51b8152600401610760906134f5565b604080518481526020810183905233916001600160a01b038516917ff341246adaac6f497bc2a656f546ab9e182111d630394f0c57c710a59a2cb5679101610cee565b60015460405163430c208160e01b815233600482015260248101879052620100009091046001600160a01b03169063430c208190604401602060405180830381865afa158015611f23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f479190613452565b611f635760405162461bcd60e51b815260040161076090613474565b828114611f9c5760405162461bcd60e51b81526020600482015260076024820152662161727261797360c81b6044820152606401610760565b610a86858585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060408051602080890282810182019093528882529093508892508791829185019084908082843760009201919091525061244692505050565b60005460011461204d5760405162461bcd60e51b815260206004820152600e60248201526d1499595b9d1c985b9d0818d85b1b60921b6044820152606401610760565b6002600081905550600660009054906101000a90046001600160a01b03166001600160a01b031663a83627de6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156120aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ce9190613535565b506120d881612a1c565b6001600160a01b0381811660008181526014602052604090819020546003549151634cde602960e11b81529190931660048201526399bcc05290602401602060405180830381865afa158015612132573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121569190613535565b811180156121705750600061216e62093a80836134c9565b115b1561222d576001600160a01b0382811660008181526014602052604080822091909155600354905163b66503cf60e01b815292166004830152602482018390529063b66503cf90604401600060405180830381600087803b1580156121d457600080fd5b505af11580156121e8573d6000803e3d6000fd5b50506040518381526001600160a01b03851692503391507f4fa9693cae526341d334e2862ca2413b2e503f1266255f9e0869fb36e6d89b179060200160405180910390a35b50506001600055565b6000818152600e6020526040812080549091805b8281101561240a576000848281548110612266576122666133a5565b6000918252602080832090910154888352600d825260408084206001600160a01b0392831680865290845281852054600990945293205492935090916122ac9116612a1c565b6001600160a01b0382166000908152600c6020526040812080548392906122d490849061362b565b90915550506000878152600d602090815260408083206001600160a01b03861684529091528120805483929061230b90849061362b565b909155505060008113156123af576001600160a01b0382811660009081526009602090815260408083205484168352600b9091529081902054905163278afc8b60e21b815260048101849052602481018a9052911690639e2bf22c90604401600060405180830381600087803b15801561238457600080fd5b505af1158015612398573d6000803e3d6000fd5b5050505080846123a8919061366a565b93506123bc565b6123b9818561362b565b93505b60408051888152602081018390527f6b3894ce60b9bbe9d93f1a4e6fc25b6b93cd8222e73ab6348d79c596f5b51de9910160405180910390a150508080612402906133d1565b91505061224a565b50806007600082825461241d91906136ab565b90915550506000848152600f60209081526040808320839055600e9091528120610bd791612e3a565b61244f83612236565b81516001546040516339f890b560e21b8152600481018690526000916201000090046001600160a01b03169063e7e242d490602401602060405180830381865afa1580156124a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124c59190613535565b90506000806000805b858110156125585760008782815181106124ea576124ea6133a5565b60200260200101511361251f57868181518110612509576125096133a5565b602002602001015161251a906136c2565b61253a565b868181518110612531576125316133a5565b60200260200101515b612544908561366a565b935080612550816133d1565b9150506124ce565b5060005b8581101561280b576000888281518110612578576125786133a5565b6020908102919091018101516001600160a01b038082166000908152600990935260408320548b51929450169190879089908c90879081106125bc576125bc6133a5565b60200260200101516125ce91906136de565b6125d89190613763565b60008d8152600d602090815260408083206001600160a01b03881684529091529020549091501561263c5760405162461bcd60e51b815260206004820152600e60248201526d191d5c1b1a58d85d19481c1bdbdb60921b6044820152606401610760565b806000036126795760405162461bcd60e51b815260206004820152600a6024820152693d32b937903837bbb2b960b11b6044820152606401610760565b61268282612a1c565b60008c8152600e6020908152604080832080546001810182559084528284200180546001600160a01b0319166001600160a01b0388169081179091558352600c909152812080548392906126d790849061366a565b909155505060008c8152600d602090815260408083206001600160a01b03871684529091528120805483929061270e90849061366a565b90915550506000811315612795576001600160a01b038083166000908152600b60205260409081902054905163f320772360e01b815260048101849052602481018f905291169063f320772390604401600060405180830381600087803b15801561277857600080fd5b505af115801561278c573d6000803e3d6000fd5b505050506127a1565b61279e816136c2565b90505b6127ab818661366a565b94506127b7818761366a565b604080518e81526020810184905291975033917f1263a2295e53acd6ef8f655b8afc11fa0f2cf11925be7aa1757d741ef32a926c910160405180910390a25050508080612803906133d1565b91505061255c565b5060008113156128795760015460405163fd4a77f160e01b8152600481018a9052620100009091046001600160a01b03169063fd4a77f190602401600060405180830381600087803b15801561286057600080fd5b505af1158015612874573d6000803e3d6000fd5b505050505b816007600082825461288b91906134dd565b90915550506000978852600f602052604090972096909655505050505050565b6040516001600160a01b0380851660248301528316604482015260648101829052610bd79085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612c5d565b60006005600160029054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561296d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129919190613535565b600360009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156129e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a089190613535565b612a1291906136ab565b61127491906134c9565b6001600160a01b038082166000908152600a6020908152604080832054909316808352600c9091529181205490811315612ade576001600160a01b038316600090815260136020526040812080546012549182905591612a7c83836136ab565b90508015610888576000670de0b6b3a7640000612a998387613494565b612aa391906134c9565b6001600160a01b038816600090815260146020526040812080549293508392909190612ad09084906134dd565b909155505050505050505050565b6012546001600160a01b038416600090815260136020526040902055505050565b6001600160a01b03811660009081526011602052604090205460ff1615612b5e5760405162461bcd60e51b8152602060048201526013602482015272185b1c9958591e481dda1a5d195b1a5cdd1959606a1b6044820152606401610760565b6001600160a01b038116600081815260116020526040808220805460ff191660011790555133917f6661a7108aecd07864384529117d96c319c1163e3010c01390f6b704726e07de91a350565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015612bfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c209190613535565b612c2a91906134dd565b6040516001600160a01b038516602482015260448101829052909150610bd790859063095ea7b360e01b906064016128df565b6000612cb2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612d2f9092919063ffffffff16565b8051909150156109855780806020019051810190612cd09190613452565b6109855760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610760565b60606001600160a01b0384163b612d885760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610760565b600080856001600160a01b031685604051612da391906137bd565b6000604051808303816000865af19150503d8060008114612de0576040519150601f19603f3d011682016040523d82523d6000602084013e612de5565b606091505b5091509150612df5828286612e01565b925050505b9392505050565b60608315612e10575081612dfa565b825115612e205782518084602001fd5b8160405162461bcd60e51b815260040161076091906137d9565b508054600082559060005260206000209081019061104d91905b80821115612e685760008155600101612e54565b5090565b6001600160a01b038116811461104d57600080fd5b600060208284031215612e9357600080fd5b8135612dfa81612e6c565b600080600080600060a08688031215612eb657600080fd5b8535612ec181612e6c565b94506020860135612ed181612e6c565b93506040860135612ee181612e6c565b92506060860135612ef181612e6c565b91506080860135612f0181612e6c565b809150509295509295909350565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612f4e57612f4e612f0f565b604052919050565b600067ffffffffffffffff821115612f7057612f70612f0f565b5060051b60200190565b600082601f830112612f8b57600080fd5b81356020612fa0612f9b83612f56565b612f25565b82815260059290921b84018101918181019086841115612fbf57600080fd5b8286015b84811015612fe3578035612fd681612e6c565b8352918301918301612fc3565b509695505050505050565b60006020828403121561300057600080fd5b813567ffffffffffffffff81111561301757600080fd5b61302384828501612f7a565b949350505050565b600082601f83011261303c57600080fd5b8135602061304c612f9b83612f56565b82815260059290921b8401810191818101908684111561306b57600080fd5b8286015b84811015612fe357803567ffffffffffffffff81111561308f5760008081fd5b61309d8986838b0101612f7a565b84525091830191830161306f565b600080604083850312156130be57600080fd5b823567ffffffffffffffff808211156130d657600080fd5b6130e286838701612f7a565b935060208501359150808211156130f857600080fd5b506131058582860161302b565b9150509250929050565b60006020828403121561312157600080fd5b5035919050565b6000806040838503121561313b57600080fd5b82359150602083013561314d81612e6c565b809150509250929050565b60008060006060848603121561316d57600080fd5b833561317881612e6c565b9250602084013561318881612e6c565b929592945050506040919091013590565b600080604083850312156131ac57600080fd5b50508035926020909101359150565b6000806000606084860312156131d057600080fd5b833567ffffffffffffffff808211156131e857600080fd5b6131f487838801612f7a565b9450602086013591508082111561320a57600080fd5b506132178682870161302b565b925050604084013590509250925092565b6000806040838503121561323b57600080fd5b823567ffffffffffffffff81111561325257600080fd5b61325e85828601612f7a565b925050602083013561314d81612e6c565b6000806040838503121561328257600080fd5b823561328d81612e6c565b946020939093013593505050565b6000806000606084860312156132b057600080fd5b83359250602084013561318881612e6c565b60008083601f8401126132d457600080fd5b50813567ffffffffffffffff8111156132ec57600080fd5b6020830191508360208260051b850101111561330757600080fd5b9250929050565b60008060008060006060868803121561332657600080fd5b85359450602086013567ffffffffffffffff8082111561334557600080fd5b61335189838a016132c2565b9096509450604088013591508082111561336a57600080fd5b50613377888289016132c2565b969995985093965092949392505050565b60006020828403121561339a57600080fd5b8151612dfa81612e6c565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016133e3576133e36133bb565b5060010190565b600081518084526020808501945080840160005b838110156134235781516001600160a01b0316875295820195908201906001016133fe565b509495945050505050565b6001600160a01b0383168152604060208201819052600090613023908301846133ea565b60006020828403121561346457600080fd5b81518015158114612dfa57600080fd5b60208082526006908201526510b7bbb732b960d11b604082015260600190565b60008160001904831182151516156134ae576134ae6133bb565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826134d8576134d86134b3565b500490565b600082198211156134f0576134f06133bb565b500190565b60208082526006908201526521676175676560d01b604082015260600190565b60208082526006908201526510ba37b5b2b760d11b604082015260600190565b60006020828403121561354757600080fd5b5051919050565b60208082526006908201526510b837bbb2b960d11b604082015260600190565b82815260406020820152600061302360408301846133ea565b6000806040838503121561359a57600080fd5b82516135a581612e6c565b602084015190925061314d81612e6c565b602081526000612dfa60208301846133ea565b6001600160a01b0385811682528481166020830152831660408201526080606082018190526000906135fd908301846133ea565b9695505050505050565b6000806040838503121561361a57600080fd5b505080516020909101519092909150565b60008083128015600160ff1b850184121615613649576136496133bb565b6001600160ff1b0384018313811615613664576136646133bb565b50500390565b600080821280156001600160ff1b038490038513161561368c5761368c6133bb565b600160ff1b83900384128116156136a5576136a56133bb565b50500190565b6000828210156136bd576136bd6133bb565b500390565b6000600160ff1b82016136d7576136d76133bb565b5060000390565b60006001600160ff1b0381841382841380821686840486111615613704576137046133bb565b600160ff1b6000871282811687830589121615613723576137236133bb565b6000871292508782058712848416161561373f5761373f6133bb565b87850587128184161615613755576137556133bb565b505050929093029392505050565b600082613772576137726134b3565b600160ff1b82146000198414161561378c5761378c6133bb565b500590565b60005b838110156137ac578181015183820152602001613794565b83811115610bd75750506000910152565b600082516137cf818460208701613791565b9190910192915050565b60208152600082518060208401526137f8816040850160208701613791565b601f01601f1916919091016040019291505056fea2646970667358221220e53c210bf0c6323f5c4560540bac7dd80f2e5b5315b490318b3edc9472268da064736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102a05760003560e01c80637715ee7511610167578063ac4afa38116100ce578063ddbe883c11610087578063ddbe883c14610663578063e380fcad14610676578063ea94ee4414610696578063eb4a78e0146106a9578063fc0c546a146106bc578063fecdad60146106cf57600080fd5b8063ac4afa38146105c3578063b9a09fd5146105d6578063c45a0155146105ff578063c527ee1f14610612578063d23254b414610625578063d560b0d71461065057600080fd5b8063a5f4301e11610120578063a5f4301e1461051e578063a61c713a14610531578063a7cac84614610544578063a86a366d14610564578063a8c5d95a14610577578063aa79979b146105a057600080fd5b80637715ee75146104a957806379e93824146104bc5780637e1ddf64146104dc57806396c82e57146104ef57806398fc55d8146104f85780639b6a9d721461050b57600080fd5b80633c6b16ab1161020b57806353f38e6b116101c457806353f38e6b1461044257806363453ae114610455578063666256aa14610468578063698473e31461047b5780636a1b7ecc1461048e5780636ecbe38a1461049657600080fd5b80633c6b16ab146103d9578063402914f5146103ec578063411b1f771461040c578063436596c41461041f5780634c6e62b61461042757806353d786931461043a57600080fd5b806320b1cb6f1161025d57806320b1cb6f146103525780632716ae66146103655780632986c0e514610377578063310bd74b1461038057806332145f90146103935780633af32abf146103a657600080fd5b806306d6a1b2146102a557806307546172146102eb5780630d52333c146102fe5780631459457a146103115780631f850716146103265780632025e9b81461033f575b600080fd5b6102ce6102b3366004612e81565b600a602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6006546102ce906001600160a01b031681565b6004546102ce906001600160a01b031681565b61032461031f366004612e9e565b6106e2565b005b6001546102ce906201000090046001600160a01b031681565b61032461034d366004612fee565b610890565b6103246103603660046130ab565b6108d4565b6008545b6040519081526020016102e2565b61036960125481565b61032461038e36600461310f565b61098a565b6103246103a136600461310f565b610a8d565b6103c96103b4366004612e81565b60116020526000908152604090205460ff1681565b60405190151581526020016102e2565b6103246103e736600461310f565b610bdd565b6103696103fa366004612e81565b60146020526000908152604090205481565b61032461041a366004613128565b610cfb565b610324610dd9565b610324610435366004613158565b610e43565b610324610ffd565b610324610450366004613199565b61100e565b610324610463366004612e81565b611044565b6103246104763660046131bb565b611050565b610324610489366004613128565b611195565b61036961126a565b6103246104a4366004612e81565b611279565b6103246104b73660046131bb565b611282565b6103696104ca36600461310f565b600f6020526000908152604090205481565b6103246104ea366004613228565b6113c7565b61036960075481565b61032461050636600461326f565b61146f565b610324610519366004613199565b6115d1565b6102ce61052c366004612e81565b611637565b61032461053f36600461329b565b611b25565b610369610552366004612e81565b600c6020526000908152604090205481565b6102ce610572366004613199565b611b97565b6102ce610585366004612e81565b600b602052600090815260409020546001600160a01b031681565b6103c96105ae366004612e81565b60106020526000908152604090205460ff1681565b6102ce6105d136600461310f565b611bcf565b6102ce6105e4366004612e81565b6009602052600090815260409020546001600160a01b031681565b6002546102ce906001600160a01b031681565b610324610620366004612fee565b611bf9565b610369610633366004613128565b600d60209081526000928352604080842090915290825290205481565b61032461065e366004612fee565b611c96565b610324610671366004613158565b611cd6565b610369610684366004612e81565b60136020526000908152604090205481565b6103246106a436600461329b565b611e5d565b6005546102ce906001600160a01b031681565b6003546102ce906001600160a01b031681565b6103246106dd36600461330e565b611ecf565b600154610100900460ff166106fd5760015460ff1615610701565b303b155b6107695760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b600154610100900460ff1615801561078b576001805461ffff19166101011790555b6001805462010000600160b01b031916620100006001600160a01b0389811691820292909217909255600280546001600160a01b03191691881691909117905560408051637e062a3560e11b8152905163fc0c546a916004808201926020929091908290030181865afa158015610806573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082a9190613388565b600380546001600160a01b03199081166001600160a01b03938416179091556004805482168784161790556005805482168684161790556006805490911691841691909117905560016000558015610888576001805461ff00191690555b505050505050565b60005b81518110156108d0576108be8282815181106108b1576108b16133a5565b602002602001015161200a565b806108c8816133d1565b915050610893565b5050565b60005b8251811015610985578281815181106108f2576108f26133a5565b60200260200101516001600160a01b03166331279d3d3384848151811061091b5761091b6133a5565b60200260200101516040518363ffffffff1660e01b815260040161094092919061342e565b600060405180830381600087803b15801561095a57600080fd5b505af115801561096e573d6000803e3d6000fd5b50505050808061097d906133d1565b9150506108d7565b505050565b60015460405163430c208160e01b815233600482015260248101839052620100009091046001600160a01b03169063430c208190604401602060405180830381865afa1580156109de573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a029190613452565b610a1e5760405162461bcd60e51b815260040161076090613474565b610a2781612236565b60015460405163c1f0fb9f60e01b815260048101839052620100009091046001600160a01b03169063c1f0fb9f90602401600060405180830381600087803b158015610a7257600080fd5b505af1158015610a86573d6000803e3d6000fd5b5050505050565b6000818152600e6020908152604080832080548251818502810185019093528083529192909190830182828015610aed57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610acf575b5050505050905060008151905060008167ffffffffffffffff811115610b1557610b15612f0f565b604051908082528060200260200182016040528015610b3e578160200160208202803683370190505b50905060005b82811015610bcb57600d60008681526020019081526020016000206000858381518110610b7357610b736133a5565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054828281518110610bae57610bae6133a5565b602090810291909101015280610bc3816133d1565b915050610b44565b50610bd7848483612446565b50505050565b80600003610c1b5760405162461bcd60e51b815260206004820152600b60248201526a1e995c9bc8185b5bdd5b9d60aa1b6044820152606401610760565b6007546000819003610c5a5760405162461bcd60e51b8152602060048201526008602482015267217765696768747360c01b6044820152606401610760565b600354610c72906001600160a01b03163330856128ab565b600081610c8784670de0b6b3a7640000613494565b610c9191906134c9565b90508015610cb1578060126000828254610cab91906134dd565b90915550505b6003546040518481526001600160a01b039091169033907ff70d5c697de7ea828df48e5c4573cb2194c659f1901f70110c52b066dcf50826906020015b60405180910390a3505050565b3360009081526010602052604090205460ff16610d2a5760405162461bcd60e51b8152600401610760906134f5565b8115610d9457600154604051634c3c15a760e11b815260048101849052620100009091046001600160a01b0316906398782b4e90602401600060405180830381600087803b158015610d7b57600080fd5b505af1158015610d8f573d6000803e3d6000fd5b505050505b60405182815233906001600160a01b038316907fae268d9aab12f3605f58efd74fd3801fa812b03fdb44317eb70f46dff0e19e22906020015b60405180910390a35050565b60085460005b818110156108d057610e316009600060088481548110610e0157610e016133a5565b60009182526020808320909101546001600160a01b0390811684529083019390935260409091019020541661200a565b80610e3b816133d1565b915050610ddf565b60008111610e635760405162461bcd60e51b815260040161076090613515565b6001546040516331a9108f60e11b815260048101839052620100009091046001600160a01b031690636352211e90602401602060405180830381865afa158015610eb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed59190613388565b6001600160a01b0316336001600160a01b031614610f055760405162461bcd60e51b815260040161076090613474565b610f0d612916565b6001546040516339f890b560e21b815260048101849052620100009091046001600160a01b03169063e7e242d490602401602060405180830381865afa158015610f5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7f9190613535565b11610f9c5760405162461bcd60e51b81526004016107609061354e565b604051631c8db79360e31b81526001600160a01b03848116600483015283169063e46dbc98906024015b600060405180830381600087803b158015610fe057600080fd5b505af1158015610ff4573d6000803e3d6000fd5b50505050505050565b60085461100c906000906115d1565b565b815b81811015610985576110326009600060088481548110610e0157610e016133a5565b8061103c816133d1565b915050611010565b61104d8161200a565b50565b60015460405163430c208160e01b815233600482015260248101839052620100009091046001600160a01b03169063430c208190604401602060405180830381865afa1580156110a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c89190613452565b6110e45760405162461bcd60e51b815260040161076090613474565b60005b8351811015610bd757838181518110611102576111026133a5565b60200260200101516001600160a01b031663a7852afa8385848151811061112b5761112b6133a5565b60200260200101516040518363ffffffff1660e01b815260040161115092919061356e565b600060405180830381600087803b15801561116a57600080fd5b505af115801561117e573d6000803e3d6000fd5b50505050808061118d906133d1565b9150506110e7565b3360009081526010602052604090205460ff166111c45760405162461bcd60e51b8152600401610760906134f5565b811561122d576001546040516246b3bd60e81b815260048101849052620100009091046001600160a01b0316906346b3bd0090602401600060405180830381600087803b15801561121457600080fd5b505af1158015611228573d6000803e3d6000fd5b505050505b60405182815233906001600160a01b038316907f60940192810a6fb3bce3fd3e2e3a13fd6ccc7605e963fb87ee971aba829989bd90602001610dcd565b6000611274612916565b905090565b61104d81612a1c565b60015460405163430c208160e01b815233600482015260248101839052620100009091046001600160a01b03169063430c208190604401602060405180830381865afa1580156112d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112fa9190613452565b6113165760405162461bcd60e51b815260040161076090613474565b60005b8351811015610bd757838181518110611334576113346133a5565b60200260200101516001600160a01b031663a7852afa8385848151811061135d5761135d6133a5565b60200260200101516040518363ffffffff1660e01b815260040161138292919061356e565b600060405180830381600087803b15801561139c57600080fd5b505af11580156113b0573d6000803e3d6000fd5b5050505080806113bf906133d1565b915050611319565b6006546001600160a01b0316331461140b5760405162461bcd60e51b815260206004820152600760248201526610b6b4b73a32b960c91b6044820152606401610760565b60005b825181101561144b5761143983828151811061142c5761142c6133a5565b6020026020010151612aff565b80611443816133d1565b91505061140e565b50600680546001600160a01b0319166001600160a01b039290921691909117905550565b6000811161148f5760405162461bcd60e51b815260040161076090613515565b6001546040516331a9108f60e11b815260048101839052620100009091046001600160a01b031690636352211e90602401602060405180830381865afa1580156114dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115019190613388565b6001600160a01b0316336001600160a01b0316146115315760405162461bcd60e51b815260040161076090613474565b611539612916565b6001546040516339f890b560e21b815260048101849052620100009091046001600160a01b03169063e7e242d490602401602060405180830381865afa158015611587573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ab9190613535565b116115c85760405162461bcd60e51b81526004016107609061354e565b6108d082612aff565b815b818110156109855761162560096000600884815481106115f5576115f56133a5565b60009182526020808320909101546001600160a01b03908116845290830193909352604090910190205416612a1c565b8061162f816133d1565b9150506115d3565b6001600160a01b038181166000908152600960205260408120549091161561168a5760405162461bcd60e51b815260206004820152600660248201526565786973747360d01b6044820152606401610760565b60025460405163e5e31b1360e01b81526001600160a01b0384811660048301529091169063e5e31b1390602401602060405180830381865afa1580156116d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116f89190613452565b61172c5760405162461bcd60e51b8152602060048201526005602482015264085c1bdbdb60da1b6044820152606401610760565b600080836001600160a01b0316639d63848a6040518163ffffffff1660e01b81526004016040805180830381865afa15801561176c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117909190613587565b6001600160a01b038216600090815260116020526040902054919350915060ff1680156117d557506001600160a01b03811660009081526011602052604090205460ff165b6118105760405162461bcd60e51b815260206004820152600c60248201526b085dda1a5d195b1a5cdd195960a21b6044820152606401610760565b60408051600380825260808201909252600091602082016060803683370190505090508281600081518110611847576118476133a5565b60200260200101906001600160a01b031690816001600160a01b031681525050818160018151811061187b5761187b6133a5565b6001600160a01b0392831660209182029290920101526003548116908416148015906118b557506003546001600160a01b03838116911614155b156118ff5760035481516001600160a01b0390911690829060029081106118de576118de6133a5565b60200260200101906001600160a01b031690816001600160a01b0316815250505b60055460405163897cd6b360e01b81526000916001600160a01b03169063897cd6b3906119309085906004016135b6565b6020604051808303816000875af115801561194f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119739190613388565b600480546001546040516358c14b6560e01b81529394506000936001600160a01b03928316936358c14b65936119ba938d93899362010000909204909216918a91016135c9565b6020604051808303816000875af11580156119d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119fd9190613388565b600354909150611a19906001600160a01b031682600019612bab565b6001600160a01b038082166000818152600b6020908152604080832080548689166001600160a01b031991821617909155948c16808452600983528184208054871686179055938352600a8252808320805490951690931790935560109092529020805460ff19166001179055611a8f81612a1c565b600880546001810182556000919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30180546001600160a01b0319166001600160a01b03898116918217909255604051338152909184811691908416907f48d3c521fd0d5541640f58c6d6381eed7cb2e8c9df421ae165a4f4c2d221ee0d9060200160405180910390a49695505050505050565b3360009081526010602052604090205460ff16611b545760405162461bcd60e51b8152600401610760906134f5565b604080518481526020810183905233916001600160a01b038516917fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d79101610cee565b600e6020528160005260406000208181548110611bb357600080fd5b6000918252602090912001546001600160a01b03169150829050565b60088181548110611bdf57600080fd5b6000918252602090912001546001600160a01b0316905081565b60005b81518110156108d057818181518110611c1757611c176133a5565b60200260200101516001600160a01b031663d294f0936040518163ffffffff1660e01b815260040160408051808303816000875af1158015611c5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c819190613607565b50508080611c8e906133d1565b915050611bfc565b60005b81518110156108d057611cc4828281518110611cb757611cb76133a5565b6020026020010151612a1c565b80611cce816133d1565b915050611c99565b60008111611cf65760405162461bcd60e51b815260040161076090613515565b6001546040516331a9108f60e11b815260048101839052620100009091046001600160a01b031690636352211e90602401602060405180830381865afa158015611d44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d689190613388565b6001600160a01b0316336001600160a01b031614611d985760405162461bcd60e51b815260040161076090613474565b611da0612916565b6001546040516339f890b560e21b815260048101849052620100009091046001600160a01b03169063e7e242d490602401602060405180830381865afa158015611dee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e129190613535565b11611e2f5760405162461bcd60e51b81526004016107609061354e565b604051633d509c9760e01b81526001600160a01b038481166004830152831690633d509c9790602401610fc6565b3360009081526010602052604090205460ff16611e8c5760405162461bcd60e51b8152600401610760906134f5565b604080518481526020810183905233916001600160a01b038516917ff341246adaac6f497bc2a656f546ab9e182111d630394f0c57c710a59a2cb5679101610cee565b60015460405163430c208160e01b815233600482015260248101879052620100009091046001600160a01b03169063430c208190604401602060405180830381865afa158015611f23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f479190613452565b611f635760405162461bcd60e51b815260040161076090613474565b828114611f9c5760405162461bcd60e51b81526020600482015260076024820152662161727261797360c81b6044820152606401610760565b610a86858585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060408051602080890282810182019093528882529093508892508791829185019084908082843760009201919091525061244692505050565b60005460011461204d5760405162461bcd60e51b815260206004820152600e60248201526d1499595b9d1c985b9d0818d85b1b60921b6044820152606401610760565b6002600081905550600660009054906101000a90046001600160a01b03166001600160a01b031663a83627de6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156120aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ce9190613535565b506120d881612a1c565b6001600160a01b0381811660008181526014602052604090819020546003549151634cde602960e11b81529190931660048201526399bcc05290602401602060405180830381865afa158015612132573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121569190613535565b811180156121705750600061216e62093a80836134c9565b115b1561222d576001600160a01b0382811660008181526014602052604080822091909155600354905163b66503cf60e01b815292166004830152602482018390529063b66503cf90604401600060405180830381600087803b1580156121d457600080fd5b505af11580156121e8573d6000803e3d6000fd5b50506040518381526001600160a01b03851692503391507f4fa9693cae526341d334e2862ca2413b2e503f1266255f9e0869fb36e6d89b179060200160405180910390a35b50506001600055565b6000818152600e6020526040812080549091805b8281101561240a576000848281548110612266576122666133a5565b6000918252602080832090910154888352600d825260408084206001600160a01b0392831680865290845281852054600990945293205492935090916122ac9116612a1c565b6001600160a01b0382166000908152600c6020526040812080548392906122d490849061362b565b90915550506000878152600d602090815260408083206001600160a01b03861684529091528120805483929061230b90849061362b565b909155505060008113156123af576001600160a01b0382811660009081526009602090815260408083205484168352600b9091529081902054905163278afc8b60e21b815260048101849052602481018a9052911690639e2bf22c90604401600060405180830381600087803b15801561238457600080fd5b505af1158015612398573d6000803e3d6000fd5b5050505080846123a8919061366a565b93506123bc565b6123b9818561362b565b93505b60408051888152602081018390527f6b3894ce60b9bbe9d93f1a4e6fc25b6b93cd8222e73ab6348d79c596f5b51de9910160405180910390a150508080612402906133d1565b91505061224a565b50806007600082825461241d91906136ab565b90915550506000848152600f60209081526040808320839055600e9091528120610bd791612e3a565b61244f83612236565b81516001546040516339f890b560e21b8152600481018690526000916201000090046001600160a01b03169063e7e242d490602401602060405180830381865afa1580156124a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124c59190613535565b90506000806000805b858110156125585760008782815181106124ea576124ea6133a5565b60200260200101511361251f57868181518110612509576125096133a5565b602002602001015161251a906136c2565b61253a565b868181518110612531576125316133a5565b60200260200101515b612544908561366a565b935080612550816133d1565b9150506124ce565b5060005b8581101561280b576000888281518110612578576125786133a5565b6020908102919091018101516001600160a01b038082166000908152600990935260408320548b51929450169190879089908c90879081106125bc576125bc6133a5565b60200260200101516125ce91906136de565b6125d89190613763565b60008d8152600d602090815260408083206001600160a01b03881684529091529020549091501561263c5760405162461bcd60e51b815260206004820152600e60248201526d191d5c1b1a58d85d19481c1bdbdb60921b6044820152606401610760565b806000036126795760405162461bcd60e51b815260206004820152600a6024820152693d32b937903837bbb2b960b11b6044820152606401610760565b61268282612a1c565b60008c8152600e6020908152604080832080546001810182559084528284200180546001600160a01b0319166001600160a01b0388169081179091558352600c909152812080548392906126d790849061366a565b909155505060008c8152600d602090815260408083206001600160a01b03871684529091528120805483929061270e90849061366a565b90915550506000811315612795576001600160a01b038083166000908152600b60205260409081902054905163f320772360e01b815260048101849052602481018f905291169063f320772390604401600060405180830381600087803b15801561277857600080fd5b505af115801561278c573d6000803e3d6000fd5b505050506127a1565b61279e816136c2565b90505b6127ab818661366a565b94506127b7818761366a565b604080518e81526020810184905291975033917f1263a2295e53acd6ef8f655b8afc11fa0f2cf11925be7aa1757d741ef32a926c910160405180910390a25050508080612803906133d1565b91505061255c565b5060008113156128795760015460405163fd4a77f160e01b8152600481018a9052620100009091046001600160a01b03169063fd4a77f190602401600060405180830381600087803b15801561286057600080fd5b505af1158015612874573d6000803e3d6000fd5b505050505b816007600082825461288b91906134dd565b90915550506000978852600f602052604090972096909655505050505050565b6040516001600160a01b0380851660248301528316604482015260648101829052610bd79085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612c5d565b60006005600160029054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561296d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129919190613535565b600360009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156129e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a089190613535565b612a1291906136ab565b61127491906134c9565b6001600160a01b038082166000908152600a6020908152604080832054909316808352600c9091529181205490811315612ade576001600160a01b038316600090815260136020526040812080546012549182905591612a7c83836136ab565b90508015610888576000670de0b6b3a7640000612a998387613494565b612aa391906134c9565b6001600160a01b038816600090815260146020526040812080549293508392909190612ad09084906134dd565b909155505050505050505050565b6012546001600160a01b038416600090815260136020526040902055505050565b6001600160a01b03811660009081526011602052604090205460ff1615612b5e5760405162461bcd60e51b8152602060048201526013602482015272185b1c9958591e481dda1a5d195b1a5cdd1959606a1b6044820152606401610760565b6001600160a01b038116600081815260116020526040808220805460ff191660011790555133917f6661a7108aecd07864384529117d96c319c1163e3010c01390f6b704726e07de91a350565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015612bfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c209190613535565b612c2a91906134dd565b6040516001600160a01b038516602482015260448101829052909150610bd790859063095ea7b360e01b906064016128df565b6000612cb2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612d2f9092919063ffffffff16565b8051909150156109855780806020019051810190612cd09190613452565b6109855760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610760565b60606001600160a01b0384163b612d885760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610760565b600080856001600160a01b031685604051612da391906137bd565b6000604051808303816000865af19150503d8060008114612de0576040519150601f19603f3d011682016040523d82523d6000602084013e612de5565b606091505b5091509150612df5828286612e01565b925050505b9392505050565b60608315612e10575081612dfa565b825115612e205782518084602001fd5b8160405162461bcd60e51b815260040161076091906137d9565b508054600082559060005260206000209081019061104d91905b80821115612e685760008155600101612e54565b5090565b6001600160a01b038116811461104d57600080fd5b600060208284031215612e9357600080fd5b8135612dfa81612e6c565b600080600080600060a08688031215612eb657600080fd5b8535612ec181612e6c565b94506020860135612ed181612e6c565b93506040860135612ee181612e6c565b92506060860135612ef181612e6c565b91506080860135612f0181612e6c565b809150509295509295909350565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612f4e57612f4e612f0f565b604052919050565b600067ffffffffffffffff821115612f7057612f70612f0f565b5060051b60200190565b600082601f830112612f8b57600080fd5b81356020612fa0612f9b83612f56565b612f25565b82815260059290921b84018101918181019086841115612fbf57600080fd5b8286015b84811015612fe3578035612fd681612e6c565b8352918301918301612fc3565b509695505050505050565b60006020828403121561300057600080fd5b813567ffffffffffffffff81111561301757600080fd5b61302384828501612f7a565b949350505050565b600082601f83011261303c57600080fd5b8135602061304c612f9b83612f56565b82815260059290921b8401810191818101908684111561306b57600080fd5b8286015b84811015612fe357803567ffffffffffffffff81111561308f5760008081fd5b61309d8986838b0101612f7a565b84525091830191830161306f565b600080604083850312156130be57600080fd5b823567ffffffffffffffff808211156130d657600080fd5b6130e286838701612f7a565b935060208501359150808211156130f857600080fd5b506131058582860161302b565b9150509250929050565b60006020828403121561312157600080fd5b5035919050565b6000806040838503121561313b57600080fd5b82359150602083013561314d81612e6c565b809150509250929050565b60008060006060848603121561316d57600080fd5b833561317881612e6c565b9250602084013561318881612e6c565b929592945050506040919091013590565b600080604083850312156131ac57600080fd5b50508035926020909101359150565b6000806000606084860312156131d057600080fd5b833567ffffffffffffffff808211156131e857600080fd5b6131f487838801612f7a565b9450602086013591508082111561320a57600080fd5b506132178682870161302b565b925050604084013590509250925092565b6000806040838503121561323b57600080fd5b823567ffffffffffffffff81111561325257600080fd5b61325e85828601612f7a565b925050602083013561314d81612e6c565b6000806040838503121561328257600080fd5b823561328d81612e6c565b946020939093013593505050565b6000806000606084860312156132b057600080fd5b83359250602084013561318881612e6c565b60008083601f8401126132d457600080fd5b50813567ffffffffffffffff8111156132ec57600080fd5b6020830191508360208260051b850101111561330757600080fd5b9250929050565b60008060008060006060868803121561332657600080fd5b85359450602086013567ffffffffffffffff8082111561334557600080fd5b61335189838a016132c2565b9096509450604088013591508082111561336a57600080fd5b50613377888289016132c2565b969995985093965092949392505050565b60006020828403121561339a57600080fd5b8151612dfa81612e6c565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016133e3576133e36133bb565b5060010190565b600081518084526020808501945080840160005b838110156134235781516001600160a01b0316875295820195908201906001016133fe565b509495945050505050565b6001600160a01b0383168152604060208201819052600090613023908301846133ea565b60006020828403121561346457600080fd5b81518015158114612dfa57600080fd5b60208082526006908201526510b7bbb732b960d11b604082015260600190565b60008160001904831182151516156134ae576134ae6133bb565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826134d8576134d86134b3565b500490565b600082198211156134f0576134f06133bb565b500190565b60208082526006908201526521676175676560d01b604082015260600190565b60208082526006908201526510ba37b5b2b760d11b604082015260600190565b60006020828403121561354757600080fd5b5051919050565b60208082526006908201526510b837bbb2b960d11b604082015260600190565b82815260406020820152600061302360408301846133ea565b6000806040838503121561359a57600080fd5b82516135a581612e6c565b602084015190925061314d81612e6c565b602081526000612dfa60208301846133ea565b6001600160a01b0385811682528481166020830152831660408201526080606082018190526000906135fd908301846133ea565b9695505050505050565b6000806040838503121561361a57600080fd5b505080516020909101519092909150565b60008083128015600160ff1b850184121615613649576136496133bb565b6001600160ff1b0384018313811615613664576136646133bb565b50500390565b600080821280156001600160ff1b038490038513161561368c5761368c6133bb565b600160ff1b83900384128116156136a5576136a56133bb565b50500190565b6000828210156136bd576136bd6133bb565b500390565b6000600160ff1b82016136d7576136d76133bb565b5060000390565b60006001600160ff1b0381841382841380821686840486111615613704576137046133bb565b600160ff1b6000871282811687830589121615613723576137236133bb565b6000871292508782058712848416161561373f5761373f6133bb565b87850587128184161615613755576137556133bb565b505050929093029392505050565b600082613772576137726134b3565b600160ff1b82146000198414161561378c5761378c6133bb565b500590565b60005b838110156137ac578181015183820152602001613794565b83811115610bd75750506000910152565b600082516137cf818460208701613791565b9190910192915050565b60208152600082518060208401526137f8816040850160208701613791565b601f01601f1916919091016040019291505056fea2646970667358221220e53c210bf0c6323f5c4560540bac7dd80f2e5b5315b490318b3edc9472268da064736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "attachTokenToGauge(uint256,address)": {
        "details": "A gauge should be able to attach a token for preventing transfers/withdraws."
      },
      "claimBribes(address[],address[][],uint256)": {
        "details": "Batch claim rewards from given bribe contracts for given tokenId."
      },
      "claimFees(address[],address[][],uint256)": {
        "details": "Claim fees from given bribes."
      },
      "claimRewards(address[],address[][])": {
        "details": "Batch claim rewards from given gauges."
      },
      "createGauge(address)": {
        "details": "Create gauge for given pool. Only for a pool with whitelisted tokens."
      },
      "detachTokenFromGauge(uint256,address)": {
        "details": "Detach given token."
      },
      "distribute(address)": {
        "details": "Get emission from minter and notify rewards for given gauge."
      },
      "distributeAll()": {
        "details": "Distribute rewards for all pools."
      },
      "distributeFees(address[])": {
        "details": "Move fees from deposited pools to bribes for given gauges."
      },
      "emitDeposit(uint256,address,uint256)": {
        "details": "Emit deposit event for easily handling external actions."
      },
      "emitWithdraw(uint256,address,uint256)": {
        "details": "Emit withdraw event for easily handling external actions."
      },
      "listingFee()": {
        "details": "Amount of tokens required to be hold for whitelisting."
      },
      "notifyRewardAmount(uint256)": {
        "details": "Add rewards to this contract. Usually it is VoltMinter."
      },
      "poke(uint256)": {
        "details": "Resubmit exist votes for given token. For internal purposes."
      },
      "poolsLength()": {
        "details": "Length of pools"
      },
      "registerRewardToken(address,address,uint256)": {
        "details": "Add a token to a gauge/bribe as possible reward."
      },
      "removeRewardToken(address,address,uint256)": {
        "details": "Remove a token from a gauge/bribe allowed rewards list."
      },
      "reset(uint256)": {
        "details": "Remove all votes for given tokenId."
      },
      "updateAll()": {
        "details": "Update all gauges."
      },
      "updateFor(address[])": {
        "details": "Update given gauges."
      },
      "updateForRange(uint256,uint256)": {
        "details": "Update gauges by indexes in a range."
      },
      "updateGauge(address)": {
        "details": "Update reward info for given gauge."
      },
      "vote(uint256,address[],int256[])": {
        "details": "Vote for given pools using a vote power of given tokenId. Reset previous votes."
      },
      "whitelist(address,uint256)": {
        "details": "Add token to whitelist. Only pools with whitelisted tokens can be added to gauge."
      }
    },
    "stateVariables": {
      "DURATION": {
        "details": "Rewards are released over 7 days"
      },
      "bribes": {
        "details": "gauge => bribe"
      },
      "factory": {
        "details": "VoltFactory"
      },
      "gauges": {
        "details": "pool => gauge"
      },
      "poolForGauge": {
        "details": "gauge => pool"
      },
      "poolVote": {
        "details": "nft => pools"
      },
      "pools": {
        "details": "All pools viable for incentives"
      },
      "totalWeight": {
        "details": "Total voting weight"
      },
      "usedWeights": {
        "details": "nft => total voting weight of user"
      },
      "ve": {
        "details": "The ve token that governs these contracts"
      },
      "votes": {
        "details": "nft => pool => votes"
      },
      "weights": {
        "details": "pool => weight"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 233,
        "contract": "contracts/base/vote/VoltVoterUpgradeable.sol:VoltVoterUpgradeable",
        "label": "_unlocked",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 26510,
        "contract": "contracts/base/vote/VoltVoterUpgradeable.sol:VoltVoterUpgradeable",
        "label": "_initialized",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 26513,
        "contract": "contracts/base/vote/VoltVoterUpgradeable.sol:VoltVoterUpgradeable",
        "label": "_initializing",
        "offset": 1,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 21663,
        "contract": "contracts/base/vote/VoltVoterUpgradeable.sol:VoltVoterUpgradeable",
        "label": "ve",
        "offset": 2,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 21666,
        "contract": "contracts/base/vote/VoltVoterUpgradeable.sol:VoltVoterUpgradeable",
        "label": "factory",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 21668,
        "contract": "contracts/base/vote/VoltVoterUpgradeable.sol:VoltVoterUpgradeable",
        "label": "token",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 21670,
        "contract": "contracts/base/vote/VoltVoterUpgradeable.sol:VoltVoterUpgradeable",
        "label": "gaugeFactory",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 21672,
        "contract": "contracts/base/vote/VoltVoterUpgradeable.sol:VoltVoterUpgradeable",
        "label": "bribeFactory",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 21678,
        "contract": "contracts/base/vote/VoltVoterUpgradeable.sol:VoltVoterUpgradeable",
        "label": "minter",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 21681,
        "contract": "contracts/base/vote/VoltVoterUpgradeable.sol:VoltVoterUpgradeable",
        "label": "totalWeight",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 21685,
        "contract": "contracts/base/vote/VoltVoterUpgradeable.sol:VoltVoterUpgradeable",
        "label": "pools",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 21690,
        "contract": "contracts/base/vote/VoltVoterUpgradeable.sol:VoltVoterUpgradeable",
        "label": "gauges",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 21695,
        "contract": "contracts/base/vote/VoltVoterUpgradeable.sol:VoltVoterUpgradeable",
        "label": "poolForGauge",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 21700,
        "contract": "contracts/base/vote/VoltVoterUpgradeable.sol:VoltVoterUpgradeable",
        "label": "bribes",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 21705,
        "contract": "contracts/base/vote/VoltVoterUpgradeable.sol:VoltVoterUpgradeable",
        "label": "weights",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_int256)"
      },
      {
        "astId": 21712,
        "contract": "contracts/base/vote/VoltVoterUpgradeable.sol:VoltVoterUpgradeable",
        "label": "votes",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_int256))"
      },
      {
        "astId": 21718,
        "contract": "contracts/base/vote/VoltVoterUpgradeable.sol:VoltVoterUpgradeable",
        "label": "poolVote",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 21723,
        "contract": "contracts/base/vote/VoltVoterUpgradeable.sol:VoltVoterUpgradeable",
        "label": "usedWeights",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 21727,
        "contract": "contracts/base/vote/VoltVoterUpgradeable.sol:VoltVoterUpgradeable",
        "label": "isGauge",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 21731,
        "contract": "contracts/base/vote/VoltVoterUpgradeable.sol:VoltVoterUpgradeable",
        "label": "isWhitelisted",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 21733,
        "contract": "contracts/base/vote/VoltVoterUpgradeable.sol:VoltVoterUpgradeable",
        "label": "index",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 21737,
        "contract": "contracts/base/vote/VoltVoterUpgradeable.sol:VoltVoterUpgradeable",
        "label": "supplyIndex",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 21741,
        "contract": "contracts/base/vote/VoltVoterUpgradeable.sol:VoltVoterUpgradeable",
        "label": "claimable",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_int256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_int256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => int256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_int256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}