{
  "address": "0xAFfe8B72a29A28999a472a056374d8B8607e4347",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokens",
          "type": "uint256"
        }
      ],
      "name": "CheckpointToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimEpoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxEpoch",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "WEEK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "toDistribute",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "t0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "t1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sinceLastCall",
          "type": "uint256"
        }
      ],
      "name": "adjustToDistribute",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "t",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ptTs",
          "type": "uint256"
        },
        {
          "internalType": "int128",
          "name": "ptBias",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "ptSlope",
          "type": "int128"
        }
      ],
      "name": "adjustVeSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkpointToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkpointTotalSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "claimMany",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "claimable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ve",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxUserEpoch",
          "type": "uint256"
        }
      ],
      "name": "findTimestampUserEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_votingEscrow",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTokenTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        }
      ],
      "name": "setDepositor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timeCursor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "timeCursorOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenLastBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokensPerWeek",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userEpochOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "veForAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "veSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingEscrow",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3ca5146892d024043f57c4862043f561f90e6969f3b33be650a48f5ada7bd3fb",
  "receipt": {
    "to": null,
    "from": "0x1381C573b97Bf393A81fA42760DD21E109d8092B",
    "contractAddress": "0xAFfe8B72a29A28999a472a056374d8B8607e4347",
    "transactionIndex": 0,
    "gasUsed": "1694985",
    "logsBloom": "0x
    "blockHash": "0xac6e4353c4a69043a8bfd4fc04c06560d63d5dc4b901cec17a2e40bdae86a972",
    "transactionHash": "0x3ca5146892d024043f57c4862043f561f90e6969f3b33be650a48f5ada7bd3fb",
    "logs": [],
    "blockNumber": 10,
    "cumulativeGasUsed": "1694985",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "3b3b283a31496f0704cc082007acea88",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"CheckpointToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimEpoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxEpoch\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WEEK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"toDistribute\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"t0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"t1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sinceLastCall\",\"type\":\"uint256\"}],\"name\":\"adjustToDistribute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ptTs\",\"type\":\"uint256\"},{\"internalType\":\"int128\",\"name\":\"ptBias\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"ptSlope\",\"type\":\"int128\"}],\"name\":\"adjustVeSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpointToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpointTotalSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"claimMany\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ve\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxUserEpoch\",\"type\":\"uint256\"}],\"name\":\"findTimestampUserEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_votingEscrow\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTokenTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"}],\"name\":\"setDepositor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeCursor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"timeCursorOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenLastBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokensPerWeek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userEpochOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"veForAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"veSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingEscrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"adjustToDistribute(uint256,uint256,uint256,uint256)\":{\"details\":\"For testing purposes.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/base/vote/VeDistUpgradeable.sol\":\"VeDistUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/base/vote/VeDistUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../../lib/Math.sol\\\";\\nimport \\\"../../interface/IERC20.sol\\\";\\nimport \\\"../../interface/IVeDist.sol\\\";\\nimport \\\"../../interface/IVe.sol\\\";\\nimport \\\"../../lib/SafeERC20.sol\\\";\\nimport \\\"../../lib/Initializable.sol\\\";\\n\\ncontract VeDistUpgradeable is IVeDist, Initializable {\\n    using SafeERC20 for IERC20;\\n\\n    event CheckpointToken(uint time, uint tokens);\\n\\n    event Claimed(uint tokenId, uint amount, uint claimEpoch, uint maxEpoch);\\n\\n    struct ClaimCalculationResult {\\n        uint toDistribute;\\n        uint userEpoch;\\n        uint weekCursor;\\n        uint maxUserEpoch;\\n        bool success;\\n    }\\n\\n    uint public constant WEEK = 7 * 86400;\\n\\n    uint public startTime;\\n    uint public timeCursor;\\n    mapping(uint => uint) public timeCursorOf;\\n    mapping(uint => uint) public userEpochOf;\\n\\n    uint public lastTokenTime;\\n    uint[1000000000000000] public tokensPerWeek;\\n\\n    address public votingEscrow;\\n    address public token;\\n    uint public tokenLastBalance;\\n\\n    uint[1000000000000000] public veSupply;\\n\\n    address public depositor;\\n\\n    function initialize(address _votingEscrow, address _depositor)\\n        public\\n        initializer\\n    {\\n        uint _t = (block.timestamp / WEEK) * WEEK;\\n        startTime = _t;\\n        lastTokenTime = _t;\\n        timeCursor = _t;\\n        address _token = IVe(_votingEscrow).token();\\n        token = _token;\\n        votingEscrow = _votingEscrow;\\n        depositor = _depositor;\\n        IERC20(_token).safeIncreaseAllowance(_votingEscrow, type(uint).max);\\n    }\\n\\n    function timestamp() external view returns (uint) {\\n        return (block.timestamp / WEEK) * WEEK;\\n    }\\n\\n    function _checkpointToken() internal {\\n        uint tokenBalance = IERC20(token).balanceOf(address(this));\\n        uint toDistribute = tokenBalance - tokenLastBalance;\\n        tokenLastBalance = tokenBalance;\\n\\n        uint t = lastTokenTime;\\n        uint sinceLast = block.timestamp - t;\\n        lastTokenTime = block.timestamp;\\n        uint thisWeek = (t / WEEK) * WEEK;\\n        uint nextWeek = 0;\\n\\n        for (uint i = 0; i < 20; i++) {\\n            nextWeek = thisWeek + WEEK;\\n            if (block.timestamp < nextWeek) {\\n                tokensPerWeek[thisWeek] += _adjustToDistribute(\\n                    toDistribute,\\n                    block.timestamp,\\n                    t,\\n                    sinceLast\\n                );\\n                break;\\n            } else {\\n                tokensPerWeek[thisWeek] += _adjustToDistribute(\\n                    toDistribute,\\n                    nextWeek,\\n                    t,\\n                    sinceLast\\n                );\\n            }\\n            t = nextWeek;\\n            thisWeek = nextWeek;\\n        }\\n        emit CheckpointToken(block.timestamp, toDistribute);\\n    }\\n\\n    /// @dev For testing purposes.\\n    function adjustToDistribute(\\n        uint toDistribute,\\n        uint t0,\\n        uint t1,\\n        uint sinceLastCall\\n    ) external pure returns (uint) {\\n        return _adjustToDistribute(toDistribute, t0, t1, sinceLastCall);\\n    }\\n\\n    function _adjustToDistribute(\\n        uint toDistribute,\\n        uint t0,\\n        uint t1,\\n        uint sinceLast\\n    ) internal pure returns (uint) {\\n        if (t0 <= t1 || t0 - t1 == 0 || sinceLast == 0) {\\n            return toDistribute;\\n        }\\n        return (toDistribute * (t0 - t1)) / sinceLast;\\n    }\\n\\n    function checkpointToken() external override {\\n        require(msg.sender == depositor, \\\"!depositor\\\");\\n        _checkpointToken();\\n    }\\n\\n    function _findTimestampEpoch(address ve, uint _timestamp)\\n        internal\\n        view\\n        returns (uint)\\n    {\\n        uint _min = 0;\\n        uint _max = IVe(ve).epoch();\\n        for (uint i = 0; i < 128; i++) {\\n            if (_min >= _max) break;\\n            uint _mid = (_min + _max + 2) / 2;\\n            IVe.Point memory pt = IVe(ve).pointHistory(_mid);\\n            if (pt.ts <= _timestamp) {\\n                _min = _mid;\\n            } else {\\n                _max = _mid - 1;\\n            }\\n        }\\n        return _min;\\n    }\\n\\n    function findTimestampUserEpoch(\\n        address ve,\\n        uint tokenId,\\n        uint _timestamp,\\n        uint maxUserEpoch\\n    ) external view returns (uint) {\\n        return _findTimestampUserEpoch(ve, tokenId, _timestamp, maxUserEpoch);\\n    }\\n\\n    function _findTimestampUserEpoch(\\n        address ve,\\n        uint tokenId,\\n        uint _timestamp,\\n        uint maxUserEpoch\\n    ) internal view returns (uint) {\\n        uint _min = 0;\\n        uint _max = maxUserEpoch;\\n        for (uint i = 0; i < 128; i++) {\\n            if (_min >= _max) break;\\n            uint _mid = (_min + _max + 2) / 2;\\n            IVe.Point memory pt = IVe(ve).userPointHistory(tokenId, _mid);\\n            if (pt.ts <= _timestamp) {\\n                _min = _mid;\\n            } else {\\n                _max = _mid - 1;\\n            }\\n        }\\n        return _min;\\n    }\\n\\n    function veForAt(uint _tokenId, uint _timestamp)\\n        external\\n        view\\n        returns (uint)\\n    {\\n        address ve = votingEscrow;\\n        uint maxUserEpoch = IVe(ve).userPointEpoch(_tokenId);\\n        uint epoch = _findTimestampUserEpoch(\\n            ve,\\n            _tokenId,\\n            _timestamp,\\n            maxUserEpoch\\n        );\\n        IVe.Point memory pt = IVe(ve).userPointHistory(_tokenId, epoch);\\n        return\\n            uint(\\n                int256(\\n                    Math.positiveInt128(\\n                        pt.bias -\\n                            pt.slope *\\n                            (int128(int256(_timestamp - pt.ts)))\\n                    )\\n                )\\n            );\\n    }\\n\\n    function _checkpointTotalSupply() internal {\\n        address ve = votingEscrow;\\n        uint t = timeCursor;\\n        uint roundedTimestamp = (block.timestamp / WEEK) * WEEK;\\n        IVe(ve).checkpoint();\\n\\n        // assume will be called more frequently than 20 weeks\\n        for (uint i = 0; i < 20; i++) {\\n            if (t > roundedTimestamp) {\\n                break;\\n            } else {\\n                uint epoch = _findTimestampEpoch(ve, t);\\n                IVe.Point memory pt = IVe(ve).pointHistory(epoch);\\n                veSupply[t] = _adjustVeSupply(t, pt.ts, pt.bias, pt.slope);\\n            }\\n            t += WEEK;\\n        }\\n        timeCursor = t;\\n    }\\n\\n    function adjustVeSupply(\\n        uint t,\\n        uint ptTs,\\n        int128 ptBias,\\n        int128 ptSlope\\n    ) external pure returns (uint) {\\n        return _adjustVeSupply(t, ptTs, ptBias, ptSlope);\\n    }\\n\\n    function _adjustVeSupply(\\n        uint t,\\n        uint ptTs,\\n        int128 ptBias,\\n        int128 ptSlope\\n    ) internal pure returns (uint) {\\n        if (t < ptTs) {\\n            return 0;\\n        }\\n        int128 dt = int128(int256(t - ptTs));\\n        if (ptBias < ptSlope * dt) {\\n            return 0;\\n        }\\n        return uint(int256(Math.positiveInt128(ptBias - ptSlope * dt)));\\n    }\\n\\n    function checkpointTotalSupply() external override {\\n        _checkpointTotalSupply();\\n    }\\n\\n    function _claim(\\n        uint _tokenId,\\n        address ve,\\n        uint _lastTokenTime\\n    ) internal returns (uint) {\\n        ClaimCalculationResult memory result = _calculateClaim(\\n            _tokenId,\\n            ve,\\n            _lastTokenTime\\n        );\\n        if (result.success) {\\n            userEpochOf[_tokenId] = result.userEpoch;\\n            timeCursorOf[_tokenId] = result.weekCursor;\\n            emit Claimed(\\n                _tokenId,\\n                result.toDistribute,\\n                result.userEpoch,\\n                result.maxUserEpoch\\n            );\\n        }\\n        return result.toDistribute;\\n    }\\n\\n    function _calculateClaim(\\n        uint _tokenId,\\n        address ve,\\n        uint _lastTokenTime\\n    ) internal view returns (ClaimCalculationResult memory) {\\n        uint userEpoch;\\n        uint toDistribute;\\n        uint maxUserEpoch = IVe(ve).userPointEpoch(_tokenId);\\n        uint _startTime = startTime;\\n\\n        if (maxUserEpoch == 0) {\\n            return ClaimCalculationResult(0, 0, 0, 0, false);\\n        }\\n\\n        uint weekCursor = timeCursorOf[_tokenId];\\n\\n        if (weekCursor == 0) {\\n            userEpoch = _findTimestampUserEpoch(\\n                ve,\\n                _tokenId,\\n                _startTime,\\n                maxUserEpoch\\n            );\\n        } else {\\n            userEpoch = userEpochOf[_tokenId];\\n        }\\n\\n        if (userEpoch == 0) userEpoch = 1;\\n\\n        IVe.Point memory userPoint = IVe(ve).userPointHistory(\\n            _tokenId,\\n            userEpoch\\n        );\\n        if (weekCursor == 0) {\\n            weekCursor = ((userPoint.ts + WEEK - 1) / WEEK) * WEEK;\\n        }\\n        if (weekCursor >= lastTokenTime) {\\n            return ClaimCalculationResult(0, 0, 0, 0, false);\\n        }\\n        if (weekCursor < _startTime) {\\n            weekCursor = _startTime;\\n        }\\n\\n        IVe.Point memory oldUserPoint;\\n        {\\n            for (uint i = 0; i < 50; i++) {\\n                if (weekCursor >= _lastTokenTime) {\\n                    break;\\n                }\\n                if (weekCursor >= userPoint.ts && userEpoch <= maxUserEpoch) {\\n                    userEpoch += 1;\\n                    oldUserPoint = userPoint;\\n                    if (userEpoch > maxUserEpoch) {\\n                        userPoint = IVe.Point(0, 0, 0, 0);\\n                    } else {\\n                        userPoint = IVe(ve).userPointHistory(\\n                            _tokenId,\\n                            userEpoch\\n                        );\\n                    }\\n                } else {\\n                    int128 dt = int128(int256(weekCursor - oldUserPoint.ts));\\n                    uint balanceOf = uint(\\n                        int256(\\n                            Math.positiveInt128(\\n                                oldUserPoint.bias - dt * oldUserPoint.slope\\n                            )\\n                        )\\n                    );\\n                    if (balanceOf == 0 && userEpoch > maxUserEpoch) {\\n                        break;\\n                    }\\n                    toDistribute +=\\n                        (balanceOf * tokensPerWeek[weekCursor]) /\\n                        veSupply[weekCursor];\\n                    weekCursor += WEEK;\\n                }\\n            }\\n        }\\n        return\\n            ClaimCalculationResult(\\n                toDistribute,\\n                Math.min(maxUserEpoch, userEpoch - 1),\\n                weekCursor,\\n                maxUserEpoch,\\n                true\\n            );\\n    }\\n\\n    function claimable(uint _tokenId) external view returns (uint) {\\n        uint _lastTokenTime = (lastTokenTime / WEEK) * WEEK;\\n        ClaimCalculationResult memory result = _calculateClaim(\\n            _tokenId,\\n            votingEscrow,\\n            _lastTokenTime\\n        );\\n        return result.toDistribute;\\n    }\\n\\n    function claim(uint _tokenId) external returns (uint) {\\n        if (block.timestamp >= timeCursor) _checkpointTotalSupply();\\n        uint _lastTokenTime = lastTokenTime;\\n        _lastTokenTime = (_lastTokenTime / WEEK) * WEEK;\\n        uint amount = _claim(_tokenId, votingEscrow, _lastTokenTime);\\n        if (amount != 0) {\\n            IVe(votingEscrow).depositFor(_tokenId, amount);\\n            tokenLastBalance -= amount;\\n        }\\n        return amount;\\n    }\\n\\n    function claimMany(uint[] memory _tokenIds) external returns (bool) {\\n        if (block.timestamp >= timeCursor) _checkpointTotalSupply();\\n        uint _lastTokenTime = lastTokenTime;\\n        _lastTokenTime = (_lastTokenTime / WEEK) * WEEK;\\n        address _votingEscrow = votingEscrow;\\n        uint total = 0;\\n\\n        for (uint i = 0; i < _tokenIds.length; i++) {\\n            uint _tokenId = _tokenIds[i];\\n            if (_tokenId == 0) break;\\n            uint amount = _claim(_tokenId, _votingEscrow, _lastTokenTime);\\n            if (amount != 0) {\\n                IVe(_votingEscrow).depositFor(_tokenId, amount);\\n                total += amount;\\n            }\\n        }\\n        if (total != 0) {\\n            tokenLastBalance -= total;\\n        }\\n\\n        return true;\\n    }\\n\\n    // Once off event on contract initialize\\n    function setDepositor(address _depositor) external {\\n        require(msg.sender == depositor, \\\"!depositor\\\");\\n        depositor = _depositor;\\n    }\\n}\\n\",\"keccak256\":\"0x3cb7dfab1e2bd10308bf3cd0dac6872cf152b93090ecb12ae9db662b629df8ab\",\"license\":\"MIT\"},\"contracts/interface/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0x224e032b714ae191e5e419054a144402b01597e8b2eb36db4f6e38d3e42b0db7\",\"license\":\"MIT\"},\"contracts/interface/IVe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IVe {\\n    enum DepositType {\\n        DEPOSIT_FOR_TYPE,\\n        CREATE_LOCK_TYPE,\\n        INCREASE_LOCK_AMOUNT,\\n        INCREASE_UNLOCK_TIME,\\n        MERGE_TYPE\\n    }\\n\\n    struct Point {\\n        int128 bias;\\n        int128 slope; // # -dweight / dt\\n        uint ts;\\n        uint blk; // block\\n    }\\n    /* We cannot really do block numbers per se b/c slope is per time, not per block\\n     * and per block could be fairly bad b/c Ethereum changes blocktimes.\\n     * What we can do is to extrapolate ***At functions */\\n\\n    struct LockedBalance {\\n        int128 amount;\\n        uint end;\\n    }\\n\\n    function token() external view returns (address);\\n\\n    function balanceOfNFT(uint) external view returns (uint);\\n\\n    function isApprovedOrOwner(address, uint) external view returns (bool);\\n\\n    function createLockFor(\\n        uint,\\n        uint,\\n        address\\n    ) external returns (uint);\\n\\n    function userPointEpoch(uint tokenId) external view returns (uint);\\n\\n    function epoch() external view returns (uint);\\n\\n    function userPointHistory(uint tokenId, uint loc)\\n        external\\n        view\\n        returns (Point memory);\\n\\n    function pointHistory(uint loc) external view returns (Point memory);\\n\\n    function checkpoint() external;\\n\\n    function depositFor(uint tokenId, uint value) external;\\n\\n    function attachToken(uint tokenId) external;\\n\\n    function detachToken(uint tokenId) external;\\n\\n    function voting(uint tokenId) external;\\n\\n    function abstain(uint tokenId) external;\\n}\\n\",\"keccak256\":\"0x93a173b039792ac393165aab7a92882d0cc1d82257c4dfe13ee26631fe46e52a\",\"license\":\"MIT\"},\"contracts/interface/IVeDist.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IVeDist {\\n    function checkpointToken() external;\\n\\n    function checkpointTotalSupply() external;\\n}\\n\",\"keccak256\":\"0xdd994472162ec6dc2bfab91bc1aeb7be25d4126d91b7576bf54e5bf92b462482\",\"license\":\"MIT\"},\"contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n        (bool success, bytes memory returndata) = target.call(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return\\n            functionDelegateCall(\\n                target,\\n                data,\\n                \\\"Address: low-level delegate call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x284fcdaef2f20ec54759bfb0821ee3a3459a1f0bc302b29e7fcc3c2f42e728df\",\"license\":\"MIT\"},\"contracts/lib/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x38183be1332f4c833a8279b7d913f523431e50aa59f4f513020b82628c7d6c0e\",\"license\":\"MIT\"},\"contracts/lib/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nlibrary Math {\\n    function max(uint a, uint b) internal pure returns (uint) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function min(uint a, uint b) internal pure returns (uint) {\\n        return a < b ? a : b;\\n    }\\n\\n    function positiveInt128(int128 value) internal pure returns (int128) {\\n        return value < 0 ? int128(0) : value;\\n    }\\n\\n    function closeTo(\\n        uint a,\\n        uint b,\\n        uint target\\n    ) internal pure returns (bool) {\\n        if (a > b) {\\n            if (a - b <= target) {\\n                return true;\\n            }\\n        } else {\\n            if (b - a <= target) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8a50db5ef01ef869b1a7df3cf485d6c87473549c70fbefc54bdea34f8bc78538\",\"license\":\"MIT\"},\"contracts/lib/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../interface/IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint value\\n    ) internal {\\n        uint newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(\\n            data,\\n            \\\"SafeERC20: low-level call failed\\\"\\n        );\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(\\n                abi.decode(returndata, (bool)),\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd09403b2f52a045a82861c53059fb835daabe908fd774f948370979588b3fe1a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611db5806100206000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c8063939ea66b116100c3578063c9e14ed21161007c578063c9e14ed2146102c6578063d1d58b25146102d9578063e32890c4146102ec578063f2c098b71461030c578063f4359ce51461031f578063fc0c546a1461032957600080fd5b8063939ea66b1461026e57806398bdfdee146102775780639abd185c1461028a578063b80777ea1461029d578063bee5dc32146102a5578063c7c4ff46146102ad57600080fd5b80634f2bfe5b116101155780634f2bfe5b146101e657806378e97925146102175780638736659b14610220578063899519be146102295780638ec8468a1461023c578063925489a81461024b57600080fd5b80630f6592ef1461015d578063326a940714610183578063379607f51461018d5780633935c802146101a05780634607bf60146101b3578063485cc955146101d3575b600080fd5b61017061016b366004611838565b610342565b6040519081526020015b60405180910390f35b61018b610365565b005b61017061019b366004611838565b61036f565b6101706101ae366004611869565b610459565b6101706101c1366004611838565b60036020526000908152604090205481565b61018b6101e13660046118a4565b610472565b66038d7ea4c68006546101ff906001600160a01b031681565b6040516001600160a01b03909116815260200161017a565b61017060015481565b61017060025481565b610170610237366004611838565b610626565b61017066038d7ea4c680085481565b61025e610259366004611924565b61063c565b604051901515815260200161017a565b61017060055481565b6101706102853660046119ca565b610782565b6101706102983660046119fc565b610790565b6101706108d1565b61018b6108f0565b66071afd498d0009546101ff906001600160a01b031681565b6101706102d4366004611a2d565b610945565b6101706102e7366004611838565b610953565b6101706102fa366004611838565b60046020526000908152604090205481565b61018b61031a366004611a77565b61099f565b61017062093a8081565b66038d7ea4c68007546101ff906001600160a01b031681565b66038d7ea4c680098166038d7ea4c68000811061035e57600080fd5b0154905081565b61036d610a14565b565b6000600254421061038257610382610a14565b60055462093a806103938183611aaa565b61039d9190611acc565b66038d7ea4c68006549091506000906103c19085906001600160a01b031684610b8f565b905080156104525766038d7ea4c680065460405163076426ed60e11b815260048101869052602481018390526001600160a01b0390911690630ec84dda90604401600060405180830381600087803b15801561041c57600080fd5b505af1158015610430573d6000803e3d6000fd5b505050508066038d7ea4c68008600082825461044c9190611aeb565b90915550505b9392505050565b600061046785858585610c22565b90505b949350505050565b600054610100900460ff1661048d5760005460ff1615610491565b303b155b6104f95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b600054610100900460ff1615801561051b576000805461ffff19166101011790555b600062093a8061052b8142611aaa565b6105359190611acc565b90508060018190555080600581905550806002819055506000846001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561058c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b09190611b02565b66038d7ea4c6800780546001600160a01b038084166001600160a01b0319928316811790935566038d7ea4c6800680548a831690841617905566071afd498d000980549189169190921617905590915061060d9086600019610d16565b50508015610621576000805461ff00191690555b505050565b60068166038d7ea4c68000811061035e57600080fd5b6000600254421061064f5761064f610a14565b60055462093a806106608183611aaa565b61066a9190611acc565b66038d7ea4c68006549091506001600160a01b03166000805b85518110156107525760008682815181106106a0576106a0611b1f565b60200260200101519050806000036106b85750610752565b60006106c5828688610b8f565b9050801561073d5760405163076426ed60e11b815260048101839052602481018290526001600160a01b03861690630ec84dda90604401600060405180830381600087803b15801561071657600080fd5b505af115801561072a573d6000803e3d6000fd5b50505050808461073a9190611b35565b93505b5050808061074a90611b4d565b915050610683565b508015610777578066038d7ea4c6800860008282546107719190611aeb565b90915550505b506001949350505050565b600061046785858585610df0565b66038d7ea4c680065460405163e58f594760e01b8152600481018490526000916001600160a01b0316908290829063e58f594790602401602060405180830381865afa1580156107e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108089190611b66565b9050600061081883878785610c22565b6040516322565a1560e11b815260048101889052602481018290529091506000906001600160a01b038516906344acb42a90604401608060405180830381865afa15801561086a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088e9190611b7f565b90506108c38160400151876108a39190611aeb565b82602001516108b29190611bf4565b82516108be9190611c92565b610e3c565b600f0b979650505050505050565b600062093a806108e18142611aaa565b6108eb9190611acc565b905090565b66071afd498d0009546001600160a01b0316331461093d5760405162461bcd60e51b815260206004820152600a60248201526910b232b837b9b4ba37b960b11b60448201526064016104f0565b61036d610e57565b60006104678585858561101a565b60008062093a80806005546109689190611aaa565b6109729190611acc565b66038d7ea4c68006549091506000906109969085906001600160a01b03168461107f565b51949350505050565b66071afd498d0009546001600160a01b031633146109ec5760405162461bcd60e51b815260206004820152600a60248201526910b232b837b9b4ba37b960b11b60448201526064016104f0565b66071afd498d000980546001600160a01b0319166001600160a01b0392909216919091179055565b66038d7ea4c68006546002546001600160a01b0390911690600062093a80610a3c8142611aaa565b610a469190611acc565b9050826001600160a01b031663c2c4c5c16040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610a8357600080fd5b505af1158015610a97573d6000803e3d6000fd5b5050505060005b6014811015610b8757818311610b87576000610aba85856114f2565b604051638ad4c44760e01b8152600481018290529091506000906001600160a01b03871690638ad4c44790602401608060405180830381865afa158015610b05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b299190611b7f565b9050610b438582604001518360000151846020015161101a565b66038d7ea4c680098666038d7ea4c680008110610b6257610b62611b1f565b01555050610b7362093a8084611b35565b925080610b7f81611b4d565b915050610a9e565b505060025550565b600080610b9d85858561107f565b90508060800151156109965760208181018051600088815260048452604080822092909255818501516003855290829020558351915160608086015183518b815295860194909452918401528201527fcae2990aa9af8eb1c64713b7eddb3a80bf18e49a94a13fe0d0002b5d61d58f009060800160405180910390a151949350505050565b60008082815b6080811015610d0a5781831015610d0a5760006002610c478486611b35565b610c52906002611b35565b610c5c9190611aaa565b6040516322565a1560e11b8152600481018a9052602481018290529091506000906001600160a01b038b16906344acb42a90604401608060405180830381865afa158015610cae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd29190611b7f565b905087816040015111610ce757819450610cf5565b610cf2600183611aeb565b93505b50508080610d0290611b4d565b915050610c28565b50909695505050505050565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015610d67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8b9190611b66565b610d959190611b35565b604080516001600160a01b038616602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052909150610dea908590611647565b50505050565b60008284111580610e085750610e068385611aeb565b155b80610e11575081155b15610e1d57508361046a565b81610e288486611aeb565b610e329087611acc565b6104679190611aaa565b60008082600f0b12610e4e5781610e51565b60005b92915050565b66038d7ea4c68007546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610ea6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eca9190611b66565b9050600066038d7ea4c680085482610ee29190611aeb565b66038d7ea4c680088390556005549091506000610eff8242611aeb565b426005559050600062093a80610f158185611aaa565b610f1f9190611acc565b90506000805b6014811015610fd857610f3b62093a8084611b35565b915081421015610f8557610f5186428787610df0565b60068466038d7ea4c680008110610f6a57610f6a611b1f565b016000828254610f7a9190611b35565b90915550610fd89050565b610f9186838787610df0565b60068466038d7ea4c680008110610faa57610faa611b1f565b016000828254610fba9190611b35565b90915550508194508192508080610fd090611b4d565b915050610f25565b5060408051428152602081018790527fce749457b74e10f393f2c6b1ce4261b78791376db5a3f501477a809f03f500d6910160405180910390a1505050505050565b60008385101561102c5750600061046a565b60006110388587611aeb565b90506110448184611bf4565b600f0b84600f0b121561105b57600091505061046a565b6110726110688285611bf4565b6108be9086611c92565b600f0b9695505050505050565b6110b36040518060a00160405280600081526020016000815260200160008152602001600081526020016000151581525090565b6000806000856001600160a01b031663e58f5947886040518263ffffffff1660e01b81526004016110e691815260200190565b602060405180830381865afa158015611103573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111279190611b66565b600154909150600082900361116f576040518060a001604052806000815260200160008152602001600081526020016000815260200160001515815250945050505050610452565b6000888152600360205260408120549081900361119957611192888a8486610c22565b94506111ab565b60008981526004602052604090205494505b846000036111b857600194505b6040516322565a1560e11b8152600481018a9052602481018690526000906001600160a01b038a16906344acb42a90604401608060405180830381865afa158015611207573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122b9190611b7f565b9050816000036112705762093a8080600162093a80846040015161124f9190611b35565b6112599190611aeb565b6112639190611aaa565b61126d9190611acc565b91505b60055482106112b4576040518060a0016040528060008152602001600081526020016000815260200160008152602001600015158152509650505050505050610452565b828210156112c0578291505b6040805160808101825260008082526020820181905291810182905260608101829052905b60328110156114a357898410156114a3578260400151841015801561130a5750858811155b156113d05761131a600189611b35565b9750829150858811156113595760405180608001604052806000600f0b81526020016000600f0b81526020016000815260200160008152509250611491565b6040516322565a1560e11b8152600481018d9052602481018990526001600160a01b038c16906344acb42a90604401608060405180830381865afa1580156113a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c99190611b7f565b9250611491565b60008260400151856113e29190611aeb565b905060006114058460200151836113f99190611bf4565b85516108be9190611c92565b600f0b9050801580156114175750878a115b156114235750506114a3565b66038d7ea4c680098666038d7ea4c68000811061144257611442611b1f565b015460068766038d7ea4c68000811061145d5761145d611b1f565b01546114699083611acc565b6114739190611aaa565b61147d908a611b35565b985061148c62093a8087611b35565b955050505b8061149b81611b4d565b9150506112e5565b506040518060a001604052808781526020016114cb8760018b6114c69190611aeb565b611719565b81526020810194909452604084019590955250506001606090910152509695505050505050565b600080600090506000846001600160a01b031663900cf0cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611539573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155d9190611b66565b905060005b608081101561163d578183101561163d57600060026115818486611b35565b61158c906002611b35565b6115969190611aaa565b604051638ad4c44760e01b8152600481018290529091506000906001600160a01b03891690638ad4c44790602401608060405180830381865afa1580156115e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116059190611b7f565b90508681604001511161161a57819450611628565b611625600183611aeb565b93505b5050808061163590611b4d565b915050611562565b5090949350505050565b600061169c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661172f9092919063ffffffff16565b80519091501561062157808060200190518101906116ba9190611ce2565b6106215760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016104f0565b60008183106117285781610452565b5090919050565b60606001600160a01b0384163b6117885760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104f0565b600080856001600160a01b0316856040516117a39190611d30565b6000604051808303816000865af19150503d80600081146117e0576040519150601f19603f3d011682016040523d82523d6000602084013e6117e5565b606091505b50915091506117f58282866117ff565b9695505050505050565b6060831561180e575081610452565b82511561181e5782518084602001fd5b8160405162461bcd60e51b81526004016104f09190611d4c565b60006020828403121561184a57600080fd5b5035919050565b6001600160a01b038116811461186657600080fd5b50565b6000806000806080858703121561187f57600080fd5b843561188a81611851565b966020860135965060408601359560600135945092505050565b600080604083850312156118b757600080fd5b82356118c281611851565b915060208301356118d281611851565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561191c5761191c6118dd565b604052919050565b6000602080838503121561193757600080fd5b823567ffffffffffffffff8082111561194f57600080fd5b818501915085601f83011261196357600080fd5b813581811115611975576119756118dd565b8060051b91506119868483016118f3565b81815291830184019184810190888411156119a057600080fd5b938501935b838510156119be578435825293850193908501906119a5565b98975050505050505050565b600080600080608085870312156119e057600080fd5b5050823594602084013594506040840135936060013592509050565b60008060408385031215611a0f57600080fd5b50508035926020909101359150565b80600f0b811461186657600080fd5b60008060008060808587031215611a4357600080fd5b84359350602085013592506040850135611a5c81611a1e565b91506060850135611a6c81611a1e565b939692955090935050565b600060208284031215611a8957600080fd5b813561045281611851565b634e487b7160e01b600052601160045260246000fd5b600082611ac757634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615611ae657611ae6611a94565b500290565b600082821015611afd57611afd611a94565b500390565b600060208284031215611b1457600080fd5b815161045281611851565b634e487b7160e01b600052603260045260246000fd5b60008219821115611b4857611b48611a94565b500190565b600060018201611b5f57611b5f611a94565b5060010190565b600060208284031215611b7857600080fd5b5051919050565b600060808284031215611b9157600080fd5b6040516080810181811067ffffffffffffffff82111715611bb457611bb46118dd565b6040528251611bc281611a1e565b81526020830151611bd281611a1e565b6020820152604083810151908201526060928301519281019290925250919050565b600081600f0b83600f0b60016001607f1b03600082136000841383830485118282161615611c2457611c24611a94565b6f7fffffffffffffffffffffffffffffff196000851282811687830587121615611c5057611c50611a94565b60008712925085820587128484161615611c6c57611c6c611a94565b85850587128184161615611c8257611c82611a94565b5050509290910295945050505050565b600081600f0b83600f0b600081128160016001607f1b031901831281151615611cbd57611cbd611a94565b8160016001607f1b03018313811615611cd857611cd8611a94565b5090039392505050565b600060208284031215611cf457600080fd5b8151801515811461045257600080fd5b60005b83811015611d1f578181015183820152602001611d07565b83811115610dea5750506000910152565b60008251611d42818460208701611d04565b9190910192915050565b6020815260008251806020840152611d6b816040850160208701611d04565b601f01601f1916919091016040019291505056fea2646970667358221220050d9285747ad8e6931be8501a6931b18d81561ff6d79c4b1c5e958ffda2d58d64736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101585760003560e01c8063939ea66b116100c3578063c9e14ed21161007c578063c9e14ed2146102c6578063d1d58b25146102d9578063e32890c4146102ec578063f2c098b71461030c578063f4359ce51461031f578063fc0c546a1461032957600080fd5b8063939ea66b1461026e57806398bdfdee146102775780639abd185c1461028a578063b80777ea1461029d578063bee5dc32146102a5578063c7c4ff46146102ad57600080fd5b80634f2bfe5b116101155780634f2bfe5b146101e657806378e97925146102175780638736659b14610220578063899519be146102295780638ec8468a1461023c578063925489a81461024b57600080fd5b80630f6592ef1461015d578063326a940714610183578063379607f51461018d5780633935c802146101a05780634607bf60146101b3578063485cc955146101d3575b600080fd5b61017061016b366004611838565b610342565b6040519081526020015b60405180910390f35b61018b610365565b005b61017061019b366004611838565b61036f565b6101706101ae366004611869565b610459565b6101706101c1366004611838565b60036020526000908152604090205481565b61018b6101e13660046118a4565b610472565b66038d7ea4c68006546101ff906001600160a01b031681565b6040516001600160a01b03909116815260200161017a565b61017060015481565b61017060025481565b610170610237366004611838565b610626565b61017066038d7ea4c680085481565b61025e610259366004611924565b61063c565b604051901515815260200161017a565b61017060055481565b6101706102853660046119ca565b610782565b6101706102983660046119fc565b610790565b6101706108d1565b61018b6108f0565b66071afd498d0009546101ff906001600160a01b031681565b6101706102d4366004611a2d565b610945565b6101706102e7366004611838565b610953565b6101706102fa366004611838565b60046020526000908152604090205481565b61018b61031a366004611a77565b61099f565b61017062093a8081565b66038d7ea4c68007546101ff906001600160a01b031681565b66038d7ea4c680098166038d7ea4c68000811061035e57600080fd5b0154905081565b61036d610a14565b565b6000600254421061038257610382610a14565b60055462093a806103938183611aaa565b61039d9190611acc565b66038d7ea4c68006549091506000906103c19085906001600160a01b031684610b8f565b905080156104525766038d7ea4c680065460405163076426ed60e11b815260048101869052602481018390526001600160a01b0390911690630ec84dda90604401600060405180830381600087803b15801561041c57600080fd5b505af1158015610430573d6000803e3d6000fd5b505050508066038d7ea4c68008600082825461044c9190611aeb565b90915550505b9392505050565b600061046785858585610c22565b90505b949350505050565b600054610100900460ff1661048d5760005460ff1615610491565b303b155b6104f95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b600054610100900460ff1615801561051b576000805461ffff19166101011790555b600062093a8061052b8142611aaa565b6105359190611acc565b90508060018190555080600581905550806002819055506000846001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561058c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b09190611b02565b66038d7ea4c6800780546001600160a01b038084166001600160a01b0319928316811790935566038d7ea4c6800680548a831690841617905566071afd498d000980549189169190921617905590915061060d9086600019610d16565b50508015610621576000805461ff00191690555b505050565b60068166038d7ea4c68000811061035e57600080fd5b6000600254421061064f5761064f610a14565b60055462093a806106608183611aaa565b61066a9190611acc565b66038d7ea4c68006549091506001600160a01b03166000805b85518110156107525760008682815181106106a0576106a0611b1f565b60200260200101519050806000036106b85750610752565b60006106c5828688610b8f565b9050801561073d5760405163076426ed60e11b815260048101839052602481018290526001600160a01b03861690630ec84dda90604401600060405180830381600087803b15801561071657600080fd5b505af115801561072a573d6000803e3d6000fd5b50505050808461073a9190611b35565b93505b5050808061074a90611b4d565b915050610683565b508015610777578066038d7ea4c6800860008282546107719190611aeb565b90915550505b506001949350505050565b600061046785858585610df0565b66038d7ea4c680065460405163e58f594760e01b8152600481018490526000916001600160a01b0316908290829063e58f594790602401602060405180830381865afa1580156107e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108089190611b66565b9050600061081883878785610c22565b6040516322565a1560e11b815260048101889052602481018290529091506000906001600160a01b038516906344acb42a90604401608060405180830381865afa15801561086a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088e9190611b7f565b90506108c38160400151876108a39190611aeb565b82602001516108b29190611bf4565b82516108be9190611c92565b610e3c565b600f0b979650505050505050565b600062093a806108e18142611aaa565b6108eb9190611acc565b905090565b66071afd498d0009546001600160a01b0316331461093d5760405162461bcd60e51b815260206004820152600a60248201526910b232b837b9b4ba37b960b11b60448201526064016104f0565b61036d610e57565b60006104678585858561101a565b60008062093a80806005546109689190611aaa565b6109729190611acc565b66038d7ea4c68006549091506000906109969085906001600160a01b03168461107f565b51949350505050565b66071afd498d0009546001600160a01b031633146109ec5760405162461bcd60e51b815260206004820152600a60248201526910b232b837b9b4ba37b960b11b60448201526064016104f0565b66071afd498d000980546001600160a01b0319166001600160a01b0392909216919091179055565b66038d7ea4c68006546002546001600160a01b0390911690600062093a80610a3c8142611aaa565b610a469190611acc565b9050826001600160a01b031663c2c4c5c16040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610a8357600080fd5b505af1158015610a97573d6000803e3d6000fd5b5050505060005b6014811015610b8757818311610b87576000610aba85856114f2565b604051638ad4c44760e01b8152600481018290529091506000906001600160a01b03871690638ad4c44790602401608060405180830381865afa158015610b05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b299190611b7f565b9050610b438582604001518360000151846020015161101a565b66038d7ea4c680098666038d7ea4c680008110610b6257610b62611b1f565b01555050610b7362093a8084611b35565b925080610b7f81611b4d565b915050610a9e565b505060025550565b600080610b9d85858561107f565b90508060800151156109965760208181018051600088815260048452604080822092909255818501516003855290829020558351915160608086015183518b815295860194909452918401528201527fcae2990aa9af8eb1c64713b7eddb3a80bf18e49a94a13fe0d0002b5d61d58f009060800160405180910390a151949350505050565b60008082815b6080811015610d0a5781831015610d0a5760006002610c478486611b35565b610c52906002611b35565b610c5c9190611aaa565b6040516322565a1560e11b8152600481018a9052602481018290529091506000906001600160a01b038b16906344acb42a90604401608060405180830381865afa158015610cae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd29190611b7f565b905087816040015111610ce757819450610cf5565b610cf2600183611aeb565b93505b50508080610d0290611b4d565b915050610c28565b50909695505050505050565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015610d67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8b9190611b66565b610d959190611b35565b604080516001600160a01b038616602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052909150610dea908590611647565b50505050565b60008284111580610e085750610e068385611aeb565b155b80610e11575081155b15610e1d57508361046a565b81610e288486611aeb565b610e329087611acc565b6104679190611aaa565b60008082600f0b12610e4e5781610e51565b60005b92915050565b66038d7ea4c68007546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610ea6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eca9190611b66565b9050600066038d7ea4c680085482610ee29190611aeb565b66038d7ea4c680088390556005549091506000610eff8242611aeb565b426005559050600062093a80610f158185611aaa565b610f1f9190611acc565b90506000805b6014811015610fd857610f3b62093a8084611b35565b915081421015610f8557610f5186428787610df0565b60068466038d7ea4c680008110610f6a57610f6a611b1f565b016000828254610f7a9190611b35565b90915550610fd89050565b610f9186838787610df0565b60068466038d7ea4c680008110610faa57610faa611b1f565b016000828254610fba9190611b35565b90915550508194508192508080610fd090611b4d565b915050610f25565b5060408051428152602081018790527fce749457b74e10f393f2c6b1ce4261b78791376db5a3f501477a809f03f500d6910160405180910390a1505050505050565b60008385101561102c5750600061046a565b60006110388587611aeb565b90506110448184611bf4565b600f0b84600f0b121561105b57600091505061046a565b6110726110688285611bf4565b6108be9086611c92565b600f0b9695505050505050565b6110b36040518060a00160405280600081526020016000815260200160008152602001600081526020016000151581525090565b6000806000856001600160a01b031663e58f5947886040518263ffffffff1660e01b81526004016110e691815260200190565b602060405180830381865afa158015611103573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111279190611b66565b600154909150600082900361116f576040518060a001604052806000815260200160008152602001600081526020016000815260200160001515815250945050505050610452565b6000888152600360205260408120549081900361119957611192888a8486610c22565b94506111ab565b60008981526004602052604090205494505b846000036111b857600194505b6040516322565a1560e11b8152600481018a9052602481018690526000906001600160a01b038a16906344acb42a90604401608060405180830381865afa158015611207573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122b9190611b7f565b9050816000036112705762093a8080600162093a80846040015161124f9190611b35565b6112599190611aeb565b6112639190611aaa565b61126d9190611acc565b91505b60055482106112b4576040518060a0016040528060008152602001600081526020016000815260200160008152602001600015158152509650505050505050610452565b828210156112c0578291505b6040805160808101825260008082526020820181905291810182905260608101829052905b60328110156114a357898410156114a3578260400151841015801561130a5750858811155b156113d05761131a600189611b35565b9750829150858811156113595760405180608001604052806000600f0b81526020016000600f0b81526020016000815260200160008152509250611491565b6040516322565a1560e11b8152600481018d9052602481018990526001600160a01b038c16906344acb42a90604401608060405180830381865afa1580156113a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c99190611b7f565b9250611491565b60008260400151856113e29190611aeb565b905060006114058460200151836113f99190611bf4565b85516108be9190611c92565b600f0b9050801580156114175750878a115b156114235750506114a3565b66038d7ea4c680098666038d7ea4c68000811061144257611442611b1f565b015460068766038d7ea4c68000811061145d5761145d611b1f565b01546114699083611acc565b6114739190611aaa565b61147d908a611b35565b985061148c62093a8087611b35565b955050505b8061149b81611b4d565b9150506112e5565b506040518060a001604052808781526020016114cb8760018b6114c69190611aeb565b611719565b81526020810194909452604084019590955250506001606090910152509695505050505050565b600080600090506000846001600160a01b031663900cf0cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611539573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155d9190611b66565b905060005b608081101561163d578183101561163d57600060026115818486611b35565b61158c906002611b35565b6115969190611aaa565b604051638ad4c44760e01b8152600481018290529091506000906001600160a01b03891690638ad4c44790602401608060405180830381865afa1580156115e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116059190611b7f565b90508681604001511161161a57819450611628565b611625600183611aeb565b93505b5050808061163590611b4d565b915050611562565b5090949350505050565b600061169c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661172f9092919063ffffffff16565b80519091501561062157808060200190518101906116ba9190611ce2565b6106215760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016104f0565b60008183106117285781610452565b5090919050565b60606001600160a01b0384163b6117885760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104f0565b600080856001600160a01b0316856040516117a39190611d30565b6000604051808303816000865af19150503d80600081146117e0576040519150601f19603f3d011682016040523d82523d6000602084013e6117e5565b606091505b50915091506117f58282866117ff565b9695505050505050565b6060831561180e575081610452565b82511561181e5782518084602001fd5b8160405162461bcd60e51b81526004016104f09190611d4c565b60006020828403121561184a57600080fd5b5035919050565b6001600160a01b038116811461186657600080fd5b50565b6000806000806080858703121561187f57600080fd5b843561188a81611851565b966020860135965060408601359560600135945092505050565b600080604083850312156118b757600080fd5b82356118c281611851565b915060208301356118d281611851565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561191c5761191c6118dd565b604052919050565b6000602080838503121561193757600080fd5b823567ffffffffffffffff8082111561194f57600080fd5b818501915085601f83011261196357600080fd5b813581811115611975576119756118dd565b8060051b91506119868483016118f3565b81815291830184019184810190888411156119a057600080fd5b938501935b838510156119be578435825293850193908501906119a5565b98975050505050505050565b600080600080608085870312156119e057600080fd5b5050823594602084013594506040840135936060013592509050565b60008060408385031215611a0f57600080fd5b50508035926020909101359150565b80600f0b811461186657600080fd5b60008060008060808587031215611a4357600080fd5b84359350602085013592506040850135611a5c81611a1e565b91506060850135611a6c81611a1e565b939692955090935050565b600060208284031215611a8957600080fd5b813561045281611851565b634e487b7160e01b600052601160045260246000fd5b600082611ac757634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615611ae657611ae6611a94565b500290565b600082821015611afd57611afd611a94565b500390565b600060208284031215611b1457600080fd5b815161045281611851565b634e487b7160e01b600052603260045260246000fd5b60008219821115611b4857611b48611a94565b500190565b600060018201611b5f57611b5f611a94565b5060010190565b600060208284031215611b7857600080fd5b5051919050565b600060808284031215611b9157600080fd5b6040516080810181811067ffffffffffffffff82111715611bb457611bb46118dd565b6040528251611bc281611a1e565b81526020830151611bd281611a1e565b6020820152604083810151908201526060928301519281019290925250919050565b600081600f0b83600f0b60016001607f1b03600082136000841383830485118282161615611c2457611c24611a94565b6f7fffffffffffffffffffffffffffffff196000851282811687830587121615611c5057611c50611a94565b60008712925085820587128484161615611c6c57611c6c611a94565b85850587128184161615611c8257611c82611a94565b5050509290910295945050505050565b600081600f0b83600f0b600081128160016001607f1b031901831281151615611cbd57611cbd611a94565b8160016001607f1b03018313811615611cd857611cd8611a94565b5090039392505050565b600060208284031215611cf457600080fd5b8151801515811461045257600080fd5b60005b83811015611d1f578181015183820152602001611d07565b83811115610dea5750506000910152565b60008251611d42818460208701611d04565b9190910192915050565b6020815260008251806020840152611d6b816040850160208701611d04565b601f01601f1916919091016040019291505056fea2646970667358221220050d9285747ad8e6931be8501a6931b18d81561ff6d79c4b1c5e958ffda2d58d64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "adjustToDistribute(uint256,uint256,uint256,uint256)": {
        "details": "For testing purposes."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 26510,
        "contract": "contracts/base/vote/VeDistUpgradeable.sol:VeDistUpgradeable",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 26513,
        "contract": "contracts/base/vote/VeDistUpgradeable.sol:VeDistUpgradeable",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 15250,
        "contract": "contracts/base/vote/VeDistUpgradeable.sol:VeDistUpgradeable",
        "label": "startTime",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 15252,
        "contract": "contracts/base/vote/VeDistUpgradeable.sol:VeDistUpgradeable",
        "label": "timeCursor",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 15256,
        "contract": "contracts/base/vote/VeDistUpgradeable.sol:VeDistUpgradeable",
        "label": "timeCursorOf",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 15260,
        "contract": "contracts/base/vote/VeDistUpgradeable.sol:VeDistUpgradeable",
        "label": "userEpochOf",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 15262,
        "contract": "contracts/base/vote/VeDistUpgradeable.sol:VeDistUpgradeable",
        "label": "lastTokenTime",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 15266,
        "contract": "contracts/base/vote/VeDistUpgradeable.sol:VeDistUpgradeable",
        "label": "tokensPerWeek",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_uint256)1000000000000000_storage"
      },
      {
        "astId": 15268,
        "contract": "contracts/base/vote/VeDistUpgradeable.sol:VeDistUpgradeable",
        "label": "votingEscrow",
        "offset": 0,
        "slot": "1000000000000006",
        "type": "t_address"
      },
      {
        "astId": 15270,
        "contract": "contracts/base/vote/VeDistUpgradeable.sol:VeDistUpgradeable",
        "label": "token",
        "offset": 0,
        "slot": "1000000000000007",
        "type": "t_address"
      },
      {
        "astId": 15272,
        "contract": "contracts/base/vote/VeDistUpgradeable.sol:VeDistUpgradeable",
        "label": "tokenLastBalance",
        "offset": 0,
        "slot": "1000000000000008",
        "type": "t_uint256"
      },
      {
        "astId": 15276,
        "contract": "contracts/base/vote/VeDistUpgradeable.sol:VeDistUpgradeable",
        "label": "veSupply",
        "offset": 0,
        "slot": "1000000000000009",
        "type": "t_array(t_uint256)1000000000000000_storage"
      },
      {
        "astId": 15278,
        "contract": "contracts/base/vote/VeDistUpgradeable.sol:VeDistUpgradeable",
        "label": "depositor",
        "offset": 0,
        "slot": "2000000000000009",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)1000000000000000_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[1000000000000000]",
        "numberOfBytes": "32000000000000000"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}