{
  "address": "0x0b2e287309A8728A01C6Ec8683349E524e103b25",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "locktime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum IVe.DepositType",
          "name": "depositType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        }
      ],
      "name": "Supply",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "abstain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_approved",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "attachToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "attachments",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_block",
          "type": "uint256"
        }
      ],
      "name": "balanceOfAtNFT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "balanceOfNFT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_t",
          "type": "uint256"
        }
      ],
      "name": "balanceOfNFTAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "block_number",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkpoint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lockDuration",
          "type": "uint256"
        }
      ],
      "name": "createLock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lockDuration",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "createLockFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "depositFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "detachToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getLastUserSlope",
      "outputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "increaseAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lockDuration",
          "type": "uint256"
        }
      ],
      "name": "increaseUnlockTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "controller_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "isApprovedOrOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "locked",
      "outputs": [
        {
          "internalType": "int128",
          "name": "amount",
          "type": "int128"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "lockedEnd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_to",
          "type": "uint256"
        }
      ],
      "name": "merge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ownershipChange",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_loc",
          "type": "uint256"
        }
      ],
      "name": "pointHistory",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int128",
              "name": "bias",
              "type": "int128"
            },
            {
              "internalType": "int128",
              "name": "slope",
              "type": "int128"
            },
            {
              "internalType": "uint256",
              "name": "ts",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "blk",
              "type": "uint256"
            }
          ],
          "internalType": "struct IVe.Point",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "slopeChanges",
      "outputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenIndex",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_block",
          "type": "uint256"
        }
      ],
      "name": "totalSupplyAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "t",
          "type": "uint256"
        }
      ],
      "name": "totalSupplyAtT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userPointEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_loc",
          "type": "uint256"
        }
      ],
      "name": "userPointHistory",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int128",
              "name": "bias",
              "type": "int128"
            },
            {
              "internalType": "int128",
              "name": "slope",
              "type": "int128"
            },
            {
              "internalType": "uint256",
              "name": "ts",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "blk",
              "type": "uint256"
            }
          ],
          "internalType": "struct IVe.Point",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_idx",
          "type": "uint256"
        }
      ],
      "name": "userPointHistoryTs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "voted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "voting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x13656056cf99aa0bcc1dd9d942a66f5d35717f57e5b736f0492c4b45c70547ba",
  "receipt": {
    "to": null,
    "from": "0x1381C573b97Bf393A81fA42760DD21E109d8092B",
    "contractAddress": "0x0b2e287309A8728A01C6Ec8683349E524e103b25",
    "transactionIndex": 0,
    "gasUsed": "3748433",
    "logsBloom": "0x
    "blockHash": "0xd8086ce5bed11ae9109a7bf933459e2257014a9a31000ca0b7734adfe82af5b3",
    "transactionHash": "0x13656056cf99aa0bcc1dd9d942a66f5d35717f57e5b736f0492c4b45c70547ba",
    "logs": [],
    "blockNumber": 6,
    "cumulativeGasUsed": "3748433",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "3b3b283a31496f0704cc082007acea88",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"locktime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IVe.DepositType\",\"name\":\"depositType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"name\":\"Supply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"abstain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"attachToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"attachments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"balanceOfAtNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"balanceOfNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_t\",\"type\":\"uint256\"}],\"name\":\"balanceOfNFTAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"block_number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockDuration\",\"type\":\"uint256\"}],\"name\":\"createLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"createLockFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"detachToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getLastUserSlope\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increaseAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockDuration\",\"type\":\"uint256\"}],\"name\":\"increaseUnlockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"controller_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isApprovedOrOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"amount\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"lockedEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"merge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownershipChange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loc\",\"type\":\"uint256\"}],\"name\":\"pointHistory\",\"outputs\":[{\"components\":[{\"internalType\":\"int128\",\"name\":\"bias\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"slope\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blk\",\"type\":\"uint256\"}],\"internalType\":\"struct IVe.Point\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"slopeChanges\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenIndex\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAtT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userPointEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loc\",\"type\":\"uint256\"}],\"name\":\"userPointHistory\",\"outputs\":[{\"components\":[{\"internalType\":\"int128\",\"name\":\"bias\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"slope\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blk\",\"type\":\"uint256\"}],\"internalType\":\"struct IVe.Point\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"userPointHistoryTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"voting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Set or reaffirm the approved address for an NFT. The zero address indicates there is no approved address.      Throws unless `msg.sender` is the current NFT owner, or an authorized operator of the current owner.      Throws if `_tokenId` is not a valid NFT. (NOTE: This is not written the EIP)      Throws if `_approved` is the current owner. (NOTE: This is not written the EIP)\",\"params\":{\"_approved\":\"Address to be approved for the given NFT ID.\",\"_tokenId\":\"ID of the token to be approved.\"}},\"balanceOf(address)\":{\"details\":\"Returns the number of NFTs owned by `_owner`.      Throws if `_owner` is the zero address. NFTs assigned to the zero address are considered invalid.\",\"params\":{\"_owner\":\"Address for whom to query the balance.\"}},\"createLock(uint256,uint256)\":{\"params\":{\"_lockDuration\":\"Number of seconds to lock tokens for (rounded down to nearest week)\",\"_value\":\"Amount to deposit\"}},\"createLockFor(uint256,uint256,address)\":{\"params\":{\"_lockDuration\":\"Number of seconds to lock tokens for (rounded down to nearest week)\",\"_to\":\"Address to deposit\",\"_value\":\"Amount to deposit\"}},\"depositFor(uint256,uint256)\":{\"details\":\"Anyone (even a smart contract) can deposit for someone else, but      cannot extend their locktime and deposit for a brand new user\",\"params\":{\"_tokenId\":\"lock NFT\",\"_value\":\"Amount to add to user's lock\"}},\"getApproved(uint256)\":{\"details\":\"Get the approved address for a single NFT.\",\"params\":{\"_tokenId\":\"ID of the NFT to query the approval of.\"}},\"getLastUserSlope(uint256)\":{\"params\":{\"_tokenId\":\"token of the NFT\"},\"returns\":{\"_0\":\"Value of the slope\"}},\"increaseAmount(uint256,uint256)\":{\"params\":{\"_value\":\"Amount of tokens to deposit and add to the lock\"}},\"increaseUnlockTime(uint256,uint256)\":{\"params\":{\"_lockDuration\":\"New number of seconds until tokens unlock\"}},\"initialize(address,address)\":{\"params\":{\"token_\":\"`ERC20CRV` token address\"}},\"isApprovedForAll(address,address)\":{\"details\":\"Checks if `_operator` is an approved operator for `_owner`.\",\"params\":{\"_operator\":\"The address that acts on behalf of the owner.\",\"_owner\":\"The address that owns the NFTs.\"}},\"lockedEnd(uint256)\":{\"params\":{\"_tokenId\":\"User NFT\"},\"returns\":{\"_0\":\"Epoch time of the lock end\"}},\"ownerOf(uint256)\":{\"details\":\"Returns the address of the owner of the NFT.\",\"params\":{\"_tokenId\":\"The identifier for an NFT.\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Transfers the ownership of an NFT from one address to another address.      Throws unless `msg.sender` is the current owner, an authorized operator, or the      approved address for this NFT.      Throws if `_from` is not the current owner.      Throws if `_to` is the zero address.      Throws if `_tokenId` is not a valid NFT.      If `_to` is a smart contract, it calls `onERC721Received` on `_to` and throws if      the return value is not `bytes4(keccak256(\\\"onERC721Received(address,address,uint,bytes)\\\"))`.\",\"params\":{\"_from\":\"The current owner of the NFT.\",\"_to\":\"The new owner.\",\"_tokenId\":\"The NFT to transfer.\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Transfers the ownership of an NFT from one address to another address.      Throws unless `msg.sender` is the current owner, an authorized operator, or the      approved address for this NFT.      Throws if `_from` is not the current owner.      Throws if `_to` is the zero address.      Throws if `_tokenId` is not a valid NFT.      If `_to` is a smart contract, it calls `onERC721Received` on `_to` and throws if      the return value is not `bytes4(keccak256(\\\"onERC721Received(address,address,uint,bytes)\\\"))`.\",\"params\":{\"_data\":\"Additional data with no specified format, sent in call to `_to`.\",\"_from\":\"The current owner of the NFT.\",\"_to\":\"The new owner.\",\"_tokenId\":\"The NFT to transfer.\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Enables or disables approval for a third party (\\\"operator\\\") to manage all of      `msg.sender`'s assets. It also emits the ApprovalForAll event.      Throws if `_operator` is the `msg.sender`. (NOTE: This is not written the EIP)\",\"params\":{\"_approved\":\"True if the operators is approved, false to revoke approval.\",\"_operator\":\"Address to add to the set of authorized operators.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Interface identification is specified in ERC-165.\",\"params\":{\"_interfaceID\":\"Id of the interface\"}},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Get token by index\"},\"tokenURI(uint256)\":{\"details\":\"Returns current token URI metadata\",\"params\":{\"_tokenId\":\"Token ID to fetch URI for.\"}},\"totalSupplyAt(uint256)\":{\"params\":{\"_block\":\"Block to calculate the total voting power at\"},\"returns\":{\"_0\":\"Total voting power at `_block`\"}},\"totalSupplyAtT(uint256)\":{\"details\":\"Adheres to the ERC20 `totalSupply` interface for Aragon compatibility\",\"returns\":{\"_0\":\"Total voting power\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Throws unless `msg.sender` is the current owner,      an authorized operator, or the approved address for this NFT.      Throws if `_from` is not the current owner.      Throws if `_to` is the zero address.      Throws if `_tokenId` is not a valid NFT.\",\"params\":{\"_from\":\"The current owner of the NFT.\",\"_to\":\"The new owner.\",\"_tokenId\":\"The NFT to transfer.\"}},\"userPointHistoryTs(uint256,uint256)\":{\"params\":{\"_idx\":\"User epoch number\",\"_tokenId\":\"token of the NFT\"},\"returns\":{\"_0\":\"Epoch time of the checkpoint\"}},\"withdraw(uint256)\":{\"details\":\"Only possible if the lock has expired\"}},\"stateVariables\":{\"ERC165_INTERFACE_ID\":{\"details\":\"ERC165 interface ID of ERC165\"},\"ERC721_INTERFACE_ID\":{\"details\":\"ERC165 interface ID of ERC721\"},\"ERC721_METADATA_INTERFACE_ID\":{\"details\":\"ERC165 interface ID of ERC721Metadata\"},\"_pointHistory\":{\"details\":\"epoch -> unsigned point\"},\"_userPointHistory\":{\"details\":\"user -> Point[userEpoch]\"},\"idToApprovals\":{\"details\":\"Mapping from NFT ID to approved address.\"},\"idToOwner\":{\"details\":\"Mapping from NFT ID to the address that owns it.\"},\"name\":{\"details\":\"Returns the token collection name.\"},\"ownerToNFTokenCount\":{\"details\":\"Mapping from owner address to count of his tokens.\"},\"ownerToNFTokenIdList\":{\"details\":\"Mapping from owner address to mapping of index to tokenIds\"},\"ownerToOperators\":{\"details\":\"Mapping from owner address to mapping of operator addresses.\"},\"supportedInterfaces\":{\"details\":\"Mapping of interface id to bool about whether or not it's supported\"},\"symbol\":{\"details\":\"Returns the token collection symbol.\"},\"tokenId\":{\"details\":\"Current count of token\"},\"tokenToOwnerIndex\":{\"details\":\"Mapping from NFT ID to index of owner\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkpoint()\":{\"notice\":\"Record global data to checkpoint\"},\"createLock(uint256,uint256)\":{\"notice\":\"Deposit `_value` tokens for `msg.sender` and lock for `_lock_duration`\"},\"createLockFor(uint256,uint256,address)\":{\"notice\":\"Deposit `_value` tokens for `_to` and lock for `_lock_duration`\"},\"depositFor(uint256,uint256)\":{\"notice\":\"Deposit `_value` tokens for `_tokenId` and add to the lock\"},\"getLastUserSlope(uint256)\":{\"notice\":\"Get the most recently recorded rate of voting power decrease for `_tokenId`\"},\"increaseAmount(uint256,uint256)\":{\"notice\":\"Deposit `_value` additional tokens for `_tokenId` without modifying the unlock time\"},\"increaseUnlockTime(uint256,uint256)\":{\"notice\":\"Extend the unlock time for `_tokenId`\"},\"initialize(address,address)\":{\"notice\":\"Contract constructor\"},\"lockedEnd(uint256)\":{\"notice\":\"Get timestamp when `_tokenId`'s lock finishes\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"This works even if sender doesn't own any tokens at the time.\"},\"totalSupplyAt(uint256)\":{\"notice\":\"Calculate total voting power at some point in the past\"},\"totalSupplyAtT(uint256)\":{\"notice\":\"Calculate total voting power\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"The caller is responsible to confirm that `_to` is capable of receiving NFTs or else        they maybe be permanently lost.\"},\"userPointHistoryTs(uint256,uint256)\":{\"notice\":\"Get the timestamp for checkpoint `_idx` for `_tokenId`\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw all tokens for `_tokenId`\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/base/vote/VeUpgradeable.sol\":\"VeUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/base/Reentrancy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nabstract contract Reentrancy {\\n    /// @dev simple re-entrancy check\\n    uint internal _unlocked = 1;\\n\\n    modifier lock() {\\n        require(_unlocked == 1, \\\"Reentrant call\\\");\\n        _unlocked = 2;\\n        _;\\n        _unlocked = 1;\\n    }\\n}\\n\",\"keccak256\":\"0x59c07b769bd280322dea57c93ed20b3e6e1fe1018ab9937b0dfcaddcfb5f2780\",\"license\":\"MIT\"},\"contracts/base/vote/VeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../../lib/Base64.sol\\\";\\nimport \\\"../../lib/Initializable.sol\\\";\\nimport \\\"../../interface/IERC20.sol\\\";\\nimport \\\"../../interface/IERC721.sol\\\";\\nimport \\\"../../interface/IERC721Metadata.sol\\\";\\nimport \\\"../../interface/IVe.sol\\\";\\nimport \\\"../../interface/IERC721Receiver.sol\\\";\\nimport \\\"../../interface/IController.sol\\\";\\nimport \\\"../Reentrancy.sol\\\";\\nimport \\\"../../lib/SafeERC20.sol\\\";\\nimport \\\"../../lib/Math.sol\\\";\\n\\ncontract VeUpgradeable is\\n    IERC721,\\n    IERC721Metadata,\\n    IVe,\\n    Reentrancy,\\n    Initializable\\n{\\n    using SafeERC20 for IERC20;\\n\\n    uint internal constant WEEK = 1 weeks;\\n    uint internal constant MAX_TIME = 4 * 365 * 86400;\\n    int128 internal constant I_MAX_TIME = 4 * 365 * 86400;\\n    uint internal constant MULTIPLIER = 1 ether;\\n\\n    address public override token;\\n    uint public supply;\\n    mapping(uint => LockedBalance) public locked;\\n\\n    mapping(uint => uint) public ownershipChange;\\n\\n    uint public override epoch;\\n    /// @dev epoch -> unsigned point\\n    mapping(uint => Point) internal _pointHistory;\\n    /// @dev user -> Point[userEpoch]\\n    mapping(uint => Point[1000000000]) internal _userPointHistory;\\n\\n    mapping(uint => uint) public override userPointEpoch;\\n    mapping(uint => int128) public slopeChanges; // time -> signed slope change\\n\\n    mapping(uint => uint) public attachments;\\n    mapping(uint => bool) public voted;\\n    address public controller;\\n\\n    string public constant override name = \\\"veVOLT\\\";\\n    string public constant override symbol = \\\"veVOLT\\\";\\n    string public constant version = \\\"1.0.0\\\";\\n    uint8 public constant decimals = 18;\\n\\n    /// @dev Current count of token\\n    uint internal tokenId;\\n\\n    /// @dev Mapping from NFT ID to the address that owns it.\\n    mapping(uint => address) internal idToOwner;\\n\\n    /// @dev Mapping from NFT ID to approved address.\\n    mapping(uint => address) internal idToApprovals;\\n\\n    /// @dev Mapping from owner address to count of his tokens.\\n    mapping(address => uint) internal ownerToNFTokenCount;\\n\\n    /// @dev Mapping from owner address to mapping of index to tokenIds\\n    mapping(address => mapping(uint => uint)) internal ownerToNFTokenIdList;\\n\\n    /// @dev Mapping from NFT ID to index of owner\\n    mapping(uint => uint) internal tokenToOwnerIndex;\\n\\n    /// @dev Mapping from owner address to mapping of operator addresses.\\n    mapping(address => mapping(address => bool)) internal ownerToOperators;\\n\\n    /// @dev Mapping of interface id to bool about whether or not it's supported\\n    mapping(bytes4 => bool) internal supportedInterfaces;\\n\\n    /// @dev ERC165 interface ID of ERC165\\n    bytes4 internal constant ERC165_INTERFACE_ID = 0x01ffc9a7;\\n\\n    /// @dev ERC165 interface ID of ERC721\\n    bytes4 internal constant ERC721_INTERFACE_ID = 0x80ac58cd;\\n\\n    /// @dev ERC165 interface ID of ERC721Metadata\\n    bytes4 internal constant ERC721_METADATA_INTERFACE_ID = 0x5b5e139f;\\n\\n    event Deposit(\\n        address indexed provider,\\n        uint tokenId,\\n        uint value,\\n        uint indexed locktime,\\n        DepositType depositType,\\n        uint ts\\n    );\\n    event Withdraw(address indexed provider, uint tokenId, uint value, uint ts);\\n    event Supply(uint prevSupply, uint supply);\\n\\n    /// @notice Contract constructor\\n    /// @param token_ `ERC20CRV` token address\\n    function initialize(address token_, address controller_)\\n        public\\n        initializer\\n    {\\n        token = token_;\\n        controller = controller_;\\n        _pointHistory[0].blk = block.number;\\n        _pointHistory[0].ts = block.timestamp;\\n\\n        supportedInterfaces[ERC165_INTERFACE_ID] = true;\\n        supportedInterfaces[ERC721_INTERFACE_ID] = true;\\n        supportedInterfaces[ERC721_METADATA_INTERFACE_ID] = true;\\n        _unlocked = 1;\\n\\n        // mint-ish\\n        emit Transfer(address(0), address(this), tokenId);\\n        // burn-ish\\n        emit Transfer(address(this), address(0), tokenId);\\n    }\\n\\n    function _voter() internal view returns (address) {\\n        return IController(controller).voter();\\n    }\\n\\n    /// @dev Interface identification is specified in ERC-165.\\n    /// @param _interfaceID Id of the interface\\n    function supportsInterface(bytes4 _interfaceID)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return supportedInterfaces[_interfaceID];\\n    }\\n\\n    /// @notice Get the most recently recorded rate of voting power decrease for `_tokenId`\\n    /// @param _tokenId token of the NFT\\n    /// @return Value of the slope\\n    function getLastUserSlope(uint _tokenId) external view returns (int128) {\\n        uint uEpoch = userPointEpoch[_tokenId];\\n        return _userPointHistory[_tokenId][uEpoch].slope;\\n    }\\n\\n    /// @notice Get the timestamp for checkpoint `_idx` for `_tokenId`\\n    /// @param _tokenId token of the NFT\\n    /// @param _idx User epoch number\\n    /// @return Epoch time of the checkpoint\\n    function userPointHistoryTs(uint _tokenId, uint _idx)\\n        external\\n        view\\n        returns (uint)\\n    {\\n        return _userPointHistory[_tokenId][_idx].ts;\\n    }\\n\\n    /// @notice Get timestamp when `_tokenId`'s lock finishes\\n    /// @param _tokenId User NFT\\n    /// @return Epoch time of the lock end\\n    function lockedEnd(uint _tokenId) external view returns (uint) {\\n        return locked[_tokenId].end;\\n    }\\n\\n    /// @dev Returns the number of NFTs owned by `_owner`.\\n    ///      Throws if `_owner` is the zero address. NFTs assigned to the zero address are considered invalid.\\n    /// @param _owner Address for whom to query the balance.\\n    function _balance(address _owner) internal view returns (uint) {\\n        return ownerToNFTokenCount[_owner];\\n    }\\n\\n    /// @dev Returns the number of NFTs owned by `_owner`.\\n    ///      Throws if `_owner` is the zero address. NFTs assigned to the zero address are considered invalid.\\n    /// @param _owner Address for whom to query the balance.\\n    function balanceOf(address _owner) external view override returns (uint) {\\n        return _balance(_owner);\\n    }\\n\\n    /// @dev Returns the address of the owner of the NFT.\\n    /// @param _tokenId The identifier for an NFT.\\n    function ownerOf(uint _tokenId) public view override returns (address) {\\n        return idToOwner[_tokenId];\\n    }\\n\\n    /// @dev Get the approved address for a single NFT.\\n    /// @param _tokenId ID of the NFT to query the approval of.\\n    function getApproved(uint _tokenId)\\n        external\\n        view\\n        override\\n        returns (address)\\n    {\\n        return idToApprovals[_tokenId];\\n    }\\n\\n    /// @dev Checks if `_operator` is an approved operator for `_owner`.\\n    /// @param _owner The address that owns the NFTs.\\n    /// @param _operator The address that acts on behalf of the owner.\\n    function isApprovedForAll(address _owner, address _operator)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return (ownerToOperators[_owner])[_operator];\\n    }\\n\\n    /// @dev  Get token by index\\n    function tokenOfOwnerByIndex(address _owner, uint _tokenIndex)\\n        external\\n        view\\n        returns (uint)\\n    {\\n        return ownerToNFTokenIdList[_owner][_tokenIndex];\\n    }\\n\\n    /// @dev Returns whether the given spender can transfer a given token ID\\n    /// @param _spender address of the spender to query\\n    /// @param _tokenId uint ID of the token to be transferred\\n    /// @return bool whether the msg.sender is approved for the given token ID, is an operator of the owner, or is the owner of the token\\n    function _isApprovedOrOwner(address _spender, uint _tokenId)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        address owner = idToOwner[_tokenId];\\n        bool spenderIsOwner = owner == _spender;\\n        bool spenderIsApproved = _spender == idToApprovals[_tokenId];\\n        bool spenderIsApprovedForAll = (ownerToOperators[owner])[_spender];\\n        return spenderIsOwner || spenderIsApproved || spenderIsApprovedForAll;\\n    }\\n\\n    function isApprovedOrOwner(address _spender, uint _tokenId)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return _isApprovedOrOwner(_spender, _tokenId);\\n    }\\n\\n    /// @dev Add a NFT to an index mapping to a given address\\n    /// @param _to address of the receiver\\n    /// @param _tokenId uint ID Of the token to be added\\n    function _addTokenToOwnerList(address _to, uint _tokenId) internal {\\n        uint currentCount = _balance(_to);\\n\\n        ownerToNFTokenIdList[_to][currentCount] = _tokenId;\\n        tokenToOwnerIndex[_tokenId] = currentCount;\\n    }\\n\\n    /// @dev Remove a NFT from an index mapping to a given address\\n    /// @param _from address of the sender\\n    /// @param _tokenId uint ID Of the token to be removed\\n    function _removeTokenFromOwnerList(address _from, uint _tokenId) internal {\\n        // Delete\\n        uint currentCount = _balance(_from) - 1;\\n        uint currentIndex = tokenToOwnerIndex[_tokenId];\\n\\n        if (currentCount == currentIndex) {\\n            // update ownerToNFTokenIdList\\n            ownerToNFTokenIdList[_from][currentCount] = 0;\\n            // update tokenToOwnerIndex\\n            tokenToOwnerIndex[_tokenId] = 0;\\n        } else {\\n            uint lastTokenId = ownerToNFTokenIdList[_from][currentCount];\\n\\n            // Add\\n            // update ownerToNFTokenIdList\\n            ownerToNFTokenIdList[_from][currentIndex] = lastTokenId;\\n            // update tokenToOwnerIndex\\n            tokenToOwnerIndex[lastTokenId] = currentIndex;\\n\\n            // Delete\\n            // update ownerToNFTokenIdList\\n            ownerToNFTokenIdList[_from][currentCount] = 0;\\n            // update tokenToOwnerIndex\\n            tokenToOwnerIndex[_tokenId] = 0;\\n        }\\n    }\\n\\n    /// @dev Add a NFT to a given address\\n    ///      Throws if `_tokenId` is owned by someone.\\n    function _addTokenTo(address _to, uint _tokenId) internal {\\n        // assume always call on new tokenId or after _removeTokenFrom() call\\n        // Change the owner\\n        idToOwner[_tokenId] = _to;\\n        // Update owner token index tracking\\n        _addTokenToOwnerList(_to, _tokenId);\\n        // Change count tracking\\n        ownerToNFTokenCount[_to] += 1;\\n    }\\n\\n    /// @dev Remove a NFT from a given address\\n    ///      Throws if `_from` is not the current owner.\\n    function _removeTokenFrom(address _from, uint _tokenId) internal {\\n        require(idToOwner[_tokenId] == _from, \\\"!owner remove\\\");\\n        // Change the owner\\n        idToOwner[_tokenId] = address(0);\\n        // Update owner token index tracking\\n        _removeTokenFromOwnerList(_from, _tokenId);\\n        // Change count tracking\\n        ownerToNFTokenCount[_from] -= 1;\\n    }\\n\\n    /// @dev Execute transfer of a NFT.\\n    ///      Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\\n    ///      address for this NFT. (NOTE: `msg.sender` not allowed in internal function so pass `_sender`.)\\n    ///      Throws if `_to` is the zero address.\\n    ///      Throws if `_from` is not the current owner.\\n    ///      Throws if `_tokenId` is not a valid NFT.\\n    function _transferFrom(\\n        address _from,\\n        address _to,\\n        uint _tokenId,\\n        address _sender\\n    ) internal {\\n        require(attachments[_tokenId] == 0 && !voted[_tokenId], \\\"attached\\\");\\n        require(_isApprovedOrOwner(_sender, _tokenId), \\\"!owner sender\\\");\\n        require(_to != address(0), \\\"dst is zero\\\");\\n        // from address will be checked in _removeTokenFrom()\\n\\n        if (idToApprovals[_tokenId] != address(0)) {\\n            // Reset approvals\\n            idToApprovals[_tokenId] = address(0);\\n        }\\n        _removeTokenFrom(_from, _tokenId);\\n        _addTokenTo(_to, _tokenId);\\n        // Set the block of ownership transfer (for Flash NFT protection)\\n        ownershipChange[_tokenId] = block.number;\\n        // Log the transfer\\n        emit Transfer(_from, _to, _tokenId);\\n    }\\n\\n    /* TRANSFER FUNCTIONS */\\n    /// @dev Throws unless `msg.sender` is the current owner,\\n    ///      an authorized operator, or the approved address for this NFT.\\n    ///      Throws if `_from` is not the current owner.\\n    ///      Throws if `_to` is the zero address.\\n    ///      Throws if `_tokenId` is not a valid NFT.\\n    /// @notice The caller is responsible to confirm that `_to` is capable of receiving NFTs or else\\n    ///        they maybe be permanently lost.\\n    /// @param _from The current owner of the NFT.\\n    /// @param _to The new owner.\\n    /// @param _tokenId The NFT to transfer.\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint _tokenId\\n    ) external override {\\n        _transferFrom(_from, _to, _tokenId, msg.sender);\\n    }\\n\\n    function _isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n        uint size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /// @dev Transfers the ownership of an NFT from one address to another address.\\n    ///      Throws unless `msg.sender` is the current owner, an authorized operator, or the\\n    ///      approved address for this NFT.\\n    ///      Throws if `_from` is not the current owner.\\n    ///      Throws if `_to` is the zero address.\\n    ///      Throws if `_tokenId` is not a valid NFT.\\n    ///      If `_to` is a smart contract, it calls `onERC721Received` on `_to` and throws if\\n    ///      the return value is not `bytes4(keccak256(\\\"onERC721Received(address,address,uint,bytes)\\\"))`.\\n    /// @param _from The current owner of the NFT.\\n    /// @param _to The new owner.\\n    /// @param _tokenId The NFT to transfer.\\n    /// @param _data Additional data with no specified format, sent in call to `_to`.\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint _tokenId,\\n        bytes memory _data\\n    ) public override {\\n        _transferFrom(_from, _to, _tokenId, msg.sender);\\n\\n        if (_isContract(_to)) {\\n            // Throws if transfer destination is a contract which does not implement 'onERC721Received'\\n            try\\n                IERC721Receiver(_to).onERC721Received(\\n                    msg.sender,\\n                    _from,\\n                    _tokenId,\\n                    _data\\n                )\\n            returns (bytes4) {} catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\n                        \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n                    );\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Transfers the ownership of an NFT from one address to another address.\\n    ///      Throws unless `msg.sender` is the current owner, an authorized operator, or the\\n    ///      approved address for this NFT.\\n    ///      Throws if `_from` is not the current owner.\\n    ///      Throws if `_to` is the zero address.\\n    ///      Throws if `_tokenId` is not a valid NFT.\\n    ///      If `_to` is a smart contract, it calls `onERC721Received` on `_to` and throws if\\n    ///      the return value is not `bytes4(keccak256(\\\"onERC721Received(address,address,uint,bytes)\\\"))`.\\n    /// @param _from The current owner of the NFT.\\n    /// @param _to The new owner.\\n    /// @param _tokenId The NFT to transfer.\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint _tokenId\\n    ) external override {\\n        safeTransferFrom(_from, _to, _tokenId, \\\"\\\");\\n    }\\n\\n    /// @dev Set or reaffirm the approved address for an NFT. The zero address indicates there is no approved address.\\n    ///      Throws unless `msg.sender` is the current NFT owner, or an authorized operator of the current owner.\\n    ///      Throws if `_tokenId` is not a valid NFT. (NOTE: This is not written the EIP)\\n    ///      Throws if `_approved` is the current owner. (NOTE: This is not written the EIP)\\n    /// @param _approved Address to be approved for the given NFT ID.\\n    /// @param _tokenId ID of the token to be approved.\\n    function approve(address _approved, uint _tokenId) public override {\\n        address owner = idToOwner[_tokenId];\\n        // Throws if `_tokenId` is not a valid NFT\\n        require(owner != address(0), \\\"invalid id\\\");\\n        // Throws if `_approved` is the current owner\\n        require(_approved != owner, \\\"self approve\\\");\\n        // Check requirements\\n        bool senderIsOwner = (idToOwner[_tokenId] == msg.sender);\\n        bool senderIsApprovedForAll = (ownerToOperators[owner])[msg.sender];\\n        require(senderIsOwner || senderIsApprovedForAll, \\\"!owner\\\");\\n        // Set the approval\\n        idToApprovals[_tokenId] = _approved;\\n        emit Approval(owner, _approved, _tokenId);\\n    }\\n\\n    /// @dev Enables or disables approval for a third party (\\\"operator\\\") to manage all of\\n    ///      `msg.sender`'s assets. It also emits the ApprovalForAll event.\\n    ///      Throws if `_operator` is the `msg.sender`. (NOTE: This is not written the EIP)\\n    /// @notice This works even if sender doesn't own any tokens at the time.\\n    /// @param _operator Address to add to the set of authorized operators.\\n    /// @param _approved True if the operators is approved, false to revoke approval.\\n    function setApprovalForAll(address _operator, bool _approved)\\n        external\\n        override\\n    {\\n        // Throws if `_operator` is the `msg.sender`\\n        require(_operator != msg.sender, \\\"operator is sender\\\");\\n        ownerToOperators[msg.sender][_operator] = _approved;\\n        emit ApprovalForAll(msg.sender, _operator, _approved);\\n    }\\n\\n    /// @dev Function to mint tokens\\n    ///      Throws if `_to` is zero address.\\n    ///      Throws if `_tokenId` is owned by someone.\\n    /// @param _to The address that will receive the minted tokens.\\n    /// @param _tokenId The token id to mint.\\n    /// @return A boolean that indicates if the operation was successful.\\n    function _mint(address _to, uint _tokenId) internal returns (bool) {\\n        // Throws if `_to` is zero address\\n        require(_to != address(0), \\\"zero dst\\\");\\n        // Add NFT. Throws if `_tokenId` is owned by someone\\n        _addTokenTo(_to, _tokenId);\\n        emit Transfer(address(0), _to, _tokenId);\\n        return true;\\n    }\\n\\n    /// @notice Record global and per-user data to checkpoint\\n    /// @param _tokenId NFT token ID. No user checkpoint if 0\\n    /// @param oldLocked Pevious locked amount / end lock time for the user\\n    /// @param newLocked New locked amount / end lock time for the user\\n    function _checkpoint(\\n        uint _tokenId,\\n        LockedBalance memory oldLocked,\\n        LockedBalance memory newLocked\\n    ) internal {\\n        Point memory uOld;\\n        Point memory uNew;\\n        int128 oldDSlope = 0;\\n        int128 newDSlope = 0;\\n        uint _epoch = epoch;\\n\\n        if (_tokenId != 0) {\\n            // Calculate slopes and biases\\n            // Kept at zero when they have to\\n            if (oldLocked.end > block.timestamp && oldLocked.amount > 0) {\\n                uOld.slope = oldLocked.amount / I_MAX_TIME;\\n                uOld.bias =\\n                    uOld.slope *\\n                    int128(int256(oldLocked.end - block.timestamp));\\n            }\\n            if (newLocked.end > block.timestamp && newLocked.amount > 0) {\\n                uNew.slope = newLocked.amount / I_MAX_TIME;\\n                uNew.bias =\\n                    uNew.slope *\\n                    int128(int256(newLocked.end - block.timestamp));\\n            }\\n\\n            // Read values of scheduled changes in the slope\\n            // oldLocked.end can be in the past and in the future\\n            // newLocked.end can ONLY by in the FUTURE unless everything expired: than zeros\\n            oldDSlope = slopeChanges[oldLocked.end];\\n            if (newLocked.end != 0) {\\n                if (newLocked.end == oldLocked.end) {\\n                    newDSlope = oldDSlope;\\n                } else {\\n                    newDSlope = slopeChanges[newLocked.end];\\n                }\\n            }\\n        }\\n\\n        Point memory lastPoint = Point({\\n            bias: 0,\\n            slope: 0,\\n            ts: block.timestamp,\\n            blk: block.number\\n        });\\n        if (_epoch > 0) {\\n            lastPoint = _pointHistory[_epoch];\\n        }\\n        uint lastCheckpoint = lastPoint.ts;\\n        // initialLastPoint is used for extrapolation to calculate block number\\n        // (approximately, for *At methods) and save them\\n        // as we cannot figure that out exactly from inside the contract\\n        Point memory initialLastPoint = lastPoint;\\n        uint blockSlope = 0;\\n        // dblock/dt\\n        if (block.timestamp > lastPoint.ts) {\\n            blockSlope =\\n                (MULTIPLIER * (block.number - lastPoint.blk)) /\\n                (block.timestamp - lastPoint.ts);\\n        }\\n        // If last point is already recorded in this block, slope=0\\n        // But that's ok b/c we know the block in such case\\n\\n        // Go over weeks to fill history and calculate what the current point is\\n        {\\n            uint ti = (lastCheckpoint / WEEK) * WEEK;\\n            // Hopefully it won't happen that this won't get used in 5 years!\\n            // If it does, users will be able to withdraw but vote weight will be broken\\n            for (uint i = 0; i < 255; ++i) {\\n                ti += WEEK;\\n                int128 dSlope = 0;\\n                if (ti > block.timestamp) {\\n                    ti = block.timestamp;\\n                } else {\\n                    dSlope = slopeChanges[ti];\\n                }\\n                lastPoint.bias = Math.positiveInt128(\\n                    lastPoint.bias -\\n                        lastPoint.slope *\\n                        int128(int256(ti - lastCheckpoint))\\n                );\\n                lastPoint.slope = Math.positiveInt128(lastPoint.slope + dSlope);\\n                lastCheckpoint = ti;\\n                lastPoint.ts = ti;\\n                lastPoint.blk =\\n                    initialLastPoint.blk +\\n                    (blockSlope * (ti - initialLastPoint.ts)) /\\n                    MULTIPLIER;\\n                _epoch += 1;\\n                if (ti == block.timestamp) {\\n                    lastPoint.blk = block.number;\\n                    break;\\n                } else {\\n                    _pointHistory[_epoch] = lastPoint;\\n                }\\n            }\\n        }\\n\\n        epoch = _epoch;\\n        // Now pointHistory is filled until t=now\\n\\n        if (_tokenId != 0) {\\n            // If last point was in this block, the slope change has been applied already\\n            // But in such case we have 0 slope(s)\\n            lastPoint.slope = Math.positiveInt128(\\n                lastPoint.slope + (uNew.slope - uOld.slope)\\n            );\\n            lastPoint.bias = Math.positiveInt128(\\n                lastPoint.bias + (uNew.bias - uOld.bias)\\n            );\\n        }\\n\\n        // Record the changed point into history\\n        _pointHistory[_epoch] = lastPoint;\\n\\n        if (_tokenId != 0) {\\n            // Schedule the slope changes (slope is going down)\\n            // We subtract newUserSlope from [newLocked.end]\\n            // and add old_user_slope to [old_locked.end]\\n            if (oldLocked.end > block.timestamp) {\\n                // old_dslope was <something> - u_old.slope, so we cancel that\\n                oldDSlope += uOld.slope;\\n                if (newLocked.end == oldLocked.end) {\\n                    oldDSlope -= uNew.slope;\\n                    // It was a new deposit, not extension\\n                }\\n                slopeChanges[oldLocked.end] = oldDSlope;\\n            }\\n\\n            if (newLocked.end > block.timestamp) {\\n                if (newLocked.end > oldLocked.end) {\\n                    newDSlope -= uNew.slope;\\n                    // old slope disappeared at this point\\n                    slopeChanges[newLocked.end] = newDSlope;\\n                }\\n                // else: we recorded it already in oldDSlope\\n            }\\n            // Now handle user history\\n            uint userEpoch = userPointEpoch[_tokenId] + 1;\\n\\n            userPointEpoch[_tokenId] = userEpoch;\\n            uNew.ts = block.timestamp;\\n            uNew.blk = block.number;\\n            _userPointHistory[_tokenId][userEpoch] = uNew;\\n        }\\n    }\\n\\n    /// @notice Deposit and lock tokens for a user\\n    /// @param _tokenId NFT that holds lock\\n    /// @param _value Amount to deposit\\n    /// @param unlockTime New time when to unlock the tokens, or 0 if unchanged\\n    /// @param lockedBalance Previous locked amount / timestamp\\n    /// @param depositType The type of deposit\\n    function _depositFor(\\n        uint _tokenId,\\n        uint _value,\\n        uint unlockTime,\\n        LockedBalance memory lockedBalance,\\n        DepositType depositType\\n    ) internal {\\n        LockedBalance memory _locked = lockedBalance;\\n        uint supplyBefore = supply;\\n\\n        supply = supplyBefore + _value;\\n        LockedBalance memory oldLocked;\\n        (oldLocked.amount, oldLocked.end) = (_locked.amount, _locked.end);\\n        // Adding to existing lock, or if a lock is expired - creating a new one\\n        _locked.amount += int128(int256(_value));\\n        if (unlockTime != 0) {\\n            _locked.end = unlockTime;\\n        }\\n        locked[_tokenId] = _locked;\\n\\n        // Possibilities:\\n        // Both old_locked.end could be current or expired (>/< block.timestamp)\\n        // value == 0 (extend lock) or value > 0 (add to lock or extend lock)\\n        // _locked.end > block.timestamp (always)\\n        _checkpoint(_tokenId, oldLocked, _locked);\\n\\n        address from = msg.sender;\\n        if (_value != 0 && depositType != DepositType.MERGE_TYPE) {\\n            IERC20(token).safeTransferFrom(from, address(this), _value);\\n        }\\n\\n        emit Deposit(\\n            from,\\n            _tokenId,\\n            _value,\\n            _locked.end,\\n            depositType,\\n            block.timestamp\\n        );\\n        emit Supply(supplyBefore, supplyBefore + _value);\\n    }\\n\\n    function voting(uint _tokenId) external override {\\n        require(msg.sender == _voter(), \\\"!voter\\\");\\n        voted[_tokenId] = true;\\n    }\\n\\n    function abstain(uint _tokenId) external override {\\n        require(msg.sender == _voter(), \\\"!voter\\\");\\n        voted[_tokenId] = false;\\n    }\\n\\n    function attachToken(uint _tokenId) external override {\\n        require(msg.sender == _voter(), \\\"!voter\\\");\\n        attachments[_tokenId] = attachments[_tokenId] + 1;\\n    }\\n\\n    function detachToken(uint _tokenId) external override {\\n        require(msg.sender == _voter(), \\\"!voter\\\");\\n        attachments[_tokenId] = attachments[_tokenId] - 1;\\n    }\\n\\n    function merge(uint _from, uint _to) external {\\n        require(attachments[_from] == 0 && !voted[_from], \\\"attached\\\");\\n        require(_from != _to, \\\"the same\\\");\\n        require(_isApprovedOrOwner(msg.sender, _from), \\\"!owner from\\\");\\n        require(_isApprovedOrOwner(msg.sender, _to), \\\"!owner to\\\");\\n\\n        LockedBalance memory _locked0 = locked[_from];\\n        LockedBalance memory _locked1 = locked[_to];\\n        uint value0 = uint(int256(_locked0.amount));\\n        uint end = _locked0.end >= _locked1.end ? _locked0.end : _locked1.end;\\n\\n        locked[_from] = LockedBalance(0, 0);\\n        _checkpoint(_from, _locked0, LockedBalance(0, 0));\\n        _burn(_from);\\n        _depositFor(_to, value0, end, _locked1, DepositType.MERGE_TYPE);\\n    }\\n\\n    function block_number() external view returns (uint) {\\n        return block.number;\\n    }\\n\\n    /// @notice Record global data to checkpoint\\n    function checkpoint() external override {\\n        _checkpoint(0, LockedBalance(0, 0), LockedBalance(0, 0));\\n    }\\n\\n    /// @notice Deposit `_value` tokens for `_tokenId` and add to the lock\\n    /// @dev Anyone (even a smart contract) can deposit for someone else, but\\n    ///      cannot extend their locktime and deposit for a brand new user\\n    /// @param _tokenId lock NFT\\n    /// @param _value Amount to add to user's lock\\n    function depositFor(uint _tokenId, uint _value) external override lock {\\n        require(_value > 0, \\\"zero value\\\");\\n        LockedBalance memory _locked = locked[_tokenId];\\n        require(_locked.amount > 0, \\\"No existing lock found\\\");\\n        require(\\n            _locked.end > block.timestamp,\\n            \\\"Cannot add to expired lock. Withdraw\\\"\\n        );\\n        _depositFor(_tokenId, _value, 0, _locked, DepositType.DEPOSIT_FOR_TYPE);\\n    }\\n\\n    /// @notice Deposit `_value` tokens for `_to` and lock for `_lock_duration`\\n    /// @param _value Amount to deposit\\n    /// @param _lockDuration Number of seconds to lock tokens for (rounded down to nearest week)\\n    /// @param _to Address to deposit\\n    function _createLock(\\n        uint _value,\\n        uint _lockDuration,\\n        address _to\\n    ) internal returns (uint) {\\n        require(_value > 0, \\\"zero value\\\");\\n        // Lock time is rounded down to weeks\\n        uint unlockTime = ((block.timestamp + _lockDuration) / WEEK) * WEEK;\\n        require(\\n            unlockTime > block.timestamp,\\n            \\\"Can only lock until time in the future\\\"\\n        );\\n        require(\\n            unlockTime <= block.timestamp + MAX_TIME,\\n            \\\"Voting lock can be 4 years max\\\"\\n        );\\n\\n        ++tokenId;\\n        uint _tokenId = tokenId;\\n        _mint(_to, _tokenId);\\n\\n        _depositFor(\\n            _tokenId,\\n            _value,\\n            unlockTime,\\n            locked[_tokenId],\\n            DepositType.CREATE_LOCK_TYPE\\n        );\\n        return _tokenId;\\n    }\\n\\n    /// @notice Deposit `_value` tokens for `_to` and lock for `_lock_duration`\\n    /// @param _value Amount to deposit\\n    /// @param _lockDuration Number of seconds to lock tokens for (rounded down to nearest week)\\n    /// @param _to Address to deposit\\n    function createLockFor(\\n        uint _value,\\n        uint _lockDuration,\\n        address _to\\n    ) external override lock returns (uint) {\\n        return _createLock(_value, _lockDuration, _to);\\n    }\\n\\n    /// @notice Deposit `_value` tokens for `msg.sender` and lock for `_lock_duration`\\n    /// @param _value Amount to deposit\\n    /// @param _lockDuration Number of seconds to lock tokens for (rounded down to nearest week)\\n    function createLock(uint _value, uint _lockDuration)\\n        external\\n        lock\\n        returns (uint)\\n    {\\n        return _createLock(_value, _lockDuration, msg.sender);\\n    }\\n\\n    /// @notice Deposit `_value` additional tokens for `_tokenId` without modifying the unlock time\\n    /// @param _value Amount of tokens to deposit and add to the lock\\n    function increaseAmount(uint _tokenId, uint _value) external lock {\\n        LockedBalance memory _locked = locked[_tokenId];\\n        require(_locked.amount > 0, \\\"No existing lock found\\\");\\n        require(\\n            _locked.end > block.timestamp,\\n            \\\"Cannot add to expired lock. Withdraw\\\"\\n        );\\n        require(_isApprovedOrOwner(msg.sender, _tokenId), \\\"!owner\\\");\\n        require(_value > 0, \\\"zero value\\\");\\n\\n        _depositFor(\\n            _tokenId,\\n            _value,\\n            0,\\n            _locked,\\n            DepositType.INCREASE_LOCK_AMOUNT\\n        );\\n    }\\n\\n    /// @notice Extend the unlock time for `_tokenId`\\n    /// @param _lockDuration New number of seconds until tokens unlock\\n    function increaseUnlockTime(uint _tokenId, uint _lockDuration)\\n        external\\n        lock\\n    {\\n        LockedBalance memory _locked = locked[_tokenId];\\n        // Lock time is rounded down to weeks\\n        uint unlockTime = ((block.timestamp + _lockDuration) / WEEK) * WEEK;\\n        require(_locked.amount > 0, \\\"Nothing is locked\\\");\\n        require(_locked.end > block.timestamp, \\\"Lock expired\\\");\\n        require(unlockTime > _locked.end, \\\"Can only increase lock duration\\\");\\n        require(\\n            unlockTime <= block.timestamp + MAX_TIME,\\n            \\\"Voting lock can be 4 years max\\\"\\n        );\\n        require(_isApprovedOrOwner(msg.sender, _tokenId), \\\"!owner\\\");\\n\\n        _depositFor(\\n            _tokenId,\\n            0,\\n            unlockTime,\\n            _locked,\\n            DepositType.INCREASE_UNLOCK_TIME\\n        );\\n    }\\n\\n    /// @notice Withdraw all tokens for `_tokenId`\\n    /// @dev Only possible if the lock has expired\\n    function withdraw(uint _tokenId) external lock {\\n        require(_isApprovedOrOwner(msg.sender, _tokenId), \\\"!owner\\\");\\n        require(attachments[_tokenId] == 0 && !voted[_tokenId], \\\"attached\\\");\\n        LockedBalance memory _locked = locked[_tokenId];\\n        require(block.timestamp >= _locked.end, \\\"The lock did not expire\\\");\\n\\n        uint value = uint(int256(_locked.amount));\\n        locked[_tokenId] = LockedBalance(0, 0);\\n        uint supplyBefore = supply;\\n        supply = supplyBefore - value;\\n\\n        // old_locked can have either expired <= timestamp or zero end\\n        // _locked has only 0 end\\n        // Both can have >= 0 amount\\n        _checkpoint(_tokenId, _locked, LockedBalance(0, 0));\\n\\n        IERC20(token).safeTransfer(msg.sender, value);\\n\\n        // Burn the NFT\\n        _burn(_tokenId);\\n\\n        emit Withdraw(msg.sender, _tokenId, value, block.timestamp);\\n        emit Supply(supplyBefore, supplyBefore - value);\\n    }\\n\\n    // The following ERC20/minime-compatible methods are not real balanceOf and supply!\\n    // They measure the weights for the purpose of voting, so they don't represent\\n    // real coins.\\n\\n    /// @notice Binary search to estimate timestamp for block number\\n    /// @param _block Block to find\\n    /// @param maxEpoch Don't go beyond this epoch\\n    /// @return Approximate timestamp for block\\n    function _findBlockEpoch(uint _block, uint maxEpoch)\\n        internal\\n        view\\n        returns (uint)\\n    {\\n        // Binary search\\n        uint _min = 0;\\n        uint _max = maxEpoch;\\n        for (uint i = 0; i < 128; ++i) {\\n            // Will be always enough for 128-bit numbers\\n            if (_min >= _max) {\\n                break;\\n            }\\n            uint _mid = (_min + _max + 1) / 2;\\n            if (_pointHistory[_mid].blk <= _block) {\\n                _min = _mid;\\n            } else {\\n                _max = _mid - 1;\\n            }\\n        }\\n        return _min;\\n    }\\n\\n    /// @notice Get the current voting power for `_tokenId`\\n    /// @dev Adheres to the ERC20 `balanceOf` interface for Aragon compatibility\\n    /// @param _tokenId NFT for lock\\n    /// @param _t Epoch time to return voting power at\\n    /// @return User voting power\\n    function _balanceOfNFT(uint _tokenId, uint _t)\\n        internal\\n        view\\n        returns (uint)\\n    {\\n        uint _epoch = userPointEpoch[_tokenId];\\n        if (_epoch == 0) {\\n            return 0;\\n        } else {\\n            Point memory lastPoint = _userPointHistory[_tokenId][_epoch];\\n            lastPoint.bias -=\\n                lastPoint.slope *\\n                int128(int256(_t) - int256(lastPoint.ts));\\n            if (lastPoint.bias < 0) {\\n                lastPoint.bias = 0;\\n            }\\n            return uint(int256(lastPoint.bias));\\n        }\\n    }\\n\\n    /// @dev Returns current token URI metadata\\n    /// @param _tokenId Token ID to fetch URI for.\\n    function tokenURI(uint _tokenId)\\n        external\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        require(\\n            idToOwner[_tokenId] != address(0),\\n            \\\"Query for nonexistent token\\\"\\n        );\\n        LockedBalance memory _locked = locked[_tokenId];\\n        return\\n            _tokenURI(\\n                _tokenId,\\n                _balanceOfNFT(_tokenId, block.timestamp),\\n                _locked.end,\\n                uint(int256(_locked.amount))\\n            );\\n    }\\n\\n    function balanceOfNFT(uint _tokenId) external view override returns (uint) {\\n        // flash NFT protection\\n        if (ownershipChange[_tokenId] == block.number) {\\n            return 0;\\n        }\\n        return _balanceOfNFT(_tokenId, block.timestamp);\\n    }\\n\\n    function balanceOfNFTAt(uint _tokenId, uint _t)\\n        external\\n        view\\n        returns (uint)\\n    {\\n        return _balanceOfNFT(_tokenId, _t);\\n    }\\n\\n    /// @notice Measure voting power of `_tokenId` at block height `_block`\\n    /// @dev Adheres to MiniMe `balanceOfAt` interface: https://github.com/Giveth/minime\\n    /// @param _tokenId User's wallet NFT\\n    /// @param _block Block to calculate the voting power at\\n    /// @return Voting power\\n    function _balanceOfAtNFT(uint _tokenId, uint _block)\\n        internal\\n        view\\n        returns (uint)\\n    {\\n        // Copying and pasting totalSupply code because Vyper cannot pass by\\n        // reference yet\\n        require(_block <= block.number, \\\"only old block\\\");\\n\\n        // Binary search\\n        uint _min = 0;\\n        uint _max = userPointEpoch[_tokenId];\\n        for (uint i = 0; i < 128; ++i) {\\n            // Will be always enough for 128-bit numbers\\n            if (_min >= _max) {\\n                break;\\n            }\\n            uint _mid = (_min + _max + 1) / 2;\\n            if (_userPointHistory[_tokenId][_mid].blk <= _block) {\\n                _min = _mid;\\n            } else {\\n                _max = _mid - 1;\\n            }\\n        }\\n\\n        Point memory uPoint = _userPointHistory[_tokenId][_min];\\n\\n        uint maxEpoch = epoch;\\n        uint _epoch = _findBlockEpoch(_block, maxEpoch);\\n        Point memory point0 = _pointHistory[_epoch];\\n        uint dBlock = 0;\\n        uint dt = 0;\\n        if (_epoch < maxEpoch) {\\n            Point memory point1 = _pointHistory[_epoch + 1];\\n            dBlock = point1.blk - point0.blk;\\n            dt = point1.ts - point0.ts;\\n        } else {\\n            dBlock = block.number - point0.blk;\\n            dt = block.timestamp - point0.ts;\\n        }\\n        uint blockTime = point0.ts;\\n        if (dBlock != 0 && _block > point0.blk) {\\n            blockTime += (dt * (_block - point0.blk)) / dBlock;\\n        }\\n\\n        uPoint.bias -= uPoint.slope * int128(int256(blockTime - uPoint.ts));\\n        return uint(uint128(Math.positiveInt128(uPoint.bias)));\\n    }\\n\\n    function balanceOfAtNFT(uint _tokenId, uint _block)\\n        external\\n        view\\n        returns (uint)\\n    {\\n        return _balanceOfAtNFT(_tokenId, _block);\\n    }\\n\\n    /// @notice Calculate total voting power at some point in the past\\n    /// @param point The point (bias/slope) to start search from\\n    /// @param t Time to calculate the total voting power at\\n    /// @return Total voting power at that time\\n    function _supplyAt(Point memory point, uint t)\\n        internal\\n        view\\n        returns (uint)\\n    {\\n        Point memory lastPoint = point;\\n        uint ti = (lastPoint.ts / WEEK) * WEEK;\\n        for (uint i = 0; i < 255; ++i) {\\n            ti += WEEK;\\n            int128 dSlope = 0;\\n            if (ti > t) {\\n                ti = t;\\n            } else {\\n                dSlope = slopeChanges[ti];\\n            }\\n            lastPoint.bias -=\\n                lastPoint.slope *\\n                int128(int256(ti - lastPoint.ts));\\n            if (ti == t) {\\n                break;\\n            }\\n            lastPoint.slope += dSlope;\\n            lastPoint.ts = ti;\\n        }\\n        return uint(uint128(Math.positiveInt128(lastPoint.bias)));\\n    }\\n\\n    /// @notice Calculate total voting power\\n    /// @dev Adheres to the ERC20 `totalSupply` interface for Aragon compatibility\\n    /// @return Total voting power\\n    function totalSupplyAtT(uint t) public view returns (uint) {\\n        uint _epoch = epoch;\\n        Point memory lastPoint = _pointHistory[_epoch];\\n        return _supplyAt(lastPoint, t);\\n    }\\n\\n    function totalSupply() external view returns (uint) {\\n        return totalSupplyAtT(block.timestamp);\\n    }\\n\\n    /// @notice Calculate total voting power at some point in the past\\n    /// @param _block Block to calculate the total voting power at\\n    /// @return Total voting power at `_block`\\n    function totalSupplyAt(uint _block) external view returns (uint) {\\n        require(_block <= block.number, \\\"only old blocks\\\");\\n        uint _epoch = epoch;\\n        uint targetEpoch = _findBlockEpoch(_block, _epoch);\\n\\n        Point memory point = _pointHistory[targetEpoch];\\n        // it is possible only for a block before the launch\\n        // return 0 as more clear answer than revert\\n        if (point.blk > _block) {\\n            return 0;\\n        }\\n        uint dt = 0;\\n        if (targetEpoch < _epoch) {\\n            Point memory point_next = _pointHistory[targetEpoch + 1];\\n            // next point block can not be the same or lower\\n            dt =\\n                ((_block - point.blk) * (point_next.ts - point.ts)) /\\n                (point_next.blk - point.blk);\\n        } else {\\n            if (point.blk != block.number) {\\n                dt =\\n                    ((_block - point.blk) * (block.timestamp - point.ts)) /\\n                    (block.number - point.blk);\\n            }\\n        }\\n        // Now dt contains info on how far are we beyond point\\n        return _supplyAt(point, point.ts + dt);\\n    }\\n\\n    function _tokenURI(\\n        uint _tokenId,\\n        uint _balanceOf,\\n        uint _locked_end,\\n        uint _value\\n    ) internal pure returns (string memory output) {\\n        output = \\\"<svg xmlns='http://www.w3.org/2000/svg' preserveAspectRatio='xMinYMin meet' viewBox='0 0 350 350'><style>.base { fill: black; font-family: Impact; font-size: 50px; }</style><rect width='100%' height='100%' fill='#aaaaff' /><text x='10' y='60' class='base'>\\\";\\n        output = string(\\n            abi.encodePacked(\\n                output,\\n                \\\"token \\\",\\n                _toString(_tokenId),\\n                \\\"</text><text x='10' y='150' class='base'>\\\"\\n            )\\n        );\\n        output = string(\\n            abi.encodePacked(\\n                output,\\n                \\\"balanceOf \\\",\\n                _toString(_balanceOf),\\n                \\\"</text><text x='10' y='230' class='base'>\\\"\\n            )\\n        );\\n        output = string(\\n            abi.encodePacked(\\n                output,\\n                \\\"locked_end \\\",\\n                _toString(_locked_end),\\n                \\\"</text><text x='10' y='310' class='base'>\\\"\\n            )\\n        );\\n        output = string(\\n            abi.encodePacked(\\n                output,\\n                \\\"value \\\",\\n                _toString(_value),\\n                \\\"</text></svg>\\\"\\n            )\\n        );\\n\\n        string memory json = Base64.encode(\\n            bytes(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"{'name': 'lock #\\\",\\n                        _toString(_tokenId),\\n                        \\\"', 'description': 'Voltswap locks, can be used to boost gauge yields, vote on token emission, and receive bribes', 'image': 'data:image/svg+xml;base64,\\\",\\n                        Base64.encode(bytes(output)),\\n                        \\\"'}\\\"\\n                    )\\n                )\\n            )\\n        );\\n        output = string(\\n            abi.encodePacked(\\\"data:application/json;base64,\\\", json)\\n        );\\n    }\\n\\n    function _toString(uint value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT license\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint temp = value;\\n        uint digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    function _burn(uint _tokenId) internal {\\n        address owner = ownerOf(_tokenId);\\n        // Clear approval\\n        approve(address(0), _tokenId);\\n        // Remove token\\n        _removeTokenFrom(msg.sender, _tokenId);\\n        emit Transfer(owner, address(0), _tokenId);\\n    }\\n\\n    function userPointHistory(uint _tokenId, uint _loc)\\n        external\\n        view\\n        override\\n        returns (Point memory)\\n    {\\n        return _userPointHistory[_tokenId][_loc];\\n    }\\n\\n    function pointHistory(uint _loc)\\n        external\\n        view\\n        override\\n        returns (Point memory)\\n    {\\n        return _pointHistory[_loc];\\n    }\\n}\\n\",\"keccak256\":\"0xbf3d7a7f0fe6f64447c7c8f55f34bb84b1ec6bad44c5332683c1df89aa0ac6d9\",\"license\":\"MIT\"},\"contracts/interface/IController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IController {\\n    function veDist() external view returns (address);\\n\\n    function voter() external view returns (address);\\n}\\n\",\"keccak256\":\"0xcf1f651f1b13563a71728782dfb82970719e4feb46141d0f46f6aa2159983900\",\"license\":\"MIT\"},\"contracts/interface/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8609505e815e06dac85e0cc77ad7bbb641ceec24e5c8e012483e8576dd09ce09\",\"license\":\"MIT\"},\"contracts/interface/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0x224e032b714ae191e5e419054a144402b01597e8b2eb36db4f6e38d3e42b0db7\",\"license\":\"MIT\"},\"contracts/interface/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed approved,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId)\\n        external\\n        view\\n        returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6983264dae1151fd2451f1cb2e4cb9a369f6dd25577600d1733fe6e4da0dc35d\",\"license\":\"MIT\"},\"contracts/interface/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x25b30686d5b7b33b8c7e58a5cef5f01d04f2405a92623f923a7bc36c6271733c\",\"license\":\"MIT\"},\"contracts/interface/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x37cfcffca3b82746cb994dbabf3b95223e5a811c8b21e53b958505ca3f871a0f\",\"license\":\"MIT\"},\"contracts/interface/IVe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IVe {\\n    enum DepositType {\\n        DEPOSIT_FOR_TYPE,\\n        CREATE_LOCK_TYPE,\\n        INCREASE_LOCK_AMOUNT,\\n        INCREASE_UNLOCK_TIME,\\n        MERGE_TYPE\\n    }\\n\\n    struct Point {\\n        int128 bias;\\n        int128 slope; // # -dweight / dt\\n        uint ts;\\n        uint blk; // block\\n    }\\n    /* We cannot really do block numbers per se b/c slope is per time, not per block\\n     * and per block could be fairly bad b/c Ethereum changes blocktimes.\\n     * What we can do is to extrapolate ***At functions */\\n\\n    struct LockedBalance {\\n        int128 amount;\\n        uint end;\\n    }\\n\\n    function token() external view returns (address);\\n\\n    function balanceOfNFT(uint) external view returns (uint);\\n\\n    function isApprovedOrOwner(address, uint) external view returns (bool);\\n\\n    function createLockFor(\\n        uint,\\n        uint,\\n        address\\n    ) external returns (uint);\\n\\n    function userPointEpoch(uint tokenId) external view returns (uint);\\n\\n    function epoch() external view returns (uint);\\n\\n    function userPointHistory(uint tokenId, uint loc)\\n        external\\n        view\\n        returns (Point memory);\\n\\n    function pointHistory(uint loc) external view returns (Point memory);\\n\\n    function checkpoint() external;\\n\\n    function depositFor(uint tokenId, uint value) external;\\n\\n    function attachToken(uint tokenId) external;\\n\\n    function detachToken(uint tokenId) external;\\n\\n    function voting(uint tokenId) external;\\n\\n    function abstain(uint tokenId) external;\\n}\\n\",\"keccak256\":\"0x93a173b039792ac393165aab7a92882d0cc1d82257c4dfe13ee26631fe46e52a\",\"license\":\"MIT\"},\"contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n        (bool success, bytes memory returndata) = target.call(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return\\n            functionDelegateCall(\\n                target,\\n                data,\\n                \\\"Address: low-level delegate call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x284fcdaef2f20ec54759bfb0821ee3a3459a1f0bc302b29e7fcc3c2f42e728df\",\"license\":\"MIT\"},\"contracts/lib/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\n/// @title Base64\\n/// @notice Provides a function for encoding some bytes in base64\\n/// @author Brecht Devos <brecht@loopring.org>\\nlibrary Base64 {\\n    bytes internal constant TABLE =\\n        \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /// @notice Encodes some bytes to the base64 representation\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        uint len = data.length;\\n        if (len == 0) return \\\"\\\";\\n\\n        // multiply by 4/3 rounded up\\n        uint encodedLen = 4 * ((len + 2) / 3);\\n\\n        // Add some extra buffer at the end\\n        bytes memory result = new bytes(encodedLen + 32);\\n\\n        bytes memory table = TABLE;\\n\\n        assembly {\\n            let tablePtr := add(table, 1)\\n            let resultPtr := add(result, 32)\\n\\n            for {\\n                let i := 0\\n            } lt(i, len) {\\n\\n            } {\\n                i := add(i, 3)\\n                let input := and(mload(add(data, i)), 0xffffff)\\n\\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n                out := shl(8, out)\\n                out := add(\\n                    out,\\n                    and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF)\\n                )\\n                out := shl(8, out)\\n                out := add(\\n                    out,\\n                    and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF)\\n                )\\n                out := shl(8, out)\\n                out := add(\\n                    out,\\n                    and(mload(add(tablePtr, and(input, 0x3F))), 0xFF)\\n                )\\n                out := shl(224, out)\\n\\n                mstore(resultPtr, out)\\n\\n                resultPtr := add(resultPtr, 4)\\n            }\\n\\n            switch mod(len, 3)\\n            case 1 {\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n            }\\n            case 2 {\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n            }\\n\\n            mstore(result, encodedLen)\\n        }\\n\\n        return string(result);\\n    }\\n}\\n\",\"keccak256\":\"0xb3434ea5cfd5750fcad3e10ecbffbd9d4dbeac80b43cbb5a25cfb060ced37630\",\"license\":\"MIT\"},\"contracts/lib/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x38183be1332f4c833a8279b7d913f523431e50aa59f4f513020b82628c7d6c0e\",\"license\":\"MIT\"},\"contracts/lib/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nlibrary Math {\\n    function max(uint a, uint b) internal pure returns (uint) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function min(uint a, uint b) internal pure returns (uint) {\\n        return a < b ? a : b;\\n    }\\n\\n    function positiveInt128(int128 value) internal pure returns (int128) {\\n        return value < 0 ? int128(0) : value;\\n    }\\n\\n    function closeTo(\\n        uint a,\\n        uint b,\\n        uint target\\n    ) internal pure returns (bool) {\\n        if (a > b) {\\n            if (a - b <= target) {\\n                return true;\\n            }\\n        } else {\\n            if (b - a <= target) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8a50db5ef01ef869b1a7df3cf485d6c87473549c70fbefc54bdea34f8bc78538\",\"license\":\"MIT\"},\"contracts/lib/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../interface/IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint value\\n    ) internal {\\n        uint newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(\\n            data,\\n            \\\"SafeERC20: low-level call failed\\\"\\n        );\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(\\n                abi.decode(returndata, (bool)),\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd09403b2f52a045a82861c53059fb835daabe908fd774f948370979588b3fe1a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600160005534801561001557600080fd5b50614278806100256000396000f3fe608060405234801561001057600080fd5b506004361061030c5760003560e01c80638ad4c4471161019d578063c1f0fb9f116100e9578063e7e242d4116100a2578063f52a36f71161007c578063f52a36f71461082a578063f77c47911461084d578063fc0c546a14610860578063fd4a77f11461087957600080fd5b8063e7e242d4146107c8578063e985e9c5146107db578063ec32e6df1461081757600080fd5b8063c1f0fb9f14610754578063c2c4c5c114610767578063c87b56dd1461076f578063d1c2babb14610782578063e0514aba14610795578063e58f5947146107a857600080fd5b806398782b4e11610156578063b2383e5511610130578063b2383e55146106d3578063b45a3c0e146106e6578063b52c05fe1461072e578063b88d4fde1461074157600080fd5b806398782b4e1461069a5780639d507b8b146106ad578063a22cb465146106c057600080fd5b80638ad4c447146106355780638c2c9baf146106485780638fbb38ff1461065b578063900cf0cf1461067e57806395d89b411461037d578063981b24d01461068757600080fd5b80632f745c591161025c578063485cc95511610215578063626944df116101ef578063626944df146105c35780636352211e146105e657806370a082311461060f5780637116c60c1461062257600080fd5b8063485cc9551461056657806354fd4d50146105795780635633e0a61461059d57600080fd5b80632f745c591461048c578063313ce567146104c257806342842e0e146104dc578063430c2081146104ef57806344acb42a1461050257806346b3bd001461055357600080fd5b80630d6a2033116102c957806323857d51116102a357806323857d511461044057806323b872dd1461046057806325a58b56146104735780632e1a7d4d1461047957600080fd5b80630d6a2033146104055780630ec84dda1461042557806318160ddd1461043857600080fd5b806301ffc9a714610311578063047fc9aa1461035357806305ae4f8c1461036a57806306fdde031461037d578063081812fc146103af578063095ea7b3146103f0575b600080fd5b61033e61031f366004613633565b6001600160e01b03191660009081526014602052604090205460ff1690565b60405190151581526020015b60405180910390f35b61035c60025481565b60405190815260200161034a565b61035c610378366004613650565b61088c565b6103a2604051806040016040528060068152602001651d995593d31560d21b81525081565b60405161034a91906136ca565b6103d86103bd3660046136dd565b6000908152600f60205260409020546001600160a01b031690565b6040516001600160a01b03909116815260200161034a565b6104036103fe36600461370b565b6108bf565b005b61035c6104133660046136dd565b600a6020526000908152604090205481565b610403610433366004613650565b610a21565b61035c610b16565b61035c61044e3660046136dd565b60046020526000908152604090205481565b61040361046e366004613737565b610b26565b4361035c565b6104036104873660046136dd565b610b37565b61035c61049a36600461370b565b6001600160a01b03919091166000908152601160209081526040808320938352929052205490565b6104ca601281565b60405160ff909116815260200161034a565b6104036104ea366004613737565b610d7b565b61033e6104fd36600461370b565b610d96565b610515610510366004613650565b610da9565b60405161034a919060006080820190508251600f0b82526020830151600f0b6020830152604083015160408301526060830151606083015292915050565b6104036105613660046136dd565b610e1d565b610403610574366004613778565b610e81565b6103a2604051806040016040528060058152602001640312e302e360dc1b81525081565b6105b06105ab3660046136dd565b611093565b604051600f9190910b815260200161034a565b61035c6105d13660046136dd565b60009081526003602052604090206001015490565b6103d86105f43660046136dd565b6000908152600e60205260409020546001600160a01b031690565b61035c61061d3660046137b1565b6110d6565b61035c6106303660046136dd565b6110f4565b6105156106433660046136dd565b611154565b61035c610656366004613650565b6111ab565b61033e6106693660046136dd565b600b6020526000908152604090205460ff1681565b61035c60055481565b61035c6106953660046136dd565b6111b7565b6104036106a83660046136dd565b611395565b6104036106bb366004613650565b6113e8565b6104036106ce3660046137dc565b6115dd565b6104036106e1366004613650565b611696565b6107146106f43660046136dd565b60036020526000908152604090208054600190910154600f9190910b9082565b60408051600f9390930b835260208301919091520161034a565b61035c61073c366004613650565b6117aa565b61040361074f366004613820565b6117e9565b6104036107623660046136dd565b611919565b610403611969565b6103a261077d3660046136dd565b6119a9565b610403610790366004613650565b611a56565b61035c6107a3366004613650565b611c51565b61035c6107b63660046136dd565b60086020526000908152604090205481565b61035c6107d63660046136dd565b611c5d565b61033e6107e9366004613778565b6001600160a01b03918216600090815260136020908152604080832093909416825291909152205460ff1690565b61035c610825366004613900565b611c85565b6105b06108383660046136dd565b600960205260009081526040902054600f0b81565b600c546103d8906001600160a01b031681565b6001546103d8906201000090046001600160a01b031681565b6104036108873660046136dd565b611cc5565b600082815260076020526040812082633b9aca0081106108ae576108ae613939565b600302016001015490505b92915050565b6000818152600e60205260409020546001600160a01b0316806109165760405162461bcd60e51b815260206004820152600a6024820152691a5b9d985b1a59081a5960b21b60448201526064015b60405180910390fd5b806001600160a01b0316836001600160a01b0316036109665760405162461bcd60e51b815260206004820152600c60248201526b73656c6620617070726f766560a01b604482015260640161090d565b6000828152600e60209081526040808320546001600160a01b0385811685526013845282852033808752945291909320549216149060ff1681806109a75750805b6109c35760405162461bcd60e51b815260040161090d9061394f565b6000848152600f602052604080822080546001600160a01b0319166001600160a01b0389811691821790925591518793918716917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a45050505050565b600054600114610a435760405162461bcd60e51b815260040161090d9061396f565b600260005580610a655760405162461bcd60e51b815260040161090d90613997565b600082815260036020908152604080832081518083019092528054600f0b808352600190910154928201929092529112610ada5760405162461bcd60e51b8152602060048201526016602482015275139bc8195e1a5cdd1a5b99c81b1bd8dac8199bdd5b9960521b604482015260640161090d565b42816020015111610afd5760405162461bcd60e51b815260040161090d906139bb565b610b0c83836000846000611d18565b5050600160005550565b6000610b21426110f4565b905090565b610b3283838333611e96565b505050565b600054600114610b595760405162461bcd60e51b815260040161090d9061396f565b6002600055610b683382611ff1565b610b845760405162461bcd60e51b815260040161090d9061394f565b6000818152600a6020526040902054158015610baf57506000818152600b602052604090205460ff16155b610bcb5760405162461bcd60e51b815260040161090d906139ff565b60008181526003602090815260409182902082518084019093528054600f0b835260010154908201819052421015610c455760405162461bcd60e51b815260206004820152601760248201527f546865206c6f636b20646964206e6f7420657870697265000000000000000000604482015260640161090d565b8051604080518082018252600080825260208083018281528783526003909152929020905181546001600160801b0319166001600160801b039091161781559051600190910155600254600f9190910b90610ca08282613a37565b6002556040805180820190915260008082526020820152610cc49085908590612057565b600154610ce1906201000090046001600160a01b031633846125e7565b610cea8461264a565b60408051858152602081018490524281830152905133917f02f25270a4d87bea75db541cdfe559334a275b4a233520ed6c0a2429667cca94919081900360600190a27f5e2aa66efd74cce82b21852e317e5490d9ecc9e6bb953ae24d90851258cc2f5c81610d588482613a37565b6040805192835260208301919091520160405180910390a1505060016000555050565b610b32838383604051806020016040528060008152506117e9565b6000610da28383611ff1565b9392505050565b610db16135ec565b600083815260076020526040902082633b9aca008110610dd357610dd3613939565b60408051608081018252600392909202929092018054600f81810b8452600160801b909104900b602083015260018101549282019290925260029091015460608201529392505050565b610e256126a1565b6001600160a01b0316336001600160a01b031614610e555760405162461bcd60e51b815260040161090d90613a4e565b6000818152600a6020526040902054610e6f906001613a6e565b6000918252600a602052604090912055565b600154610100900460ff16610e9c5760015460ff1615610ea0565b303b155b610f035760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161090d565b600154610100900460ff16158015610f25576001805461ffff19166101011790555b6001805462010000600160b01b031916620100006001600160a01b0386811691909102919091178255600c80546001600160a01b031916918516919091179055437f54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4fa55427f54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4f95560146020527f8198b47ae0cb74836846a691c8445d6eb53c9809cf0a4852056b594db0d543e6805460ff1990811683179091557f74d15161c3a3e7d47d6a2e7796c5d75141805dac435032d866bc8fa8671abf668054821683179055635b5e139f60e01b60009081527f1e96314152f0ae661095b744ba6b49b7f9e5b9b8a16888e723f6d83d5c6eec8280549092168317909155908155600d5460405190913091600080516020614123833981519152908290a4600d546040516000903090600080516020614123833981519152908390a48015610b32576001805461ff0019169055505050565b6000818152600860209081526040808320546007909252822081633b9aca0081106110c0576110c0613939565b6003020154600160801b9004600f0b9392505050565b6001600160a01b0381166000908152601060205260408120546108b9565b600554600081815260066020908152604080832081516080810183528154600f81810b8352600160801b909104900b9381019390935260018101549183019190915260020154606082015290919061114c818561270f565b949350505050565b61115c6135ec565b5060009081526006602090815260409182902082516080810184528154600f81810b8352600160801b909104900b92810192909252600181015492820192909252600290910154606082015290565b6000610da28383612806565b6000438211156111fb5760405162461bcd60e51b815260206004820152600f60248201526e6f6e6c79206f6c6420626c6f636b7360881b604482015260640161090d565b600554600061120a8483612b09565b60008181526006602090815260409182902082516080810184528154600f81810b8352600160801b909104900b92810192909252600181015492820192909252600290910154606082018190529192509085101561126d57506000949350505050565b600083831015611323576000600681611287866001613a6e565b8152602080820192909252604090810160002081516080810183528154600f81810b8352600160801b909104900b938101939093526001810154918301919091526002015460608083018290528501519192506112e49190613a37565b836040015182604001516112f89190613a37565b6060850151611307908a613a37565b6113119190613a86565b61131b9190613abb565b915050611372565b4382606001511461137257606082015161133d9043613a37565b604083015161134c9042613a37565b606084015161135b9089613a37565b6113659190613a86565b61136f9190613abb565b90505b61138b828284604001516113869190613a6e565b61270f565b9695505050505050565b61139d6126a1565b6001600160a01b0316336001600160a01b0316146113cd5760405162461bcd60e51b815260040161090d90613a4e565b6000818152600a6020526040902054610e6f90600190613a37565b60005460011461140a5760405162461bcd60e51b815260040161090d9061396f565b6002600090815582815260036020908152604080832081518083019092528054600f0b825260010154918101919091529062093a808061144a8542613a6e565b6114549190613abb565b61145e9190613a86565b905060008260000151600f0b136114ab5760405162461bcd60e51b8152602060048201526011602482015270139bdd1a1a5b99c81a5cc81b1bd8dad959607a1b604482015260640161090d565b428260200151116114ed5760405162461bcd60e51b815260206004820152600c60248201526b131bd8dac8195e1c1a5c995960a21b604482015260640161090d565b816020015181116115405760405162461bcd60e51b815260206004820152601f60248201527f43616e206f6e6c7920696e637265617365206c6f636b206475726174696f6e00604482015260640161090d565b61154e630784ce0042613a6e565b81111561159d5760405162461bcd60e51b815260206004820152601e60248201527f566f74696e67206c6f636b2063616e2062652034207965617273206d61780000604482015260640161090d565b6115a73385611ff1565b6115c35760405162461bcd60e51b815260040161090d9061394f565b6115d284600083856003611d18565b505060016000555050565b336001600160a01b0383160361162a5760405162461bcd60e51b815260206004820152601260248201527137b832b930ba37b91034b99039b2b73232b960711b604482015260640161090d565b3360008181526013602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6000546001146116b85760405162461bcd60e51b815260040161090d9061396f565b6002600090815582815260036020908152604080832081518083019092528054600f0b8083526001909101549282019290925291126117325760405162461bcd60e51b8152602060048201526016602482015275139bc8195e1a5cdd1a5b99c81b1bd8dac8199bdd5b9960521b604482015260640161090d565b428160200151116117555760405162461bcd60e51b815260040161090d906139bb565b61175f3384611ff1565b61177b5760405162461bcd60e51b815260040161090d9061394f565b6000821161179b5760405162461bcd60e51b815260040161090d90613997565b610b0c83836000846002611d18565b600080546001146117cd5760405162461bcd60e51b815260040161090d9061396f565b60026000556117dd838333612b8f565b60016000559392505050565b6117f584848433611e96565b823b1561191357604051630a85bd0160e11b81526001600160a01b0384169063150b7a029061182e903390889087908790600401613acf565b6020604051808303816000875af1925050508015611869575060408051601f3d908101601f1916820190925261186691810190613b02565b60015b611911573d808015611897576040519150601f19603f3d011682016040523d82523d6000602084013e61189c565b606091505b5080516000036119095760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606482015260840161090d565b805181602001fd5b505b50505050565b6119216126a1565b6001600160a01b0316336001600160a01b0316146119515760405162461bcd60e51b815260040161090d90613a4e565b6000908152600b60205260409020805460ff19169055565b6119a7600060405180604001604052806000600f0b8152602001600081525060405180604001604052806000600f0b81526020016000815250612057565b565b6000818152600e60205260409020546060906001600160a01b0316611a105760405162461bcd60e51b815260206004820152601b60248201527f517565727920666f72206e6f6e6578697374656e7420746f6b656e0000000000604482015260640161090d565b60008281526003602090815260409182902082518084019093528054600f0b83526001015490820152610da283611a478142612cf9565b60208401518451600f0b612dcd565b6000828152600a6020526040902054158015611a8157506000828152600b602052604090205460ff16155b611a9d5760405162461bcd60e51b815260040161090d906139ff565b808203611ad75760405162461bcd60e51b81526020600482015260086024820152677468652073616d6560c01b604482015260640161090d565b611ae13383611ff1565b611b1b5760405162461bcd60e51b815260206004820152600b60248201526a216f776e65722066726f6d60a81b604482015260640161090d565b611b253382611ff1565b611b5d5760405162461bcd60e51b8152602060048201526009602482015268216f776e657220746f60b81b604482015260640161090d565b6000828152600360208181526040808420815180830183528154600f90810b825260019283015482860190815288885295855283872084518086019095528054820b855290920154938301849052805194519095929490910b921115611bc7578260200151611bcd565b83602001515b604080518082018252600080825260208083018281528b835260038252848320935184546001600160801b0319166001600160801b0390911617845551600190930192909255825180840190935280835290820152909150611c329087908690612057565b611c3b8661264a565b611c49858383866004611d18565b505050505050565b6000610da28383612cf9565b600081815260046020526040812054439003611c7b57506000919050565b6108b98242612cf9565b60008054600114611ca85760405162461bcd60e51b815260040161090d9061396f565b6002600055611cb8848484612b8f565b6001600055949350505050565b611ccd6126a1565b6001600160a01b0316336001600160a01b031614611cfd5760405162461bcd60e51b815260040161090d90613a4e565b6000908152600b60205260409020805460ff19166001179055565b6002548290611d278682613a6e565b6002556040805180820190915260008082526020820152825160208085015190830152600f0b8152825187908490611d60908390613b1f565b600f0b9052508515611d7457602083018690525b6000888152600360209081526040909120845181546001600160801b0319166001600160801b0390911617815590840151600190910155611db6888285612057565b338715801590611dd857506004856004811115611dd557611dd5613b6e565b14155b15611dfb57600154611dfb906201000090046001600160a01b031682308b612f06565b8360200151816001600160a01b03167fff04ccafc360e16b67d682d17bd9503c4c6b9a131f6be6325762dc9ffc7de6248b8b8942604051611e3f9493929190613b84565b60405180910390a37f5e2aa66efd74cce82b21852e317e5490d9ecc9e6bb953ae24d90851258cc2f5c83611e738a82613a6e565b6040805192835260208301919091520160405180910390a1505050505050505050565b6000828152600a6020526040902054158015611ec157506000828152600b602052604090205460ff16155b611edd5760405162461bcd60e51b815260040161090d906139ff565b611ee78183611ff1565b611f235760405162461bcd60e51b815260206004820152600d60248201526c10b7bbb732b91039b2b73232b960991b604482015260640161090d565b6001600160a01b038316611f675760405162461bcd60e51b815260206004820152600b60248201526a647374206973207a65726f60a81b604482015260640161090d565b6000828152600f60205260409020546001600160a01b031615611fa1576000828152600f6020526040902080546001600160a01b03191690555b611fab8483612f3e565b611fb58383612fef565b6000828152600460205260408082204390555183916001600160a01b03808716929088169160008051602061412383398151915291a450505050565b6000818152600e6020908152604080832054600f8352818420546001600160a01b039182168086526013855283862088841680885295529285205492938085149392909116149060ff1682806120445750815b8061204c5750805b979650505050505050565b61205f6135ec565b6120676135ec565b6005546000908190871561218a5742876020015111801561208f575060008760000151600f0b135b156120d45786516120a590630784ce0090613bc2565b600f0b6020808701919091528701516120bf904290613a37565b85602001516120ce9190613c00565b600f0b85525b4286602001511180156120ee575060008660000151600f0b135b1561213357855161210490630784ce0090613bc2565b600f0b60208086019190915286015161211e904290613a37565b846020015161212d9190613c00565b600f0b84525b602080880151600090815260098252604090205490870151600f9190910b93501561218a57866020015186602001510361216f5782915061218a565b602080870151600090815260099091526040902054600f0b91505b6040805160808101825260008082526020820152429181019190915243606082015281156121ff575060008181526006602090815260409182902082516080810184528154600f81810b8352600160801b909104900b9281019290925260018101549282019290925260029091015460608201525b60408101518160004283101561224c57604084015161221e9042613a37565b606085015161222d9043613a37565b61223f90670de0b6b3a7640000613a86565b6122499190613abb565b90505b600062093a8061225c8186613abb565b6122669190613a86565b905060005b60ff8110156123b95761228162093a8083613a6e565b9150600042831115612295574292506122a9565b50600082815260096020526040902054600f0b5b6122d66122b68785613a37565b88602001516122c59190613c00565b88516122d19190613c95565b613060565b600f0b875260208701516122ef906122d1908390613b1f565b600f0b602088015260408088018490528501519295508592670de0b6b3a76400009061231b9085613a37565b6123259086613a86565b61232f9190613abb565b856060015161233e9190613a6e565b606088015261234e600189613a6e565b975042830361236357504360608701526123b9565b6000888152600660209081526040918290208951918a01516001600160801b03908116600160801b0292169190911781559088015160018201556060880151600290910155506123b281613ce5565b905061226b565b505060058590558b15612417576123ec896020015189602001516123dd9190613c95565b85602001516122d19190613b1f565b600f0b6020850152885188516124119161240591613c95565b85516122d19190613b1f565b600f0b84525b6000858152600660209081526040918290208651918701516001600160801b03908116600160801b02921691909117815590850151600182015560608501516002909101558b156125d957428b6020015111156124ce57602089015161247d9088613b1f565b96508a602001518a60200151036124a057602088015161249d9088613c95565b96505b60208b810151600090815260099091526040902080546001600160801b0319166001600160801b0389161790555b428a602001511115612529578a602001518a6020015111156125295760208801516124f99087613c95565b60208b810151600090815260099091526040902080546001600160801b0319166001600160801b03831617905595505b60008c815260086020526040812054612543906001613a6e565b905080600860008f815260200190815260200160002081905550428960400181815250504389606001818152505088600760008f815260200190815260200160002082633b9aca00811061259957612599613939565b825160208401516001600160801b03908116600160801b029116176003919091029190910190815560408201516001820155606090910151600290910155505b505050505050505050505050565b6040516001600160a01b038316602482015260448101829052610b3290849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261307a565b6000818152600e60205260408120546001600160a01b03169061266d90836108bf565b6126773383612f3e565b60405182906000906001600160a01b03841690600080516020614123833981519152908390a45050565b600c54604080516311b25aab60e21b815290516000926001600160a01b0316916346c96aac9160048083019260209291908290030181865afa1580156126eb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b219190613cfe565b600080839050600062093a8080836040015161272b9190613abb565b6127359190613a86565b905060005b60ff8110156127e85761275062093a8083613a6e565b915060008583111561276457859250612778565b50600082815260096020526040902054600f0b5b60408401516127879084613a37565b84602001516127969190613c00565b845185906127a5908390613c95565b600f0b9052508583036127b857506127e8565b80846020018181516127ca9190613b1f565b600f0b90525050604083018290526127e181613ce5565b905061273a565b5081516127f490613060565b6001600160801b031695945050505050565b6000438211156128495760405162461bcd60e51b815260206004820152600e60248201526d6f6e6c79206f6c6420626c6f636b60901b604482015260640161090d565b600083815260086020526040812054815b60808110156128e957818310156128e957600060026128798486613a6e565b612884906001613a6e565b61288e9190613abb565b6000888152600760205260409020909150869082633b9aca0081106128b5576128b5613939565b6003020160020154116128ca578093506128d8565b6128d5600182613a37565b92505b506128e281613ce5565b905061285a565b50600085815260076020526040812083633b9aca00811061290c5761290c613939565b60408051608081018252600392909202929092018054600f81810b8452600160801b909104900b6020830152600181015492820192909252600290910154606082015260055490915060006129618783612b09565b600081815260066020908152604080832081516080810183528154600f81810b8352600160801b909104900b938101939093526001810154918301919091526002015460608201529192508084841015612a405760006006816129c5876001613a6e565b8152602080820192909252604090810160002081516080810183528154600f81810b8352600160801b909104900b93810193909352600181015491830191909152600201546060808301829052860151919250612a229190613a37565b925083604001518160400151612a389190613a37565b915050612a64565b6060830151612a4f9043613a37565b9150826040015142612a619190613a37565b90505b60408301518215801590612a7b575083606001518b115b15612ab2578284606001518c612a919190613a37565b612a9b9084613a86565b612aa59190613abb565b612aaf9082613a6e565b90505b6040870151612ac19082613a37565b8760200151612ad09190613c00565b87518890612adf908390613c95565b600f0b9052508651612af090613060565b6001600160801b03169c9b505050505050505050505050565b60008082815b6080811015612b855781831015612b855760006002612b2e8486613a6e565b612b39906001613a6e565b612b439190613abb565b6000818152600660205260409020600201549091508710612b6657809350612b74565b612b71600182613a37565b92505b50612b7e81613ce5565b9050612b0f565b5090949350505050565b6000808411612bb05760405162461bcd60e51b815260040161090d90613997565b600062093a8080612bc18642613a6e565b612bcb9190613abb565b612bd59190613a86565b9050428111612c355760405162461bcd60e51b815260206004820152602660248201527f43616e206f6e6c79206c6f636b20756e74696c2074696d6520696e207468652060448201526566757475726560d01b606482015260840161090d565b612c43630784ce0042613a6e565b811115612c925760405162461bcd60e51b815260206004820152601e60248201527f566f74696e67206c6f636b2063616e2062652034207965617273206d61780000604482015260640161090d565b600d60008154612ca190613ce5565b90915550600d54612cb2848261314c565b5060008181526003602090815260409182902082518084019093528054600f0b835260019081015491830191909152612cf091839189918691611d18565b95945050505050565b600082815260086020526040812054808203612d195760009150506108b9565b600084815260076020526040812082633b9aca008110612d3b57612d3b613939565b60408051608081018252600392909202929092018054600f81810b8452600160801b909104900b602083015260018101549282018390526002015460608201529150612d879085613d1b565b8160200151612d969190613c00565b81518290612da5908390613c95565b600f90810b90915282516000910b12159050612dc057600081525b51600f0b91506108b99050565b606060405180610120016040528061010081526020016141436101009139905080612df7866131c8565b604051602001612e08929190613d5a565b604051602081830303815290604052905080612e23856131c8565b604051602001612e34929190613dd7565b604051602081830303815290604052905080612e4f846131c8565b604051602001612e60929190613e58565b604051602081830303815290604052905080612e7b836131c8565b604051602001612e8c929190613eda565b60405160208183030381529060405290506000612ed9612eab876131c8565b612eb4846132c9565b604051602001612ec5929190613f35565b6040516020818303038152906040526132c9565b905080604051602001612eec9190614050565b604051602081830303815290604052915050949350505050565b6040516001600160a01b03808516602483015283166044820152606481018290526119139085906323b872dd60e01b90608401612613565b6000818152600e60205260409020546001600160a01b03838116911614612f975760405162461bcd60e51b815260206004820152600d60248201526c216f776e65722072656d6f766560981b604482015260640161090d565b6000818152600e6020526040902080546001600160a01b0319169055612fbd8282613433565b6001600160a01b0382166000908152601060205260408120805460019290612fe6908490613a37565b90915550505050565b6000818152600e6020908152604080832080546001600160a01b0319166001600160a01b038716908117909155808452601080845282852080546011865284872081885286528487208890558787526012865293862093909355908452909152805460019290612fe6908490613a6e565b60008082600f0b1261307257816108b9565b600092915050565b60006130cf826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166134f29092919063ffffffff16565b805190915015610b3257808060200190518101906130ed9190614095565b610b325760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161090d565b60006001600160a01b03831661318f5760405162461bcd60e51b81526020600482015260086024820152671e995c9bc8191cdd60c21b604482015260640161090d565b6131998383612fef565b60405182906001600160a01b03851690600090600080516020614123833981519152908290a450600192915050565b6060816000036131ef5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115613219578061320381613ce5565b91506132129050600a83613abb565b91506131f3565b60008167ffffffffffffffff8111156132345761323461380a565b6040519080825280601f01601f19166020018201604052801561325e576020820181803683370190505b5090505b841561114c57613273600183613a37565b9150613280600a866140b2565b61328b906030613a6e565b60f81b8183815181106132a0576132a0613939565b60200101906001600160f81b031916908160001a9053506132c2600a86613abb565b9450613262565b805160609060008190036132ed575050604080516020810190915260008152919050565b600060036132fc836002613a6e565b6133069190613abb565b613311906004613a86565b90506000613320826020613a6e565b67ffffffffffffffff8111156133385761333861380a565b6040519080825280601f01601f191660200182016040528015613362576020820181803683370190505b50905060006040518060600160405280604081526020016140e3604091399050600181016020830160005b868110156133ee576003818a01810151603f601282901c8116860151600c83901c8216870151600684901c831688015192909316870151600891821b60ff94851601821b92841692909201901b91160160e01b83526004909201910161338d565b506003860660018114613408576002811461341957613425565b613d3d60f01b600119830152613425565b603d60f81b6000198301525b505050918152949350505050565b6001600160a01b03821660009081526010602052604081205461345890600190613a37565b6000838152601260205260409020549091508082036134a7576001600160a01b038416600090815260116020908152604080832085845282528083208390558583526012909152812055611913565b6001600160a01b039390931660009081526011602090815260408083209383529281528282208054868452848420819055835260129091528282209490945592839055908252812055565b60606001600160a01b0384163b61354b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161090d565b600080856001600160a01b03168560405161356691906140c6565b6000604051808303816000865af19150503d80600081146135a3576040519150601f19603f3d011682016040523d82523d6000602084013e6135a8565b606091505b509150915061138b828286606083156135c2575081610da2565b8251156135d25782518084602001fd5b8160405162461bcd60e51b815260040161090d91906136ca565b60405180608001604052806000600f0b81526020016000600f0b815260200160008152602001600081525090565b6001600160e01b03198116811461363057600080fd5b50565b60006020828403121561364557600080fd5b8135610da28161361a565b6000806040838503121561366357600080fd5b50508035926020909101359150565b60005b8381101561368d578181015183820152602001613675565b838111156119135750506000910152565b600081518084526136b6816020860160208601613672565b601f01601f19169290920160200192915050565b602081526000610da2602083018461369e565b6000602082840312156136ef57600080fd5b5035919050565b6001600160a01b038116811461363057600080fd5b6000806040838503121561371e57600080fd5b8235613729816136f6565b946020939093013593505050565b60008060006060848603121561374c57600080fd5b8335613757816136f6565b92506020840135613767816136f6565b929592945050506040919091013590565b6000806040838503121561378b57600080fd5b8235613796816136f6565b915060208301356137a6816136f6565b809150509250929050565b6000602082840312156137c357600080fd5b8135610da2816136f6565b801515811461363057600080fd5b600080604083850312156137ef57600080fd5b82356137fa816136f6565b915060208301356137a6816137ce565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561383657600080fd5b8435613841816136f6565b93506020850135613851816136f6565b925060408501359150606085013567ffffffffffffffff8082111561387557600080fd5b818701915087601f83011261388957600080fd5b81358181111561389b5761389b61380a565b604051601f8201601f19908116603f011681019083821181831017156138c3576138c361380a565b816040528281528a60208487010111156138dc57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060006060848603121561391557600080fd5b8335925060208401359150604084013561392e816136f6565b809150509250925092565b634e487b7160e01b600052603260045260246000fd5b60208082526006908201526510b7bbb732b960d11b604082015260600190565b6020808252600e908201526d1499595b9d1c985b9d0818d85b1b60921b604082015260600190565b6020808252600a90820152697a65726f2076616c756560b01b604082015260600190565b60208082526024908201527f43616e6e6f742061646420746f2065787069726564206c6f636b2e20576974686040820152636472617760e01b606082015260800190565b602080825260089082015267185d1d1858da195960c21b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082821015613a4957613a49613a21565b500390565b60208082526006908201526510bb37ba32b960d11b604082015260600190565b60008219821115613a8157613a81613a21565b500190565b6000816000190483118215151615613aa057613aa0613a21565b500290565b634e487b7160e01b600052601260045260246000fd5b600082613aca57613aca613aa5565b500490565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061138b9083018461369e565b600060208284031215613b1457600080fd5b8151610da28161361a565b600081600f0b83600f0b600082128260016001607f1b0303821381151615613b4957613b49613a21565b8260016001607f1b0319038212811615613b6557613b65613a21565b50019392505050565b634e487b7160e01b600052602160045260246000fd5b848152602081018490526080810160058410613bb057634e487b7160e01b600052602160045260246000fd5b60408201939093526060015292915050565b600081600f0b83600f0b80613bd957613bd9613aa5565b60016001607f1b0319821460001982141615613bf757613bf7613a21565b90059392505050565b600081600f0b83600f0b60016001607f1b03600082136000841383830485118282161615613c3057613c30613a21565b60016001607f1b03196000851282811687830587121615613c5357613c53613a21565b60008712925085820587128484161615613c6f57613c6f613a21565b85850587128184161615613c8557613c85613a21565b5050509290910295945050505050565b600081600f0b83600f0b600081128160016001607f1b031901831281151615613cc057613cc0613a21565b8160016001607f1b03018313811615613cdb57613cdb613a21565b5090039392505050565b600060018201613cf757613cf7613a21565b5060010190565b600060208284031215613d1057600080fd5b8151610da2816136f6565b60008083128015600160ff1b850184121615613d3957613d39613a21565b6001600160ff1b0384018313811615613d5457613d54613a21565b50500390565b60008351613d6c818460208801613672565b6503a37b5b2b7160d51b9083019081528351613d8f816006840160208801613672565b7f3c2f746578743e3c7465787420783d2731302720793d273135302720636c61736006929091019182015268399e93b130b9b2939f60b91b6026820152602f01949350505050565b60008351613de9818460208801613672565b6903130b630b731b2a7b3160b51b9083019081528351613e1081600a840160208801613672565b7f3c2f746578743e3c7465787420783d2731302720793d273233302720636c6173600a929091019182015268399e93b130b9b2939f60b91b602a820152603301949350505050565b60008351613e6a818460208801613672565b6a03637b1b5b2b22fb2b732160ad1b9083019081528351613e9281600b840160208801613672565b7f3c2f746578743e3c7465787420783d2731302720793d273331302720636c6173600b929091019182015268399e93b130b9b2939f60b91b602b820152603401949350505050565b60008351613eec818460208801613672565b6503b30b63ab2960d51b9083019081528351613f0f816006840160208801613672565b6c1e17ba32bc3a1f1e17b9bb339f60991b60069290910191820152601301949350505050565b6f7b276e616d65273a20276c6f636b202360801b815260008351613f60816010850160208801613672565b7f272c20276465736372697074696f6e273a2027566f6c7473776170206c6f636b6010918401918201527f732c2063616e206265207573656420746f20626f6f737420676175676520796960308201527f656c64732c20766f7465206f6e20746f6b656e20656d697373696f6e2c20616e60508201527f64207265636569766520627269626573272c2027696d616765273a202764617460708201527f613a696d6167652f7376672b786d6c3b6261736536342c000000000000000000609082015283516140358160a7840160208801613672565b61277d60f01b60a7929091019182015260a901949350505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081526000825161408881601d850160208701613672565b91909101601d0192915050565b6000602082840312156140a757600080fd5b8151610da2816137ce565b6000826140c1576140c1613aa5565b500690565b600082516140d8818460208701613672565b919091019291505056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef3c73766720786d6c6e733d27687474703a2f2f7777772e77332e6f72672f323030302f73766727207072657365727665417370656374526174696f3d27784d696e594d696e206d656574272076696577426f783d273020302033353020333530273e3c7374796c653e2e62617365207b2066696c6c3a20626c61636b3b20666f6e742d66616d696c793a20496d706163743b20666f6e742d73697a653a20353070783b207d3c2f7374796c653e3c726563742077696474683d273130302527206865696768743d2731303025272066696c6c3d272361616161666627202f3e3c7465787420783d2731302720793d2736302720636c6173733d2762617365273ea264697066735822122032f919f5833bb21fbe171848bc5d899665234622c221c312f8d85f35d9688c9664736f6c634300080d0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "Set or reaffirm the approved address for an NFT. The zero address indicates there is no approved address.      Throws unless `msg.sender` is the current NFT owner, or an authorized operator of the current owner.      Throws if `_tokenId` is not a valid NFT. (NOTE: This is not written the EIP)      Throws if `_approved` is the current owner. (NOTE: This is not written the EIP)",
        "params": {
          "_approved": "Address to be approved for the given NFT ID.",
          "_tokenId": "ID of the token to be approved."
        }
      },
      "balanceOf(address)": {
        "details": "Returns the number of NFTs owned by `_owner`.      Throws if `_owner` is the zero address. NFTs assigned to the zero address are considered invalid.",
        "params": {
          "_owner": "Address for whom to query the balance."
        }
      },
      "createLock(uint256,uint256)": {
        "params": {
          "_lockDuration": "Number of seconds to lock tokens for (rounded down to nearest week)",
          "_value": "Amount to deposit"
        }
      },
      "createLockFor(uint256,uint256,address)": {
        "params": {
          "_lockDuration": "Number of seconds to lock tokens for (rounded down to nearest week)",
          "_to": "Address to deposit",
          "_value": "Amount to deposit"
        }
      },
      "depositFor(uint256,uint256)": {
        "details": "Anyone (even a smart contract) can deposit for someone else, but      cannot extend their locktime and deposit for a brand new user",
        "params": {
          "_tokenId": "lock NFT",
          "_value": "Amount to add to user's lock"
        }
      },
      "getApproved(uint256)": {
        "details": "Get the approved address for a single NFT.",
        "params": {
          "_tokenId": "ID of the NFT to query the approval of."
        }
      },
      "getLastUserSlope(uint256)": {
        "params": {
          "_tokenId": "token of the NFT"
        },
        "returns": {
          "_0": "Value of the slope"
        }
      },
      "increaseAmount(uint256,uint256)": {
        "params": {
          "_value": "Amount of tokens to deposit and add to the lock"
        }
      },
      "increaseUnlockTime(uint256,uint256)": {
        "params": {
          "_lockDuration": "New number of seconds until tokens unlock"
        }
      },
      "initialize(address,address)": {
        "params": {
          "token_": "`ERC20CRV` token address"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "Checks if `_operator` is an approved operator for `_owner`.",
        "params": {
          "_operator": "The address that acts on behalf of the owner.",
          "_owner": "The address that owns the NFTs."
        }
      },
      "lockedEnd(uint256)": {
        "params": {
          "_tokenId": "User NFT"
        },
        "returns": {
          "_0": "Epoch time of the lock end"
        }
      },
      "ownerOf(uint256)": {
        "details": "Returns the address of the owner of the NFT.",
        "params": {
          "_tokenId": "The identifier for an NFT."
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Transfers the ownership of an NFT from one address to another address.      Throws unless `msg.sender` is the current owner, an authorized operator, or the      approved address for this NFT.      Throws if `_from` is not the current owner.      Throws if `_to` is the zero address.      Throws if `_tokenId` is not a valid NFT.      If `_to` is a smart contract, it calls `onERC721Received` on `_to` and throws if      the return value is not `bytes4(keccak256(\"onERC721Received(address,address,uint,bytes)\"))`.",
        "params": {
          "_from": "The current owner of the NFT.",
          "_to": "The new owner.",
          "_tokenId": "The NFT to transfer."
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Transfers the ownership of an NFT from one address to another address.      Throws unless `msg.sender` is the current owner, an authorized operator, or the      approved address for this NFT.      Throws if `_from` is not the current owner.      Throws if `_to` is the zero address.      Throws if `_tokenId` is not a valid NFT.      If `_to` is a smart contract, it calls `onERC721Received` on `_to` and throws if      the return value is not `bytes4(keccak256(\"onERC721Received(address,address,uint,bytes)\"))`.",
        "params": {
          "_data": "Additional data with no specified format, sent in call to `_to`.",
          "_from": "The current owner of the NFT.",
          "_to": "The new owner.",
          "_tokenId": "The NFT to transfer."
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Enables or disables approval for a third party (\"operator\") to manage all of      `msg.sender`'s assets. It also emits the ApprovalForAll event.      Throws if `_operator` is the `msg.sender`. (NOTE: This is not written the EIP)",
        "params": {
          "_approved": "True if the operators is approved, false to revoke approval.",
          "_operator": "Address to add to the set of authorized operators."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Interface identification is specified in ERC-165.",
        "params": {
          "_interfaceID": "Id of the interface"
        }
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "Get token by index"
      },
      "tokenURI(uint256)": {
        "details": "Returns current token URI metadata",
        "params": {
          "_tokenId": "Token ID to fetch URI for."
        }
      },
      "totalSupplyAt(uint256)": {
        "params": {
          "_block": "Block to calculate the total voting power at"
        },
        "returns": {
          "_0": "Total voting power at `_block`"
        }
      },
      "totalSupplyAtT(uint256)": {
        "details": "Adheres to the ERC20 `totalSupply` interface for Aragon compatibility",
        "returns": {
          "_0": "Total voting power"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "Throws unless `msg.sender` is the current owner,      an authorized operator, or the approved address for this NFT.      Throws if `_from` is not the current owner.      Throws if `_to` is the zero address.      Throws if `_tokenId` is not a valid NFT.",
        "params": {
          "_from": "The current owner of the NFT.",
          "_to": "The new owner.",
          "_tokenId": "The NFT to transfer."
        }
      },
      "userPointHistoryTs(uint256,uint256)": {
        "params": {
          "_idx": "User epoch number",
          "_tokenId": "token of the NFT"
        },
        "returns": {
          "_0": "Epoch time of the checkpoint"
        }
      },
      "withdraw(uint256)": {
        "details": "Only possible if the lock has expired"
      }
    },
    "stateVariables": {
      "ERC165_INTERFACE_ID": {
        "details": "ERC165 interface ID of ERC165"
      },
      "ERC721_INTERFACE_ID": {
        "details": "ERC165 interface ID of ERC721"
      },
      "ERC721_METADATA_INTERFACE_ID": {
        "details": "ERC165 interface ID of ERC721Metadata"
      },
      "_pointHistory": {
        "details": "epoch -> unsigned point"
      },
      "_userPointHistory": {
        "details": "user -> Point[userEpoch]"
      },
      "idToApprovals": {
        "details": "Mapping from NFT ID to approved address."
      },
      "idToOwner": {
        "details": "Mapping from NFT ID to the address that owns it."
      },
      "name": {
        "details": "Returns the token collection name."
      },
      "ownerToNFTokenCount": {
        "details": "Mapping from owner address to count of his tokens."
      },
      "ownerToNFTokenIdList": {
        "details": "Mapping from owner address to mapping of index to tokenIds"
      },
      "ownerToOperators": {
        "details": "Mapping from owner address to mapping of operator addresses."
      },
      "supportedInterfaces": {
        "details": "Mapping of interface id to bool about whether or not it's supported"
      },
      "symbol": {
        "details": "Returns the token collection symbol."
      },
      "tokenId": {
        "details": "Current count of token"
      },
      "tokenToOwnerIndex": {
        "details": "Mapping from NFT ID to index of owner"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "checkpoint()": {
        "notice": "Record global data to checkpoint"
      },
      "createLock(uint256,uint256)": {
        "notice": "Deposit `_value` tokens for `msg.sender` and lock for `_lock_duration`"
      },
      "createLockFor(uint256,uint256,address)": {
        "notice": "Deposit `_value` tokens for `_to` and lock for `_lock_duration`"
      },
      "depositFor(uint256,uint256)": {
        "notice": "Deposit `_value` tokens for `_tokenId` and add to the lock"
      },
      "getLastUserSlope(uint256)": {
        "notice": "Get the most recently recorded rate of voting power decrease for `_tokenId`"
      },
      "increaseAmount(uint256,uint256)": {
        "notice": "Deposit `_value` additional tokens for `_tokenId` without modifying the unlock time"
      },
      "increaseUnlockTime(uint256,uint256)": {
        "notice": "Extend the unlock time for `_tokenId`"
      },
      "initialize(address,address)": {
        "notice": "Contract constructor"
      },
      "lockedEnd(uint256)": {
        "notice": "Get timestamp when `_tokenId`'s lock finishes"
      },
      "setApprovalForAll(address,bool)": {
        "notice": "This works even if sender doesn't own any tokens at the time."
      },
      "totalSupplyAt(uint256)": {
        "notice": "Calculate total voting power at some point in the past"
      },
      "totalSupplyAtT(uint256)": {
        "notice": "Calculate total voting power"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "The caller is responsible to confirm that `_to` is capable of receiving NFTs or else        they maybe be permanently lost."
      },
      "userPointHistoryTs(uint256,uint256)": {
        "notice": "Get the timestamp for checkpoint `_idx` for `_tokenId`"
      },
      "withdraw(uint256)": {
        "notice": "Withdraw all tokens for `_tokenId`"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 233,
        "contract": "contracts/base/vote/VeUpgradeable.sol:VeUpgradeable",
        "label": "_unlocked",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 26510,
        "contract": "contracts/base/vote/VeUpgradeable.sol:VeUpgradeable",
        "label": "_initialized",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 26513,
        "contract": "contracts/base/vote/VeUpgradeable.sol:VeUpgradeable",
        "label": "_initializing",
        "offset": 1,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 16565,
        "contract": "contracts/base/vote/VeUpgradeable.sol:VeUpgradeable",
        "label": "token",
        "offset": 2,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 16567,
        "contract": "contracts/base/vote/VeUpgradeable.sol:VeUpgradeable",
        "label": "supply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 16572,
        "contract": "contracts/base/vote/VeUpgradeable.sol:VeUpgradeable",
        "label": "locked",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(LockedBalance)25073_storage)"
      },
      {
        "astId": 16576,
        "contract": "contracts/base/vote/VeUpgradeable.sol:VeUpgradeable",
        "label": "ownershipChange",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 16579,
        "contract": "contracts/base/vote/VeUpgradeable.sol:VeUpgradeable",
        "label": "epoch",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 16585,
        "contract": "contracts/base/vote/VeUpgradeable.sol:VeUpgradeable",
        "label": "_pointHistory",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(Point)25068_storage)"
      },
      {
        "astId": 16593,
        "contract": "contracts/base/vote/VeUpgradeable.sol:VeUpgradeable",
        "label": "_userPointHistory",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_array(t_struct(Point)25068_storage)1000000000_storage)"
      },
      {
        "astId": 16598,
        "contract": "contracts/base/vote/VeUpgradeable.sol:VeUpgradeable",
        "label": "userPointEpoch",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 16602,
        "contract": "contracts/base/vote/VeUpgradeable.sol:VeUpgradeable",
        "label": "slopeChanges",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_int128)"
      },
      {
        "astId": 16606,
        "contract": "contracts/base/vote/VeUpgradeable.sol:VeUpgradeable",
        "label": "attachments",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 16610,
        "contract": "contracts/base/vote/VeUpgradeable.sol:VeUpgradeable",
        "label": "voted",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 16612,
        "contract": "contracts/base/vote/VeUpgradeable.sol:VeUpgradeable",
        "label": "controller",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 16629,
        "contract": "contracts/base/vote/VeUpgradeable.sol:VeUpgradeable",
        "label": "tokenId",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 16634,
        "contract": "contracts/base/vote/VeUpgradeable.sol:VeUpgradeable",
        "label": "idToOwner",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 16639,
        "contract": "contracts/base/vote/VeUpgradeable.sol:VeUpgradeable",
        "label": "idToApprovals",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 16644,
        "contract": "contracts/base/vote/VeUpgradeable.sol:VeUpgradeable",
        "label": "ownerToNFTokenCount",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 16651,
        "contract": "contracts/base/vote/VeUpgradeable.sol:VeUpgradeable",
        "label": "ownerToNFTokenIdList",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 16656,
        "contract": "contracts/base/vote/VeUpgradeable.sol:VeUpgradeable",
        "label": "tokenToOwnerIndex",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 16663,
        "contract": "contracts/base/vote/VeUpgradeable.sol:VeUpgradeable",
        "label": "ownerToOperators",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 16668,
        "contract": "contracts/base/vote/VeUpgradeable.sol:VeUpgradeable",
        "label": "supportedInterfaces",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_bytes4,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Point)25068_storage)1000000000_storage": {
        "base": "t_struct(Point)25068_storage",
        "encoding": "inplace",
        "label": "struct IVe.Point[1000000000]",
        "numberOfBytes": "96000000000"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_int128": {
        "encoding": "inplace",
        "label": "int128",
        "numberOfBytes": "16"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes4,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_struct(Point)25068_storage)1000000000_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IVe.Point[1000000000])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Point)25068_storage)1000000000_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_int128)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => int128)",
        "numberOfBytes": "32",
        "value": "t_int128"
      },
      "t_mapping(t_uint256,t_struct(LockedBalance)25073_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IVe.LockedBalance)",
        "numberOfBytes": "32",
        "value": "t_struct(LockedBalance)25073_storage"
      },
      "t_mapping(t_uint256,t_struct(Point)25068_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IVe.Point)",
        "numberOfBytes": "32",
        "value": "t_struct(Point)25068_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(LockedBalance)25073_storage": {
        "encoding": "inplace",
        "label": "struct IVe.LockedBalance",
        "members": [
          {
            "astId": 25070,
            "contract": "contracts/base/vote/VeUpgradeable.sol:VeUpgradeable",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_int128"
          },
          {
            "astId": 25072,
            "contract": "contracts/base/vote/VeUpgradeable.sol:VeUpgradeable",
            "label": "end",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Point)25068_storage": {
        "encoding": "inplace",
        "label": "struct IVe.Point",
        "members": [
          {
            "astId": 25061,
            "contract": "contracts/base/vote/VeUpgradeable.sol:VeUpgradeable",
            "label": "bias",
            "offset": 0,
            "slot": "0",
            "type": "t_int128"
          },
          {
            "astId": 25063,
            "contract": "contracts/base/vote/VeUpgradeable.sol:VeUpgradeable",
            "label": "slope",
            "offset": 16,
            "slot": "0",
            "type": "t_int128"
          },
          {
            "astId": 25065,
            "contract": "contracts/base/vote/VeUpgradeable.sol:VeUpgradeable",
            "label": "ts",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 25067,
            "contract": "contracts/base/vote/VeUpgradeable.sol:VeUpgradeable",
            "label": "blk",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}