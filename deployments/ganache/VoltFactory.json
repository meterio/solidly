{
  "address": "0x99926d145D79567d2F07007e2095A3c1570e6D5e",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "stable",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allPairsLength",
          "type": "uint256"
        }
      ],
      "name": "PairCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptPauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allPairsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "stable",
          "type": "bool"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInitializable",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isPair",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairCodeHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauser",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingPauser",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_state",
          "type": "bool"
        }
      ],
      "name": "setPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pauser",
          "type": "address"
        }
      ],
      "name": "setPauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9e3bd031c965d2291fd42d8494dd1efb2b00dea572bdbb403ee7f0ff744834cb",
  "receipt": {
    "to": null,
    "from": "0x1381C573b97Bf393A81fA42760DD21E109d8092B",
    "contractAddress": "0x99926d145D79567d2F07007e2095A3c1570e6D5e",
    "transactionIndex": 0,
    "gasUsed": "4556866",
    "logsBloom": "0x
    "blockHash": "0xa45e74d68cd08d235430ea548ccab403b824458ab0f28e9d4c4b1e255ceaa3cc",
    "transactionHash": "0x9e3bd031c965d2291fd42d8494dd1efb2b00dea572bdbb403ee7f0ff744834cb",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "4556866",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "3b3b283a31496f0704cc082007acea88",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allPairsLength\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInitializable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairCodeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingPauser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pauser\",\"type\":\"address\"}],\"name\":\"setPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"isPair\":{\"details\":\"Simplified check if its a pair, given that `stable` flag might not be available in peripherals\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/base/core/VoltFactory.sol\":\"VoltFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/base/Reentrancy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nabstract contract Reentrancy {\\n    /// @dev simple re-entrancy check\\n    uint internal _unlocked = 1;\\n\\n    modifier lock() {\\n        require(_unlocked == 1, \\\"Reentrant call\\\");\\n        _unlocked = 2;\\n        _;\\n        _unlocked = 1;\\n    }\\n}\\n\",\"keccak256\":\"0x59c07b769bd280322dea57c93ed20b3e6e1fe1018ab9937b0dfcaddcfb5f2780\",\"license\":\"MIT\"},\"contracts/base/core/PairFees.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../../interface/IERC20.sol\\\";\\nimport \\\"../../lib/SafeERC20.sol\\\";\\n\\n/// @title Base V1 Fees contract is used as a 1:1 pair relationship to split out fees,\\n///        this ensures that the curve does not need to be modified for LP shares\\ncontract PairFees {\\n    using SafeERC20 for IERC20;\\n\\n    /// @dev The pair it is bonded to\\n    address internal pair;\\n    /// @dev Token0 of pair, saved localy and statically for gas optimization\\n    address internal token0;\\n    /// @dev Token1 of pair, saved localy and statically for gas optimization\\n    address internal token1;\\n\\n    constructor(address _token0, address _token1) {\\n        pair = msg.sender;\\n        token0 = _token0;\\n        token1 = _token1;\\n    }\\n\\n    // Allow the pair to transfer fees to users\\n    function claimFeesFor(\\n        address recipient,\\n        uint amount0,\\n        uint amount1\\n    ) external {\\n        require(msg.sender == pair, \\\"Not pair\\\");\\n        if (amount0 > 0) {\\n            IERC20(token0).safeTransfer(recipient, amount0);\\n        }\\n        if (amount1 > 0) {\\n            IERC20(token1).safeTransfer(recipient, amount1);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xed2db5d1b51dcaf2662d6871c6a0ee7c7e3229c36c86728524c76755b6b1c628\",\"license\":\"MIT\"},\"contracts/base/core/VoltFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../../interface/IFactory.sol\\\";\\nimport \\\"./VoltPair.sol\\\";\\n\\ncontract VoltFactory is IFactory {\\n    bool public override isPaused;\\n    address public pauser;\\n    address public pendingPauser;\\n    address public override treasury;\\n\\n    mapping(address => mapping(address => mapping(bool => address)))\\n        public\\n        override getPair;\\n    address[] public allPairs;\\n    /// @dev Simplified check if its a pair, given that `stable` flag might not be available in peripherals\\n    mapping(address => bool) public override isPair;\\n\\n    address internal _temp0;\\n    address internal _temp1;\\n    bool internal _temp;\\n\\n    event PairCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        bool stable,\\n        address pair,\\n        uint allPairsLength\\n    );\\n\\n    constructor() {\\n        pauser = msg.sender;\\n        isPaused = false;\\n    }\\n\\n    function allPairsLength() external view returns (uint) {\\n        return allPairs.length;\\n    }\\n\\n    function setPauser(address _pauser) external {\\n        require(msg.sender == pauser, \\\"VoltFactory: Not pauser\\\");\\n        pendingPauser = _pauser;\\n    }\\n\\n    function acceptPauser() external {\\n        require(msg.sender == pendingPauser, \\\"VoltFactory: Not pending pauser\\\");\\n        pauser = pendingPauser;\\n    }\\n\\n    function setPause(bool _state) external {\\n        require(msg.sender == pauser, \\\"VoltFactory: Not pauser\\\");\\n        isPaused = _state;\\n    }\\n\\n    function setTreasury(address _treasury) external {\\n        require(msg.sender == pauser, \\\"VoltFactory: Not pauser\\\");\\n        treasury = _treasury;\\n    }\\n\\n    function pairCodeHash() external pure override returns (bytes32) {\\n        return keccak256(type(VoltPair).creationCode);\\n    }\\n\\n    function getInitializable()\\n        external\\n        view\\n        override\\n        returns (\\n            address,\\n            address,\\n            bool\\n        )\\n    {\\n        return (_temp0, _temp1, _temp);\\n    }\\n\\n    function createPair(\\n        address tokenA,\\n        address tokenB,\\n        bool stable\\n    ) external override returns (address pair) {\\n        require(tokenA != tokenB, \\\"VoltFactory: IDENTICAL_ADDRESSES\\\");\\n        (address token0, address token1) = tokenA < tokenB\\n            ? (tokenA, tokenB)\\n            : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"VoltFactory: ZERO_ADDRESS\\\");\\n        require(\\n            getPair[token0][token1][stable] == address(0),\\n            \\\"VoltFactory: PAIR_EXISTS\\\"\\n        );\\n        // notice salt includes stable as well, 3 parameters\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1, stable));\\n        (_temp0, _temp1, _temp) = (token0, token1, stable);\\n        pair = address(new VoltPair{salt: salt}());\\n        getPair[token0][token1][stable] = pair;\\n        // populate mapping in the reverse direction\\n        getPair[token1][token0][stable] = pair;\\n        allPairs.push(pair);\\n        isPair[pair] = true;\\n        emit PairCreated(token0, token1, stable, pair, allPairs.length);\\n    }\\n}\\n\",\"keccak256\":\"0x0a8c4800e725c8871a359354709df2790315eb3b927e6307a300da21345f5d90\",\"license\":\"MIT\"},\"contracts/base/core/VoltPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../../interface/IERC20.sol\\\";\\nimport \\\"../../interface/IERC721Metadata.sol\\\";\\nimport \\\"../../interface/IPair.sol\\\";\\nimport \\\"../../interface/IFactory.sol\\\";\\nimport \\\"../../interface/ICallee.sol\\\";\\nimport \\\"../../interface/IUnderlying.sol\\\";\\nimport \\\"./PairFees.sol\\\";\\nimport \\\"../../lib/Math.sol\\\";\\nimport \\\"../../lib/SafeERC20.sol\\\";\\nimport \\\"../Reentrancy.sol\\\";\\n\\n// The base pair of pools, either stable or volatile\\ncontract VoltPair is IERC20, IPair, Reentrancy {\\n    using SafeERC20 for IERC20;\\n\\n    string public name;\\n    string public symbol;\\n    uint8 public constant decimals = 18;\\n\\n    /// @dev Used to denote stable or volatile pair\\n    bool public stable;\\n\\n    uint public override totalSupply = 0;\\n\\n    mapping(address => mapping(address => uint)) public override allowance;\\n    mapping(address => uint) public override balanceOf;\\n\\n    bytes32 public DOMAIN_SEPARATOR;\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n    uint internal constant _FEE_PRECISION = 1e32;\\n    mapping(address => uint) public nonces;\\n    uint public chainId;\\n\\n    uint internal constant MINIMUM_LIQUIDITY = 10**3;\\n    /// @dev 50% of swap fee\\n    uint internal constant TREASURY_FEE = 2;\\n    /// @dev Capture oracle reading every 30 minutes\\n    uint internal constant PERIOD_SIZE = 1800;\\n\\n    address public override token0;\\n    address public override token1;\\n    address public fees;\\n    address public factory;\\n\\n    Observation[] public observations;\\n\\n    uint internal decimals0;\\n    uint internal decimals1;\\n\\n    uint public reserve0;\\n    uint public reserve1;\\n    uint public blockTimestampLast;\\n\\n    uint public reserve0CumulativeLast;\\n    uint public reserve1CumulativeLast;\\n\\n    // index0 and index1 are used to accumulate fees,\\n    // this is split out from normal trades to keep the swap \\\"clean\\\"\\n    // this further allows LP holders to easily claim fees for tokens they have/staked\\n    uint public index0 = 0;\\n    uint public index1 = 0;\\n\\n    // position assigned to each LP to track their current index0 & index1 vs the global position\\n    mapping(address => uint) public supplyIndex0;\\n    mapping(address => uint) public supplyIndex1;\\n\\n    // tracks the amount of unclaimed, but claimable tokens off of fees for token0 and token1\\n    mapping(address => uint) public claimable0;\\n    mapping(address => uint) public claimable1;\\n\\n    event Treasury(address indexed sender, uint amount0, uint amount1);\\n    event Fees(address indexed sender, uint amount0, uint amount1);\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(\\n        address indexed sender,\\n        uint amount0,\\n        uint amount1,\\n        address indexed to\\n    );\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint reserve0, uint reserve1);\\n    event Claim(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint amount0,\\n        uint amount1\\n    );\\n\\n    constructor() {\\n        factory = msg.sender;\\n        (address _token0, address _token1, bool _stable) = IFactory(msg.sender)\\n            .getInitializable();\\n        (token0, token1, stable) = (_token0, _token1, _stable);\\n        fees = address(new PairFees(_token0, _token1));\\n        if (_stable) {\\n            name = string(\\n                abi.encodePacked(\\n                    \\\"StableV1 AMM - \\\",\\n                    IERC721Metadata(_token0).symbol(),\\n                    \\\"/\\\",\\n                    IERC721Metadata(_token1).symbol()\\n                )\\n            );\\n            symbol = string(\\n                abi.encodePacked(\\n                    \\\"sAMM-\\\",\\n                    IERC721Metadata(_token0).symbol(),\\n                    \\\"/\\\",\\n                    IERC721Metadata(_token1).symbol()\\n                )\\n            );\\n        } else {\\n            name = string(\\n                abi.encodePacked(\\n                    \\\"VolatileV1 AMM - \\\",\\n                    IERC721Metadata(_token0).symbol(),\\n                    \\\"/\\\",\\n                    IERC721Metadata(_token1).symbol()\\n                )\\n            );\\n            symbol = string(\\n                abi.encodePacked(\\n                    \\\"vAMM-\\\",\\n                    IERC721Metadata(_token0).symbol(),\\n                    \\\"/\\\",\\n                    IERC721Metadata(_token1).symbol()\\n                )\\n            );\\n        }\\n\\n        decimals0 = 10**IUnderlying(_token0).decimals();\\n        decimals1 = 10**IUnderlying(_token1).decimals();\\n\\n        observations.push(Observation(block.timestamp, 0, 0));\\n\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(\\n                    \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n                ),\\n                keccak256(bytes(name)),\\n                keccak256(\\\"1\\\"),\\n                block.chainid,\\n                address(this)\\n            )\\n        );\\n        chainId = block.chainid;\\n    }\\n\\n    function observationLength() external view returns (uint) {\\n        return observations.length;\\n    }\\n\\n    function lastObservation() public view returns (Observation memory) {\\n        return observations[observations.length - 1];\\n    }\\n\\n    function metadata()\\n        external\\n        view\\n        returns (\\n            uint dec0,\\n            uint dec1,\\n            uint r0,\\n            uint r1,\\n            bool st,\\n            address t0,\\n            address t1\\n        )\\n    {\\n        return (\\n            decimals0,\\n            decimals1,\\n            reserve0,\\n            reserve1,\\n            stable,\\n            token0,\\n            token1\\n        );\\n    }\\n\\n    function tokens() external view override returns (address, address) {\\n        return (token0, token1);\\n    }\\n\\n    /// @dev Claim accumulated but unclaimed fees (viewable via claimable0 and claimable1)\\n    function claimFees()\\n        external\\n        override\\n        returns (uint claimed0, uint claimed1)\\n    {\\n        _updateFor(msg.sender);\\n\\n        claimed0 = claimable0[msg.sender];\\n        claimed1 = claimable1[msg.sender];\\n\\n        if (claimed0 > 0 || claimed1 > 0) {\\n            claimable0[msg.sender] = 0;\\n            claimable1[msg.sender] = 0;\\n\\n            PairFees(fees).claimFeesFor(msg.sender, claimed0, claimed1);\\n\\n            emit Claim(msg.sender, msg.sender, claimed0, claimed1);\\n        }\\n    }\\n\\n    /// @dev Accrue fees on token0\\n    function _update0(uint amount) internal {\\n        uint toTreasury;\\n        address treasury = IFactory(factory).treasury();\\n        if (treasury != address(0)) {\\n            toTreasury = amount / TREASURY_FEE;\\n            // transfer the fees out to PairFees and Treasury\\n            IERC20(token0).safeTransfer(treasury, toTreasury);\\n            // keep the same structure of events for compatability\\n            emit Treasury(msg.sender, toTreasury, 0);\\n        }\\n        uint toFees = amount - toTreasury;\\n        IERC20(token0).safeTransfer(fees, toFees);\\n        // 1e32 adjustment is removed during claim\\n        uint _ratio = (toFees * _FEE_PRECISION) / totalSupply;\\n        if (_ratio > 0) {\\n            index0 += _ratio;\\n        }\\n        emit Fees(msg.sender, toFees, 0);\\n    }\\n\\n    /// @dev Accrue fees on token1\\n    function _update1(uint amount) internal {\\n        uint toTreasury;\\n        address treasury = IFactory(factory).treasury();\\n        if (treasury != address(0)) {\\n            toTreasury = amount / TREASURY_FEE;\\n            // transfer the fees out to PairFees and Treasury\\n            IERC20(token1).safeTransfer(treasury, toTreasury);\\n            // keep the same structure of events for compatability\\n            emit Treasury(msg.sender, 0, toTreasury);\\n        }\\n        uint toFees = amount - toTreasury;\\n        IERC20(token1).safeTransfer(fees, toFees);\\n        uint _ratio = (toFees * _FEE_PRECISION) / totalSupply;\\n        if (_ratio > 0) {\\n            index1 += _ratio;\\n        }\\n        emit Fees(msg.sender, 0, toFees);\\n    }\\n\\n    /// @dev This function MUST be called on any balance changes,\\n    ///      otherwise can be used to infinitely claim fees\\n    //       Fees are segregated from core funds, so fees can never put liquidity at risk\\n    function _updateFor(address recipient) internal {\\n        uint _supplied = balanceOf[recipient];\\n        // get LP balance of `recipient`\\n        if (_supplied > 0) {\\n            uint _supplyIndex0 = supplyIndex0[recipient];\\n            // get last adjusted index0 for recipient\\n            uint _supplyIndex1 = supplyIndex1[recipient];\\n            uint _index0 = index0;\\n            // get global index0 for accumulated fees\\n            uint _index1 = index1;\\n            supplyIndex0[recipient] = _index0;\\n            // update user current position to global position\\n            supplyIndex1[recipient] = _index1;\\n            uint _delta0 = _index0 - _supplyIndex0;\\n            // see if there is any difference that need to be accrued\\n            uint _delta1 = _index1 - _supplyIndex1;\\n            if (_delta0 > 0) {\\n                uint _share = (_supplied * _delta0) / _FEE_PRECISION;\\n                // add accrued difference for each supplied token\\n                claimable0[recipient] += _share;\\n            }\\n            if (_delta1 > 0) {\\n                uint _share = (_supplied * _delta1) / _FEE_PRECISION;\\n                claimable1[recipient] += _share;\\n            }\\n        } else {\\n            supplyIndex0[recipient] = index0;\\n            // new users are set to the default global state\\n            supplyIndex1[recipient] = index1;\\n        }\\n    }\\n\\n    function getReserves()\\n        public\\n        view\\n        override\\n        returns (\\n            uint112 _reserve0,\\n            uint112 _reserve1,\\n            uint32 _blockTimestampLast\\n        )\\n    {\\n        _reserve0 = uint112(reserve0);\\n        _reserve1 = uint112(reserve1);\\n        _blockTimestampLast = uint32(blockTimestampLast);\\n    }\\n\\n    /// @dev Update reserves and, on the first call per block, price accumulators\\n    function _update(\\n        uint balance0,\\n        uint balance1,\\n        uint _reserve0,\\n        uint _reserve1\\n    ) internal {\\n        uint blockTimestamp = block.timestamp;\\n        uint timeElapsed = blockTimestamp - blockTimestampLast;\\n        // overflow is desired\\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\\n            unchecked {\\n                reserve0CumulativeLast += _reserve0 * timeElapsed;\\n                reserve1CumulativeLast += _reserve1 * timeElapsed;\\n            }\\n        }\\n\\n        Observation memory _point = lastObservation();\\n        timeElapsed = blockTimestamp - _point.timestamp;\\n        // compare the last observation with current timestamp,\\n        // if greater than 30 minutes, record a new event\\n        if (timeElapsed > PERIOD_SIZE) {\\n            observations.push(\\n                Observation(\\n                    blockTimestamp,\\n                    reserve0CumulativeLast,\\n                    reserve1CumulativeLast\\n                )\\n            );\\n        }\\n        reserve0 = balance0;\\n        reserve1 = balance1;\\n        blockTimestampLast = blockTimestamp;\\n        emit Sync(reserve0, reserve1);\\n    }\\n\\n    /// @dev Produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\n    function currentCumulativePrices()\\n        public\\n        view\\n        returns (\\n            uint reserve0Cumulative,\\n            uint reserve1Cumulative,\\n            uint blockTimestamp\\n        )\\n    {\\n        blockTimestamp = block.timestamp;\\n        reserve0Cumulative = reserve0CumulativeLast;\\n        reserve1Cumulative = reserve1CumulativeLast;\\n\\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\\n        (\\n            uint _reserve0,\\n            uint _reserve1,\\n            uint _blockTimestampLast\\n        ) = getReserves();\\n        if (_blockTimestampLast != blockTimestamp) {\\n            // subtraction overflow is desired\\n            uint timeElapsed = blockTimestamp - _blockTimestampLast;\\n            unchecked {\\n                reserve0Cumulative += _reserve0 * timeElapsed;\\n                reserve1Cumulative += _reserve1 * timeElapsed;\\n            }\\n        }\\n    }\\n\\n    /// @dev Gives the current twap price measured from amountIn * tokenIn gives amountOut\\n    function current(address tokenIn, uint amountIn)\\n        external\\n        view\\n        returns (uint amountOut)\\n    {\\n        Observation memory _observation = lastObservation();\\n        (\\n            uint reserve0Cumulative,\\n            uint reserve1Cumulative,\\n\\n        ) = currentCumulativePrices();\\n        if (block.timestamp == _observation.timestamp) {\\n            _observation = observations[observations.length - 2];\\n        }\\n\\n        uint timeElapsed = block.timestamp - _observation.timestamp;\\n        uint _reserve0 = (reserve0Cumulative -\\n            _observation.reserve0Cumulative) / timeElapsed;\\n        uint _reserve1 = (reserve1Cumulative -\\n            _observation.reserve1Cumulative) / timeElapsed;\\n        amountOut = _getAmountOut(amountIn, tokenIn, _reserve0, _reserve1);\\n    }\\n\\n    /// @dev As per `current`, however allows user configured granularity, up to the full window size\\n    function quote(\\n        address tokenIn,\\n        uint amountIn,\\n        uint granularity\\n    ) external view returns (uint amountOut) {\\n        uint[] memory _prices = sample(tokenIn, amountIn, granularity, 1);\\n        uint priceAverageCumulative;\\n        for (uint i = 0; i < _prices.length; i++) {\\n            priceAverageCumulative += _prices[i];\\n        }\\n        return priceAverageCumulative / granularity;\\n    }\\n\\n    /// @dev Returns a memory set of twap prices\\n    function prices(\\n        address tokenIn,\\n        uint amountIn,\\n        uint points\\n    ) external view returns (uint[] memory) {\\n        return sample(tokenIn, amountIn, points, 1);\\n    }\\n\\n    function sample(\\n        address tokenIn,\\n        uint amountIn,\\n        uint points,\\n        uint window\\n    ) public view returns (uint[] memory) {\\n        uint[] memory _prices = new uint[](points);\\n\\n        uint length = observations.length - 1;\\n        uint i = length - (points * window);\\n        uint nextIndex = 0;\\n        uint index = 0;\\n\\n        for (; i < length; i += window) {\\n            nextIndex = i + window;\\n            uint timeElapsed = observations[nextIndex].timestamp -\\n                observations[i].timestamp;\\n            uint _reserve0 = (observations[nextIndex].reserve0Cumulative -\\n                observations[i].reserve0Cumulative) / timeElapsed;\\n            uint _reserve1 = (observations[nextIndex].reserve1Cumulative -\\n                observations[i].reserve1Cumulative) / timeElapsed;\\n            _prices[index] = _getAmountOut(\\n                amountIn,\\n                tokenIn,\\n                _reserve0,\\n                _reserve1\\n            );\\n            index = index + 1;\\n        }\\n        return _prices;\\n    }\\n\\n    /// @dev This low-level function should be called from a contract which performs important safety checks\\n    ///      standard uniswap v2 implementation\\n    function mint(address to) external override lock returns (uint liquidity) {\\n        (uint _reserve0, uint _reserve1) = (reserve0, reserve1);\\n        uint _balance0 = IERC20(token0).balanceOf(address(this));\\n        uint _balance1 = IERC20(token1).balanceOf(address(this));\\n        uint _amount0 = _balance0 - _reserve0;\\n        uint _amount1 = _balance1 - _reserve1;\\n\\n        uint _totalSupply = totalSupply;\\n        // gas savings, must be defined here since totalSupply can update in _mintFee\\n        if (_totalSupply == 0) {\\n            liquidity = Math.sqrt(_amount0 * _amount1) - MINIMUM_LIQUIDITY;\\n            // permanently lock the first MINIMUM_LIQUIDITY tokens\\n            _mint(address(0), MINIMUM_LIQUIDITY);\\n        } else {\\n            liquidity = Math.min(\\n                (_amount0 * _totalSupply) / _reserve0,\\n                (_amount1 * _totalSupply) / _reserve1\\n            );\\n        }\\n        require(liquidity > 0, \\\"VoltPair: INSUFFICIENT_LIQUIDITY_MINTED\\\");\\n        _mint(to, liquidity);\\n\\n        _update(_balance0, _balance1, _reserve0, _reserve1);\\n        emit Mint(msg.sender, _amount0, _amount1);\\n    }\\n\\n    /// @dev This low-level function should be called from a contract which performs important safety checks\\n    ///      standard uniswap v2 implementation\\n    function burn(address to)\\n        external\\n        override\\n        lock\\n        returns (uint amount0, uint amount1)\\n    {\\n        (uint _reserve0, uint _reserve1) = (reserve0, reserve1);\\n        (address _token0, address _token1) = (token0, token1);\\n        uint _balance0 = IERC20(_token0).balanceOf(address(this));\\n        uint _balance1 = IERC20(_token1).balanceOf(address(this));\\n        uint _liquidity = balanceOf[address(this)];\\n\\n        // gas savings, must be defined here since totalSupply can update in _mintFee\\n        uint _totalSupply = totalSupply;\\n        // using balances ensures pro-rata distribution\\n        amount0 = (_liquidity * _balance0) / _totalSupply;\\n        // using balances ensures pro-rata distribution\\n        amount1 = (_liquidity * _balance1) / _totalSupply;\\n        require(\\n            amount0 > 0 && amount1 > 0,\\n            \\\"VoltPair: INSUFFICIENT_LIQUIDITY_BURNED\\\"\\n        );\\n        _burn(address(this), _liquidity);\\n        IERC20(_token0).safeTransfer(to, amount0);\\n        IERC20(_token1).safeTransfer(to, amount1);\\n        _balance0 = IERC20(_token0).balanceOf(address(this));\\n        _balance1 = IERC20(_token1).balanceOf(address(this));\\n\\n        _update(_balance0, _balance1, _reserve0, _reserve1);\\n        emit Burn(msg.sender, amount0, amount1, to);\\n    }\\n\\n    /// @dev This low-level function should be called from a contract which performs important safety checks\\n    function swap(\\n        uint amount0Out,\\n        uint amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external override lock {\\n        require(!IFactory(factory).isPaused(), \\\"VoltPair: PAUSE\\\");\\n        require(\\n            amount0Out > 0 || amount1Out > 0,\\n            \\\"VoltPair: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n        );\\n        (uint _reserve0, uint _reserve1) = (reserve0, reserve1);\\n        require(\\n            amount0Out < _reserve0 && amount1Out < _reserve1,\\n            \\\"VoltPair: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint _balance0;\\n        uint _balance1;\\n        {\\n            // scope for _token{0,1}, avoids stack too deep errors\\n            (address _token0, address _token1) = (token0, token1);\\n            require(to != _token0 && to != _token1, \\\"VoltPair: INVALID_TO\\\");\\n            // optimistically transfer tokens\\n            if (amount0Out > 0) IERC20(_token0).safeTransfer(to, amount0Out);\\n            // optimistically transfer tokens\\n            if (amount1Out > 0) IERC20(_token1).safeTransfer(to, amount1Out);\\n            // callback, used for flash loans\\n            if (data.length > 0)\\n                ICallee(to).hook(msg.sender, amount0Out, amount1Out, data);\\n            _balance0 = IERC20(_token0).balanceOf(address(this));\\n            _balance1 = IERC20(_token1).balanceOf(address(this));\\n        }\\n        uint amount0In = _balance0 > _reserve0 - amount0Out\\n            ? _balance0 - (_reserve0 - amount0Out)\\n            : 0;\\n        uint amount1In = _balance1 > _reserve1 - amount1Out\\n            ? _balance1 - (_reserve1 - amount1Out)\\n            : 0;\\n        require(\\n            amount0In > 0 || amount1In > 0,\\n            \\\"VoltPair: INSUFFICIENT_INPUT_AMOUNT\\\"\\n        );\\n        {\\n            // scope for reserve{0,1}Adjusted, avoids stack too deep errors\\n            (address _token0, address _token1) = (token0, token1);\\n            // accrue fees for token0 and move them out of pool\\n            if (amount0In > 0) _update0(swapFee(amount0In));\\n            // accrue fees for token1 and move them out of pool\\n            if (amount1In > 0) _update1(swapFee(amount1In));\\n            // since we removed tokens, we need to reconfirm balances,\\n            // can also simply use previous balance - amountIn/ SWAP_FEE,\\n            // but doing balanceOf again as safety check\\n            _balance0 = IERC20(_token0).balanceOf(address(this));\\n            _balance1 = IERC20(_token1).balanceOf(address(this));\\n            // The curve, either x3y+y3x for stable pools, or x*y for volatile pools\\n            require(\\n                _k(_balance0, _balance1) >= _k(_reserve0, _reserve1),\\n                \\\"VoltPair: K\\\"\\n            );\\n        }\\n\\n        _update(_balance0, _balance1, _reserve0, _reserve1);\\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\n    }\\n\\n    /// @dev Force balances to match reserves\\n    function skim(address to) external lock {\\n        (address _token0, address _token1) = (token0, token1);\\n        IERC20(_token0).safeTransfer(\\n            to,\\n            IERC20(_token0).balanceOf(address(this)) - (reserve0)\\n        );\\n        IERC20(_token1).safeTransfer(\\n            to,\\n            IERC20(_token1).balanceOf(address(this)) - (reserve1)\\n        );\\n    }\\n\\n    // force reserves to match balances\\n    function sync() external lock {\\n        _update(\\n            IERC20(token0).balanceOf(address(this)),\\n            IERC20(token1).balanceOf(address(this)),\\n            reserve0,\\n            reserve1\\n        );\\n    }\\n\\n    function _f(uint x0, uint y) internal pure returns (uint) {\\n        return\\n            (x0 * ((((y * y) / 1e18) * y) / 1e18)) /\\n            1e18 +\\n            (((((x0 * x0) / 1e18) * x0) / 1e18) * y) /\\n            1e18;\\n    }\\n\\n    function _d(uint x0, uint y) internal pure returns (uint) {\\n        return\\n            (3 * x0 * ((y * y) / 1e18)) /\\n            1e18 +\\n            ((((x0 * x0) / 1e18) * x0) / 1e18);\\n    }\\n\\n    function _getY(\\n        uint x0,\\n        uint xy,\\n        uint y\\n    ) internal pure returns (uint) {\\n        for (uint i = 0; i < 255; i++) {\\n            uint yPrev = y;\\n            uint k = _f(x0, y);\\n            if (k < xy) {\\n                uint dy = ((xy - k) * 1e18) / _d(x0, y);\\n                y = y + dy;\\n            } else {\\n                uint dy = ((k - xy) * 1e18) / _d(x0, y);\\n                y = y - dy;\\n            }\\n            if (Math.closeTo(y, yPrev, 1)) {\\n                break;\\n            }\\n        }\\n        return y;\\n    }\\n\\n    function getAmountOut(uint amountIn, address tokenIn)\\n        external\\n        view\\n        override\\n        returns (uint)\\n    {\\n        (uint _reserve0, uint _reserve1) = (reserve0, reserve1);\\n        // remove fee from amount received\\n        amountIn -= swapFee(amountIn);\\n        return _getAmountOut(amountIn, tokenIn, _reserve0, _reserve1);\\n    }\\n\\n    function _getAmountOut(\\n        uint amountIn,\\n        address tokenIn,\\n        uint _reserve0,\\n        uint _reserve1\\n    ) internal view returns (uint) {\\n        if (stable) {\\n            uint xy = _k(_reserve0, _reserve1);\\n            _reserve0 = (_reserve0 * 1e18) / decimals0;\\n            _reserve1 = (_reserve1 * 1e18) / decimals1;\\n            (uint reserveA, uint reserveB) = tokenIn == token0\\n                ? (_reserve0, _reserve1)\\n                : (_reserve1, _reserve0);\\n            amountIn = tokenIn == token0\\n                ? (amountIn * 1e18) / decimals0\\n                : (amountIn * 1e18) / decimals1;\\n            uint y = reserveB - _getY(amountIn + reserveA, xy, reserveB);\\n            return (y * (tokenIn == token0 ? decimals1 : decimals0)) / 1e18;\\n        } else {\\n            (uint reserveA, uint reserveB) = tokenIn == token0\\n                ? (_reserve0, _reserve1)\\n                : (_reserve1, _reserve0);\\n            return (amountIn * reserveB) / (reserveA + amountIn);\\n        }\\n    }\\n\\n    function _k(uint x, uint y) internal view returns (uint) {\\n        if (stable) {\\n            uint _x = (x * 1e18) / decimals0;\\n            uint _y = (y * 1e18) / decimals1;\\n            uint _a = (_x * _y) / 1e18;\\n            uint _b = ((_x * _x) / 1e18 + (_y * _y) / 1e18);\\n            // x3y+y3x >= k\\n            return (_a * _b) / 1e18;\\n        } else {\\n            // xy >= k\\n            return x * y;\\n        }\\n    }\\n\\n    function swapFee(uint256 amount) internal view returns (uint256) {\\n        if (stable) {\\n            return (amount * 4) / 10000;\\n        } else {\\n            return (amount * 3) / 1000;\\n        }\\n    }\\n\\n    //****************************************************************************\\n    //**************************** ERC20 *****************************************\\n    //****************************************************************************\\n\\n    function _mint(address dst, uint amount) internal {\\n        // balances must be updated on mint/burn/transfer\\n        _updateFor(dst);\\n        totalSupply += amount;\\n        balanceOf[dst] += amount;\\n        emit Transfer(address(0), dst, amount);\\n    }\\n\\n    function _burn(address dst, uint amount) internal {\\n        _updateFor(dst);\\n        totalSupply -= amount;\\n        balanceOf[dst] -= amount;\\n        emit Transfer(dst, address(0), amount);\\n    }\\n\\n    function approve(address spender, uint amount)\\n        external\\n        override\\n        returns (bool)\\n    {\\n        require(spender != address(0), \\\"VoltPair: Approve to the zero address\\\");\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint value,\\n        uint deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override {\\n        require(deadline >= block.timestamp, \\\"VoltPair: EXPIRED\\\");\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                DOMAIN_SEPARATOR,\\n                keccak256(\\n                    abi.encode(\\n                        PERMIT_TYPEHASH,\\n                        owner,\\n                        spender,\\n                        value,\\n                        nonces[owner]++,\\n                        deadline\\n                    )\\n                )\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(\\n            recoveredAddress != address(0) && recoveredAddress == owner,\\n            \\\"VoltPair: INVALID_SIGNATURE\\\"\\n        );\\n        allowance[owner][spender] = value;\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function transfer(address dst, uint amount)\\n        external\\n        override\\n        returns (bool)\\n    {\\n        _transferTokens(msg.sender, dst, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint amount\\n    ) external override returns (bool) {\\n        address spender = msg.sender;\\n        uint spenderAllowance = allowance[src][spender];\\n\\n        if (spender != src && spenderAllowance != type(uint).max) {\\n            require(\\n                spenderAllowance >= amount,\\n                \\\"VoltPair: Insufficient allowance\\\"\\n            );\\n            unchecked {\\n                uint newAllowance = spenderAllowance - amount;\\n                allowance[src][spender] = newAllowance;\\n                emit Approval(src, spender, newAllowance);\\n            }\\n        }\\n\\n        _transferTokens(src, dst, amount);\\n        return true;\\n    }\\n\\n    function _transferTokens(\\n        address src,\\n        address dst,\\n        uint amount\\n    ) internal {\\n        require(dst != address(0), \\\"VoltPair: Transfer to the zero address\\\");\\n\\n        // update fee position for src\\n        _updateFor(src);\\n        // update fee position for dst\\n        _updateFor(dst);\\n\\n        uint srcBalance = balanceOf[src];\\n        require(\\n            srcBalance >= amount,\\n            \\\"VoltPair: Transfer amount exceeds balance\\\"\\n        );\\n        unchecked {\\n            balanceOf[src] = srcBalance - amount;\\n        }\\n\\n        balanceOf[dst] += amount;\\n\\n        emit Transfer(src, dst, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x1727b7e30f7c4a60a143605313a89b9a5e01b0345165310b26e3cf52f9537a42\",\"license\":\"MIT\"},\"contracts/interface/ICallee.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface ICallee {\\n    function hook(\\n        address sender,\\n        uint amount0,\\n        uint amount1,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x2fab4d26f3f7c642d1bfbf989352d2fac71442d135cb64341f560c53ad1ec5b1\",\"license\":\"MIT\"},\"contracts/interface/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8609505e815e06dac85e0cc77ad7bbb641ceec24e5c8e012483e8576dd09ce09\",\"license\":\"MIT\"},\"contracts/interface/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0x224e032b714ae191e5e419054a144402b01597e8b2eb36db4f6e38d3e42b0db7\",\"license\":\"MIT\"},\"contracts/interface/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed approved,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId)\\n        external\\n        view\\n        returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6983264dae1151fd2451f1cb2e4cb9a369f6dd25577600d1733fe6e4da0dc35d\",\"license\":\"MIT\"},\"contracts/interface/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x25b30686d5b7b33b8c7e58a5cef5f01d04f2405a92623f923a7bc36c6271733c\",\"license\":\"MIT\"},\"contracts/interface/IFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IFactory {\\n    function treasury() external view returns (address);\\n\\n    function isPair(address pair) external view returns (bool);\\n\\n    function getInitializable()\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            bool\\n        );\\n\\n    function isPaused() external view returns (bool);\\n\\n    function pairCodeHash() external pure returns (bytes32);\\n\\n    function getPair(\\n        address tokenA,\\n        address token,\\n        bool stable\\n    ) external view returns (address);\\n\\n    function createPair(\\n        address tokenA,\\n        address tokenB,\\n        bool stable\\n    ) external returns (address pair);\\n}\\n\",\"keccak256\":\"0x22270dbb92d05a3dae6d38084db2ce1db27dee00af111b6502c34efe7106508b\",\"license\":\"MIT\"},\"contracts/interface/IPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IPair {\\n    // Structure to capture time period obervations every 30 minutes, used for local oracles\\n    struct Observation {\\n        uint timestamp;\\n        uint reserve0Cumulative;\\n        uint reserve1Cumulative;\\n    }\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint value,\\n        uint deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function swap(\\n        uint amount0Out,\\n        uint amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n\\n    function mint(address to) external returns (uint liquidity);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 _reserve0,\\n            uint112 _reserve1,\\n            uint32 _blockTimestampLast\\n        );\\n\\n    function getAmountOut(uint, address) external view returns (uint);\\n\\n    function claimFees() external returns (uint, uint);\\n\\n    function tokens() external view returns (address, address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function stable() external view returns (bool);\\n\\n    function metadata()\\n        external\\n        view\\n        returns (\\n            uint dec0,\\n            uint dec1,\\n            uint r0,\\n            uint r1,\\n            bool st,\\n            address t0,\\n            address t1\\n        );\\n}\\n\",\"keccak256\":\"0x978d3132f8f5f6752533d94a3024f25ced205df57475d5e2d7c09f301dd7c762\",\"license\":\"MIT\"},\"contracts/interface/IUnderlying.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IUnderlying {\\n    function approve(address spender, uint value) external returns (bool);\\n\\n    function mint(address, uint) external;\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function balanceOf(address) external view returns (uint);\\n\\n    function transfer(address, uint) external returns (bool);\\n\\n    function decimals() external returns (uint8);\\n}\\n\",\"keccak256\":\"0x9f1b01666233804a5e847f5385ec03364af51b2281eab803c8b4e1895e3c22ca\",\"license\":\"MIT\"},\"contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n        (bool success, bytes memory returndata) = target.call(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return\\n            functionDelegateCall(\\n                target,\\n                data,\\n                \\\"Address: low-level delegate call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x284fcdaef2f20ec54759bfb0821ee3a3459a1f0bc302b29e7fcc3c2f42e728df\",\"license\":\"MIT\"},\"contracts/lib/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nlibrary Math {\\n    function max(uint a, uint b) internal pure returns (uint) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function min(uint a, uint b) internal pure returns (uint) {\\n        return a < b ? a : b;\\n    }\\n\\n    function positiveInt128(int128 value) internal pure returns (int128) {\\n        return value < 0 ? int128(0) : value;\\n    }\\n\\n    function closeTo(\\n        uint a,\\n        uint b,\\n        uint target\\n    ) internal pure returns (bool) {\\n        if (a > b) {\\n            if (a - b <= target) {\\n                return true;\\n            }\\n        } else {\\n            if (b - a <= target) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8a50db5ef01ef869b1a7df3cf485d6c87473549c70fbefc54bdea34f8bc78538\",\"license\":\"MIT\"},\"contracts/lib/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../interface/IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint value\\n    ) internal {\\n        uint newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(\\n            data,\\n            \\\"SafeERC20: low-level call failed\\\"\\n        );\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(\\n                abi.decode(returndata, (bool)),\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd09403b2f52a045a82861c53059fb835daabe908fd774f948370979588b3fe1a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506000805460ff196101003302166001600160a81b03199091161790556151278061003c6000396000f3fe60806040523480156200001157600080fd5b5060043610620001095760003560e01c80639a7165e411620000a3578063bedb86fb116200006e578063bedb86fb1462000236578063e5e31b13146200024d578063eb13c4cf1462000273578063f0f4426014620002ac57600080fd5b80639a7165e414620001e05780639aab924814620001f45780639fd0506d14620001fe578063b187bd26146200021757600080fd5b8063574f2ba311620000e4578063574f2ba3146200016557806361d027b314620001785780636801cc30146200018c57806382dfdce414620001c957600080fd5b8063167a6f90146200010e5780631e3dd18b146200011a5780632d88af4a146200014e575b600080fd5b62000118620002c3565b005b620001316200012b366004620007e4565b6200034e565b6040516001600160a01b0390911681526020015b60405180910390f35b620001186200015f3660046200081b565b62000379565b6004545b60405190815260200162000145565b60025462000131906001600160a01b031681565b620001316200019d36600462000851565b60036020908152600093845260408085208252928452828420905282529020546001600160a01b031681565b62000131620001da36600462000851565b620003cd565b60015462000131906001600160a01b031681565b6200016962000709565b600054620001319061010090046001600160a01b031681565b600054620002259060ff1681565b604051901515815260200162000145565b62000118620002473660046200089b565b6200073d565b620002256200025e3660046200081b565b60056020526000908152604090205460ff1681565b600654600754604080516001600160a01b0393841681529282166020840152600160a01b90910460ff1615159082015260600162000145565b62000118620002bd3660046200081b565b62000782565b6001546001600160a01b03163314620003235760405162461bcd60e51b815260206004820152601f60248201527f566f6c74466163746f72793a204e6f742070656e64696e67207061757365720060448201526064015b60405180910390fd5b600154600080546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b600481815481106200035f57600080fd5b6000918252602090912001546001600160a01b0316905081565b60005461010090046001600160a01b03163314620003ab5760405162461bcd60e51b81526004016200031a90620008b9565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000826001600160a01b0316846001600160a01b031603620004325760405162461bcd60e51b815260206004820181905260248201527f566f6c74466163746f72793a204944454e544943414c5f41444452455353455360448201526064016200031a565b600080846001600160a01b0316866001600160a01b031610620004575784866200045a565b85855b90925090506001600160a01b038216620004b75760405162461bcd60e51b815260206004820152601960248201527f566f6c74466163746f72793a205a45524f5f414444524553530000000000000060448201526064016200031a565b6001600160a01b0382811660009081526003602090815260408083208585168452825280832088151584529091529020541615620005385760405162461bcd60e51b815260206004820152601860248201527f566f6c74466163746f72793a20504149525f455849535453000000000000000060448201526064016200031a565b6040516bffffffffffffffffffffffff19606084811b8216602084015283901b16603482015284151560f81b604882015260009060490160408051601f19818403018152908290528051602090910120600780546001600160a01b038087166001600160a01b03198b1515600160a01b0281166001600160a81b03199094169390931717909255600680549288169290911691909117905591508190620005df90620007d6565b8190604051809103906000f590508015801562000600573d6000803e3d6000fd5b506001600160a01b0384811660008181526003602081815260408084208987168086529083528185208d15158087529084528286208054988a166001600160a01b0319998a16811790915582875294845282862087875284528286208187528452828620805489168617905560048054600181810183557f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b9091018054909a1687179099558587526005855295839020805460ff1916909817909755935481519687529186019290925290840152929650907fc4805696c66d7cf352fc1d6bb633ad5ee82f6cb577c453024b6e0eb8306c6fc99060600160405180910390a35050509392505050565b6000604051806020016200071d90620007d6565b6020820181038252601f19601f8201166040525080519060200120905090565b60005461010090046001600160a01b031633146200076f5760405162461bcd60e51b81526004016200031a90620008b9565b6000805460ff1916911515919091179055565b60005461010090046001600160a01b03163314620007b45760405162461bcd60e51b81526004016200031a90620008b9565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b61480180620008f183390190565b600060208284031215620007f757600080fd5b5035919050565b80356001600160a01b03811681146200081657600080fd5b919050565b6000602082840312156200082e57600080fd5b6200083982620007fe565b9392505050565b803580151581146200081657600080fd5b6000806000606084860312156200086757600080fd5b6200087284620007fe565b92506200088260208501620007fe565b9150620008926040850162000840565b90509250925092565b600060208284031215620008ae57600080fd5b620008398262000840565b60208082526017908201527f566f6c74466163746f72793a204e6f742070617573657200000000000000000060408201526060019056fe608060405260016000556000600455600060165560006017553480156200002557600080fd5b50600d80546001600160a01b031916339081179091556040805163eb13c4cf60e01b815290516000928392839263eb13c4cf916004808201926060929091908290030181865afa1580156200007e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000a491906200089a565b6003805482151560ff19909116179055600b80546001600160a01b038085166001600160a01b031992831617909255600a805492861692909116919091179055604051929550909350915083908390620000fe90620007c9565b6001600160a01b03928316815291166020820152604001604051809103906000f08015801562000132573d6000803e3d6000fd5b50600c80546001600160a01b0319166001600160a01b039290921691909117905580156200037857826001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000199573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620001c3919081019062000935565b826001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000202573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200022c919081019062000935565b6040516020016200023f929190620009ed565b6040516020818303038152906040526001908051906020019062000265929190620007d7565b50826001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015620002a5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620002cf919081019062000935565b826001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa1580156200030e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000338919081019062000935565b6040516020016200034b92919062000a48565b6040516020818303038152906040526002908051906020019062000371929190620007d7565b5062000591565b826001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015620003b7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620003e1919081019062000935565b826001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000420573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200044a919081019062000935565b6040516020016200045d92919062000a99565b6040516020818303038152906040526001908051906020019062000483929190620007d7565b50826001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015620004c3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620004ed919081019062000935565b826001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa1580156200052c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000556919081019062000935565b6040516020016200056992919062000af6565b604051602081830303815290604052600290805190602001906200058f929190620007d7565b505b826001600160a01b031663313ce5676040518163ffffffff1660e01b81526004016020604051808303816000875af1158015620005d2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005f8919062000b18565b6200060590600a62000c59565b600f81905550816001600160a01b031663313ce5676040518163ffffffff1660e01b81526004016020604051808303816000875af11580156200064c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000672919062000b18565b6200067f90600a62000c59565b60105560408051606081018252428152600060208201818152828401828152600e8054600180820183559190945293517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd60039094029384015590517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fe830155517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3ff9091015590517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f91620007549162000ca6565b6040805191829003822060208301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160408051601f1981840301815291905280516020909101206007555050466009555062000d49565b6104c7806200433a83390190565b828054620007e59062000c6a565b90600052602060002090601f01602090048101928262000809576000855562000854565b82601f106200082457805160ff191683800117855562000854565b8280016001018555821562000854579182015b828111156200085457825182559160200191906001019062000837565b506200086292915062000866565b5090565b5b8082111562000862576000815560010162000867565b80516001600160a01b03811681146200089557600080fd5b919050565b600080600060608486031215620008b057600080fd5b620008bb846200087d565b9250620008cb602085016200087d565b915060408401518015158114620008e157600080fd5b809150509250925092565b634e487b7160e01b600052604160045260246000fd5b60005b838110156200091f57818101518382015260200162000905565b838111156200092f576000848401525b50505050565b6000602082840312156200094857600080fd5b81516001600160401b03808211156200096057600080fd5b818401915084601f8301126200097557600080fd5b8151818111156200098a576200098a620008ec565b604051601f8201601f19908116603f01168101908382118183101715620009b557620009b5620008ec565b81604052828152876020848701011115620009cf57600080fd5b620009e283602083016020880162000902565b979650505050505050565b6e029ba30b13632ab189020a6a690169608d1b81526000835162000a1981600f85016020880162000902565b602f60f81b600f91840191820152835162000a3c81601084016020880162000902565b01601001949350505050565b6473414d4d2d60d81b81526000835162000a6a81600585016020880162000902565b602f60f81b600591840191820152835162000a8d81600684016020880162000902565b01600601949350505050565b7002b37b630ba34b632ab189020a6a690169607d1b81526000835162000ac781601185016020880162000902565b602f60f81b601191840191820152835162000aea81601284016020880162000902565b01601201949350505050565b6476414d4d2d60d81b81526000835162000a6a81600585016020880162000902565b60006020828403121562000b2b57600080fd5b815160ff8116811462000b3d57600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111562000b9b57816000190482111562000b7f5762000b7f62000b44565b8085161562000b8d57918102915b93841c939080029062000b5f565b509250929050565b60008262000bb45750600162000c53565b8162000bc35750600062000c53565b816001811462000bdc576002811462000be75762000c07565b600191505062000c53565b60ff84111562000bfb5762000bfb62000b44565b50506001821b62000c53565b5060208310610133831016604e8410600b841016171562000c2c575081810a62000c53565b62000c38838362000b5a565b806000190482111562000c4f5762000c4f62000b44565b0290505b92915050565b600062000b3d60ff84168362000ba3565b600181811c9082168062000c7f57607f821691505b60208210810362000ca057634e487b7160e01b600052602260045260246000fd5b50919050565b600080835481600182811c91508083168062000cc357607f831692505b6020808410820362000ce357634e487b7160e01b86526022600452602486fd5b81801562000cfa576001811462000d0c5762000d3b565b60ff1986168952848901965062000d3b565b60008a81526020902060005b8681101562000d335781548b82015290850190830162000d18565b505084890196505b509498975050505050505050565b6135e18062000d596000396000f3fe608060405234801561001057600080fd5b50600436106102a05760003560e01c80637ecebe0011610167578063bda39cad116100ce578063d294f09311610087578063d294f093146106c0578063d505accf146106c8578063dd62ed3e146106db578063ebeb31db14610706578063f140a35a1461070e578063fff6cae91461072157600080fd5b8063bda39cad14610676578063bf944dbc1461067f578063c245febc14610688578063c45a015514610691578063c5700a02146106a4578063d21220a7146106ad57600080fd5b80639d63848a116101205780639d63848a146105d75780639e8cc04b146105fd5780639f767c8814610610578063a1ac4d1314610630578063a9059cbb14610650578063bc25cf771461066357600080fd5b80637ecebe001461054157806389afcb44146105615780638a7b8cf21461058957806395d89b41146105b35780639a8a0592146105bb5780639af1d35a146105c457600080fd5b806330adf81f1161020b5780634d5a9f8a116101c45780634d5a9f8a146104bf578063517b3f82146104df5780635881c475146104f25780635a76f25e146105055780636a6278421461050e57806370a082311461052157600080fd5b806330adf81f14610408578063313ce5671461042f57806332c0defd146104495780633644e51514610452578063392f37e91461045b578063443cb4bc146104b657600080fd5b806318160ddd1161025d57806318160ddd1461037b5780631df8c71714610392578063205aabf1146103b557806322be3de1146103d557806323b872dd146103e2578063252c09d7146103f557600080fd5b8063022c0d9f146102a557806306fdde03146102ba5780630902f1ac146102d8578063095ea7b31461030d5780630dfe16811461033057806313345fe11461035b575b600080fd5b6102b86102b336600461309f565b610729565b005b6102c2610d68565b6040516102cf9190613165565b60405180910390f35b601154601254601354604080516001600160701b03948516815293909216602084015263ffffffff16908201526060016102cf565b61032061031b366004613198565b610df6565b60405190151581526020016102cf565b600a54610343906001600160a01b031681565b6040516001600160a01b0390911681526020016102cf565b61036e6103693660046131c4565b610ec1565b6040516102cf91906131ff565b61038460045481565b6040519081526020016102cf565b61039a6110c9565b604080519384526020840192909252908201526060016102cf565b6103846103c3366004613243565b60196020526000908152604090205481565b6003546103209060ff1681565b6103206103f0366004613260565b611131565b61039a6104033660046132a1565b61123f565b6103847f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b610437601281565b60405160ff90911681526020016102cf565b61038460165481565b61038460075481565b600f54601054601154601254600354600a54600b5460408051978852602088019690965294860193909352606085019190915260ff16151560808401526001600160a01b0390811660a08401521660c082015260e0016102cf565b61038460115481565b6103846104cd366004613243565b601a6020526000908152604090205481565b6103846104ed366004613198565b611272565b61036e6105003660046132ba565b61135a565b61038460125481565b61038461051c366004613243565b611369565b61038461052f366004613243565b60066020526000908152604090205481565b61038461054f366004613243565b60086020526000908152604090205481565b61057461056f366004613243565b6115d1565b604080519283526020830191909152016102cf565b61059161190b565b60408051825181526020808401519082015291810151908201526060016102cf565b6102c261198b565b61038460095481565b600c54610343906001600160a01b031681565b600a54600b54604080516001600160a01b039384168152929091166020830152016102cf565b61038461060b3660046132ba565b611998565b61038461061e366004613243565b60186020526000908152604090205481565b61038461063e366004613243565b601b6020526000908152604090205481565b61032061065e366004613198565b611a05565b6102b8610671366004613243565b611a1b565b61038460175481565b61038460145481565b61038460155481565b600d54610343906001600160a01b031681565b61038460135481565b600b54610343906001600160a01b031681565b610574611b71565b6102b86106d63660046132ef565b611c7b565b6103846106e9366004613366565b600560209081526000928352604080842090915290825290205481565b600e54610384565b61038461071c36600461339f565b611edf565b6102b8611f13565b6000546001146107545760405162461bcd60e51b815260040161074b906133c4565b60405180910390fd5b6002600055600d54604080516358c3de9360e11b815290516001600160a01b039092169163b187bd26916004808201926020929091908290030181865afa1580156107a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c791906133ec565b156108065760405162461bcd60e51b815260206004820152600f60248201526e566f6c74506169723a20504155534560881b604482015260640161074b565b60008511806108155750600084115b61086d5760405162461bcd60e51b8152602060048201526024808201527f566f6c74506169723a20494e53554646494349454e545f4f55545055545f414d60448201526313d5539560e21b606482015260840161074b565b601154601254818710801561088157508086105b6108cd5760405162461bcd60e51b815260206004820181905260248201527f566f6c74506169723a20494e53554646494349454e545f4c4951554944495459604482015260640161074b565b600a54600b5460009182916001600160a01b0391821691908116908916821480159061090b5750806001600160a01b0316896001600160a01b031614155b61094e5760405162461bcd60e51b8152602060048201526014602482015273566f6c74506169723a20494e56414c49445f544f60601b604482015260640161074b565b8a15610968576109686001600160a01b0383168a8d612026565b8915610982576109826001600160a01b0382168a8c612026565b86156109ef57604051639a7bff7960e01b81526001600160a01b038a1690639a7bff79906109bc9033908f908f908e908e9060040161340e565b600060405180830381600087803b1580156109d657600080fd5b505af11580156109ea573d6000803e3d6000fd5b505050505b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa158015610a33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a57919061345a565b6040516370a0823160e01b81523060048201529094506001600160a01b038216906370a0823190602401602060405180830381865afa158015610a9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac2919061345a565b9250505060008985610ad49190613489565b8311610ae1576000610af5565b610aeb8a86613489565b610af59084613489565b90506000610b038a86613489565b8311610b10576000610b24565b610b1a8a86613489565b610b249084613489565b90506000821180610b355750600081115b610b8d5760405162461bcd60e51b815260206004820152602360248201527f566f6c74506169723a20494e53554646494349454e545f494e5055545f414d4f60448201526215539560ea1b606482015260840161074b565b600a54600b546001600160a01b0391821691168315610bb757610bb7610bb28561207d565b6120b6565b8215610bce57610bce610bc98461207d565b612259565b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa158015610c12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c36919061345a565b6040516370a0823160e01b81523060048201529096506001600160a01b038216906370a0823190602401602060405180830381865afa158015610c7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca1919061345a565b9450610cad88886123f3565b610cb787876123f3565b1015610cf35760405162461bcd60e51b815260206004820152600b60248201526a566f6c74506169723a204b60a81b604482015260640161074b565b5050610d01848488886124ec565b60408051838152602081018390529081018c9052606081018b90526001600160a01b038a169033907fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229060800160405180910390a350506001600055505050505050505050565b60018054610d75906134a0565b80601f0160208091040260200160405190810160405280929190818152602001828054610da1906134a0565b8015610dee5780601f10610dc357610100808354040283529160200191610dee565b820191906000526020600020905b815481529060010190602001808311610dd157829003601f168201915b505050505081565b60006001600160a01b038316610e5c5760405162461bcd60e51b815260206004820152602560248201527f566f6c74506169723a20417070726f766520746f20746865207a65726f206164604482015264647265737360d81b606482015260840161074b565b3360008181526005602090815260408083206001600160a01b03881680855290835292819020869055518581529192917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a35060015b92915050565b606060008367ffffffffffffffff811115610ede57610ede6134d4565b604051908082528060200260200182016040528015610f07578160200160208202803683370190505b50600e54909150600090610f1d90600190613489565b90506000610f2b85876134ea565b610f359083613489565b90506000805b838310156110b957610f4d8784613509565b91506000600e8481548110610f6457610f64613521565b906000526020600020906003020160000154600e8481548110610f8957610f89613521565b906000526020600020906003020160000154610fa59190613489565b9050600081600e8681548110610fbd57610fbd613521565b906000526020600020906003020160010154600e8681548110610fe257610fe2613521565b906000526020600020906003020160010154610ffe9190613489565b6110089190613537565b9050600082600e878154811061102057611020613521565b906000526020600020906003020160020154600e878154811061104557611045613521565b9060005260206000209060030201600201546110619190613489565b61106b9190613537565b90506110798c8e8484612653565b88858151811061108b5761108b613521565b60209081029190910101526110a1846001613509565b935050505086836110b29190613509565b9250610f3b565b509293505050505b949350505050565b60145460155442600080806110e76011546012546013549192909190565b63ffffffff1692506001600160701b031692506001600160701b031692508381146111295760006111188286613489565b848102979097019683029590950194505b505050909192565b6001600160a01b03831660008181526005602090815260408083203380855292528220549192909190821480159061116b57506000198114155b1561122657838110156111c05760405162461bcd60e51b815260206004820181905260248201527f566f6c74506169723a20496e73756666696369656e7420616c6c6f77616e6365604482015260640161074b565b6001600160a01b03868116600081815260056020908152604080832094871680845294825291829020888603908190559151828152919392917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505b6112318686866127f4565b6001925050505b9392505050565b600e818154811061124f57600080fd5b600091825260209091206003909102018054600182015460029092015490925083565b60008061127d61190b565b905060008061128a6110c9565b508451919350915042036112f257600e80546112a890600290613489565b815481106112b8576112b8613521565b9060005260206000209060030201604051806060016040529081600082015481526020016001820154815260200160028201548152505092505b82516000906113019042613489565b90506000818560200151856113169190613489565b6113209190613537565b90506000828660400151856113359190613489565b61133f9190613537565b905061134d888a8484612653565b9998505050505050505050565b60606110c18484846001610ec1565b6000805460011461138c5760405162461bcd60e51b815260040161074b906133c4565b60026000908155601154601254600a546040516370a0823160e01b8152306004820152929391926001600160a01b03909116906370a0823190602401602060405180830381865afa1580156113e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611409919061345a565b600b546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015611457573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147b919061345a565b905060006114898584613489565b905060006114978584613489565b60045490915060008190036114d9576103e86114bb6114b684866134ea565b612977565b6114c59190613489565b97506114d460006103e86129e6565b61150e565b61150b876114e783866134ea565b6114f19190613537565b876114fc84866134ea565b6115069190613537565b612a79565b97505b6000881161156e5760405162461bcd60e51b815260206004820152602760248201527f566f6c74506169723a20494e53554646494349454e545f4c495155494449545960448201526617d3525395115160ca1b606482015260840161074b565b61157889896129e6565b611584858589896124ec565b604080518481526020810184905233917f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f910160405180910390a250506001600055509395945050505050565b6000806000546001146115f65760405162461bcd60e51b815260040161074b906133c4565b60026000908155601154601254600a54600b546040516370a0823160e01b8152306004820152939492936001600160a01b039283169392909116919083906370a0823190602401602060405180830381865afa15801561165a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061167e919061345a565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a0823190602401602060405180830381865afa1580156116c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ec919061345a565b30600090815260066020526040902054600454919250908061170e85846134ea565b6117189190613537565b99508061172584846134ea565b61172f9190613537565b985060008a1180156117415750600089115b61179d5760405162461bcd60e51b815260206004820152602760248201527f566f6c74506169723a20494e53554646494349454e545f4c495155494449545960448201526617d0955493915160ca1b606482015260840161074b565b6117a73083612a8f565b6117bb6001600160a01b0387168c8c612026565b6117cf6001600160a01b0386168c8b612026565b6040516370a0823160e01b81523060048201526001600160a01b038716906370a0823190602401602060405180830381865afa158015611813573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611837919061345a565b6040516370a0823160e01b81523060048201529094506001600160a01b038616906370a0823190602401602060405180830381865afa15801561187e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a2919061345a565b92506118b084848a8a6124ec565b604080518b8152602081018b90526001600160a01b038d169133917fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496910160405180910390a350505050505050506001600081905550915091565b61192f60405180606001604052806000815260200160008152602001600081525090565b600e805461193f90600190613489565b8154811061194f5761194f613521565b90600052602060002090600302016040518060600160405290816000820154815260200160018201548152602001600282015481525050905090565b60028054610d75906134a0565b6000806119a88585856001610ec1565b90506000805b82518110156119f0578281815181106119c9576119c9613521565b6020026020010151826119dc9190613509565b9150806119e881613559565b9150506119ae565b506119fb8482613537565b9695505050505050565b6000611a123384846127f4565b50600192915050565b600054600114611a3d5760405162461bcd60e51b815260040161074b906133c4565b6002600055600a54600b546011546040516370a0823160e01b81523060048201526001600160a01b039384169390921691611adb91859185906370a0823190602401602060405180830381865afa158015611a9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac0919061345a565b611aca9190613489565b6001600160a01b0385169190612026565b6012546040516370a0823160e01b8152306004820152611b679185916001600160a01b038516906370a0823190602401602060405180830381865afa158015611b28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b4c919061345a565b611b569190613489565b6001600160a01b0384169190612026565b5050600160005550565b600080611b7d33612b1a565b5050336000908152601a6020908152604080832054601b9092529091205481151580611ba95750600081115b15611c7757336000818152601a60209081526040808320839055601b90915280822091909155600c54905163299e7ae760e11b8152600481019290925260248201849052604482018390526001600160a01b03169063533cf5ce90606401600060405180830381600087803b158015611c2157600080fd5b505af1158015611c35573d6000803e3d6000fd5b505060408051858152602081018590523393508392507f865ca08d59f5cb456e85cd2f7ef63664ea4f73327414e9d8152c4158b0e94645910160405180910390a35b9091565b42841015611cbf5760405162461bcd60e51b8152602060048201526011602482015270159bdb1d14185a5c8e8811561412549151607a1b604482015260640161074b565b6007546001600160a01b038816600090815260086020526040812080549192917f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918b918b918b919087611d1283613559565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e00160405160208183030381529060405280519060200120604051602001611d8b92919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa158015611df6573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811615801590611e2c5750886001600160a01b0316816001600160a01b0316145b611e785760405162461bcd60e51b815260206004820152601b60248201527f566f6c74506169723a20494e56414c49445f5349474e41545552450000000000604482015260640161074b565b6001600160a01b038981166000818152600560209081526040808320948d16808452948252918290208b905590518a81527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050505050505050565b60115460125460009190611ef28561207d565b611efc9086613489565b9450611f0a85858484612653565b95945050505050565b600054600114611f355760405162461bcd60e51b815260040161074b906133c4565b6002600055600a546040516370a0823160e01b815230600482015261201f916001600160a01b0316906370a0823190602401602060405180830381865afa158015611f84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fa8919061345a565b600b546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611ff0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612014919061345a565b6011546012546124ec565b6001600055565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052612078908490612c86565b505050565b60035460009060ff16156120a3576127106120998360046134ea565b610ebb9190613537565b6103e86120998360036134ea565b919050565b600080600d60009054906101000a90046001600160a01b03166001600160a01b03166361d027b36040518163ffffffff1660e01b8152600401602060405180830381865afa15801561210c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121309190613572565b90506001600160a01b038116156121a25761214c600284613537565b600a54909250612166906001600160a01b03168284612026565b604080518381526000602082015233917ffd26d3e0e8324438b2b556a62f87e2e5864535089e691e5119466433de1ebc61910160405180910390a25b60006121ae8385613489565b600c54600a549192506121ce916001600160a01b03908116911683612026565b6004546000906121ec6d04ee2d6d415b85acef8100000000846134ea565b6121f69190613537565b905080156122165780601660008282546122109190613509565b90915550505b604080518381526000602082015233917f112c256902bf554b6ed882d2936687aaeb4225e8cd5b51303c90ca6cf43a860291015b60405180910390a25050505050565b600080600d60009054906101000a90046001600160a01b03166001600160a01b03166361d027b36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156122af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122d39190613572565b90506001600160a01b03811615612346576122ef600284613537565b600b54909250612309906001600160a01b03168284612026565b60408051600081526020810184905233917ffd26d3e0e8324438b2b556a62f87e2e5864535089e691e5119466433de1ebc61910160405180910390a25b60006123528385613489565b600c54600b54919250612372916001600160a01b03908116911683612026565b6004546000906123906d04ee2d6d415b85acef8100000000846134ea565b61239a9190613537565b905080156123ba5780601760008282546123b49190613509565b90915550505b60408051600081526020810184905233917f112c256902bf554b6ed882d2936687aaeb4225e8cd5b51303c90ca6cf43a8602910161224a565b60035460009060ff16156124db57600f5460009061241985670de0b6b3a76400006134ea565b6124239190613537565b9050600060105484670de0b6b3a764000061243e91906134ea565b6124489190613537565b90506000670de0b6b3a764000061245f83856134ea565b6124699190613537565b90506000670de0b6b3a764000061248084806134ea565b61248a9190613537565b670de0b6b3a764000061249d86806134ea565b6124a79190613537565b6124b19190613509565b9050670de0b6b3a76400006124c682846134ea565b6124d09190613537565b945050505050610ebb565b6124e582846134ea565b9050610ebb565b60135442906000906124fe9083613489565b905060008111801561250f57508315155b801561251a57508215155b156125345760148054858302019055601580548483020190555b600061253e61190b565b805190915061254d9084613489565b9150610708821115612602576040805160608101825284815260145460208201908152601554928201928352600e805460018101825560009190915291517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd600390930292830155517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fe82015590517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3ff909101555b60118790556012869055601383905560408051888152602081018890527fcf2aa50876cdfbb541206f89af0ee78d44a2abf8d328e37fa4917f982149848a910160405180910390a150505050505050565b60035460009060ff16156127a457600061266d84846123f3565b600f5490915061268585670de0b6b3a76400006134ea565b61268f9190613537565b6010549094506126a784670de0b6b3a76400006134ea565b6126b19190613537565b600a5490935060009081906001600160a01b038881169116146126d55784866126d8565b85855b600a5491935091506001600160a01b038881169116146127165760105461270789670de0b6b3a76400006134ea565b6127119190613537565b612735565b600f5461272b89670de0b6b3a76400006134ea565b6127359190613537565b9750600061274d612746848b613509565b8584612d58565b6127579083613489565b600a54909150670de0b6b3a7640000906001600160a01b038a811691161461278157600f54612785565b6010545b61278f90836134ea565b6127999190613537565b9450505050506110c1565b600a5460009081906001600160a01b038781169116146127c55783856127c8565b84845b90925090506127d78783613509565b6127e182896134ea565b6127eb9190613537565b925050506110c1565b6001600160a01b0382166128595760405162461bcd60e51b815260206004820152602660248201527f566f6c74506169723a205472616e7366657220746f20746865207a65726f206160448201526564647265737360d01b606482015260840161074b565b61286283612b1a565b61286b82612b1a565b6001600160a01b038316600090815260066020526040902054818110156128e65760405162461bcd60e51b815260206004820152602960248201527f566f6c74506169723a205472616e7366657220616d6f756e7420657863656564604482015268732062616c616e636560b81b606482015260840161074b565b6001600160a01b0380851660009081526006602052604080822085850390559185168152908120805484929061291d908490613509565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161296991815260200190565b60405180910390a350505050565b600060038211156129d85750806000612991600283613537565b61299c906001613509565b90505b818110156129d2579050806002816129b78186613537565b6129c19190613509565b6129cb9190613537565b905061299f565b50919050565b81156120b157506001919050565b6129ef82612b1a565b8060046000828254612a019190613509565b90915550506001600160a01b03821660009081526006602052604081208054839290612a2e908490613509565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b6000818310612a885781611238565b5090919050565b612a9882612b1a565b8060046000828254612aaa9190613489565b90915550506001600160a01b03821660009081526006602052604081208054839290612ad7908490613489565b90915550506040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001612a6d565b6001600160a01b0381166000908152600660205260409020548015612c54576001600160a01b0382166000908152601860209081526040808320805460198085529285208054601654601754948190559490955282905593612b7c8584613489565b90506000612b8a8584613489565b90508115612beb5760006d04ee2d6d415b85acef8100000000612bad848a6134ea565b612bb79190613537565b6001600160a01b038a166000908152601a6020526040812080549293508392909190612be4908490613509565b9091555050505b8015612c4a5760006d04ee2d6d415b85acef8100000000612c0c838a6134ea565b612c169190613537565b6001600160a01b038a166000908152601b6020526040812080549293508392909190612c43908490613509565b9091555050505b5050505050505050565b6016546001600160a01b0383166000908152601860209081526040808320939093556017546019909152919020555050565b6000612cdb826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612e3a9092919063ffffffff16565b8051909150156120785780806020019051810190612cf991906133ec565b6120785760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161074b565b6000805b60ff811015612e3157826000612d728783612f00565b905085811015612dc2576000612d888887612f9d565b612d928389613489565b612da490670de0b6b3a76400006134ea565b612dae9190613537565b9050612dba8187613509565b955050612e04565b6000612dce8887612f9d565b612dd88884613489565b612dea90670de0b6b3a76400006134ea565b612df49190613537565b9050612e008187613489565b9550505b612e1085836001613005565b15612e1c575050612e31565b50508080612e2990613559565b915050612d5c565b50909392505050565b60606001600160a01b0384163b612e935760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161074b565b600080856001600160a01b031685604051612eae919061358f565b6000604051808303816000865af19150503d8060008114612eeb576040519150601f19603f3d011682016040523d82523d6000602084013e612ef0565b606091505b50915091506119fb82828661304e565b6000670de0b6b3a764000082818581612f1982806134ea565b612f239190613537565b612f2d91906134ea565b612f379190613537565b612f4191906134ea565b612f4b9190613537565b670de0b6b3a7640000808481612f6182806134ea565b612f6b9190613537565b612f7591906134ea565b612f7f9190613537565b612f8990866134ea565b612f939190613537565b6112389190613509565b6000670de0b6b3a76400008381612fb482806134ea565b612fbe9190613537565b612fc891906134ea565b612fd29190613537565b670de0b6b3a764000080612fe685806134ea565b612ff09190613537565b612ffb8660036134ea565b612f8991906134ea565b60008284111561302c578161301a8486613489565b1161302757506001611238565b613044565b816130378585613489565b1161304457506001611238565b5060009392505050565b6060831561305d575081611238565b82511561306d5782518084602001fd5b8160405162461bcd60e51b815260040161074b9190613165565b6001600160a01b038116811461309c57600080fd5b50565b6000806000806000608086880312156130b757600080fd5b853594506020860135935060408601356130d081613087565b9250606086013567ffffffffffffffff808211156130ed57600080fd5b818801915088601f83011261310157600080fd5b81358181111561311057600080fd5b89602082850101111561312257600080fd5b9699959850939650602001949392505050565b60005b83811015613150578181015183820152602001613138565b8381111561315f576000848401525b50505050565b6020815260008251806020840152613184816040850160208701613135565b601f01601f19169190910160400192915050565b600080604083850312156131ab57600080fd5b82356131b681613087565b946020939093013593505050565b600080600080608085870312156131da57600080fd5b84356131e581613087565b966020860135965060408601359560600135945092505050565b6020808252825182820181905260009190848201906040850190845b818110156132375783518352928401929184019160010161321b565b50909695505050505050565b60006020828403121561325557600080fd5b813561123881613087565b60008060006060848603121561327557600080fd5b833561328081613087565b9250602084013561329081613087565b929592945050506040919091013590565b6000602082840312156132b357600080fd5b5035919050565b6000806000606084860312156132cf57600080fd5b83356132da81613087565b95602085013595506040909401359392505050565b600080600080600080600060e0888a03121561330a57600080fd5b873561331581613087565b9650602088013561332581613087565b95506040880135945060608801359350608088013560ff8116811461334957600080fd5b9699959850939692959460a0840135945060c09093013592915050565b6000806040838503121561337957600080fd5b823561338481613087565b9150602083013561339481613087565b809150509250929050565b600080604083850312156133b257600080fd5b82359150602083013561339481613087565b6020808252600e908201526d1499595b9d1c985b9d0818d85b1b60921b604082015260600190565b6000602082840312156133fe57600080fd5b8151801515811461123857600080fd5b60018060a01b038616815284602082015283604082015260806060820152816080820152818360a0830137600081830160a090810191909152601f909201601f19160101949350505050565b60006020828403121561346c57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008282101561349b5761349b613473565b500390565b600181811c908216806134b457607f821691505b6020821081036129d257634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600081600019048311821515161561350457613504613473565b500290565b6000821982111561351c5761351c613473565b500190565b634e487b7160e01b600052603260045260246000fd5b60008261355457634e487b7160e01b600052601260045260246000fd5b500490565b60006001820161356b5761356b613473565b5060010190565b60006020828403121561358457600080fd5b815161123881613087565b600082516135a1818460208701613135565b919091019291505056fea26469706673582212209a05e07479d40c117c47ffaa2ff89f9f08ea23e8555c37264ef8604496c57ef864736f6c634300080d0033608060405234801561001057600080fd5b506040516104c73803806104c783398101604081905261002f91610087565b600080546001600160a01b03199081163317909155600180546001600160a01b03948516908316179055600280549290931691161790556100ba565b80516001600160a01b038116811461008257600080fd5b919050565b6000806040838503121561009a57600080fd5b6100a38361006b565b91506100b16020840161006b565b90509250929050565b6103fe806100c96000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063533cf5ce14610030575b600080fd5b61004361003e3660046102e6565b610045565b005b6000546001600160a01b0316331461008f5760405162461bcd60e51b81526020600482015260086024820152672737ba103830b4b960c11b60448201526064015b60405180910390fd5b81156100ac576001546100ac906001600160a01b031684846100ce565b80156100c9576002546100c9906001600160a01b031684836100ce565b505050565b604080516001600160a01b03848116602483015260448083018590528351808403909101815260649092018352602080830180516001600160e01b031663a9059cbb60e01b17905283518085019094528084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564908401526100c99286929160009161015e9185169084906101db565b8051909150156100c9578080602001905181019061017c9190610327565b6100c95760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610086565b60606001600160a01b0384163b6102345760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610086565b600080856001600160a01b03168560405161024f9190610379565b6000604051808303816000865af19150503d806000811461028c576040519150601f19603f3d011682016040523d82523d6000602084013e610291565b606091505b50915091506102a18282866102ad565b925050505b9392505050565b606083156102bc5750816102a6565b8251156102cc5782518084602001fd5b8160405162461bcd60e51b81526004016100869190610395565b6000806000606084860312156102fb57600080fd5b83356001600160a01b038116811461031257600080fd5b95602085013595506040909401359392505050565b60006020828403121561033957600080fd5b815180151581146102a657600080fd5b60005b8381101561036457818101518382015260200161034c565b83811115610373576000848401525b50505050565b6000825161038b818460208701610349565b9190910192915050565b60208152600082518060208401526103b4816040850160208701610349565b601f01601f1916919091016040019291505056fea2646970667358221220d743dbc945051555bf0c2674ea19ab74dd26c673460e07c65de147639c7b3ff964736f6c634300080d0033a264697066735822122028a75973c3b9937b72701202f500729577bf2e6905afb40fd60f8066d1de72df64736f6c634300080d0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "stateVariables": {
      "isPair": {
        "details": "Simplified check if its a pair, given that `stable` flag might not be available in peripherals"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 478,
        "contract": "contracts/base/core/VoltFactory.sol:VoltFactory",
        "label": "isPaused",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 480,
        "contract": "contracts/base/core/VoltFactory.sol:VoltFactory",
        "label": "pauser",
        "offset": 1,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 482,
        "contract": "contracts/base/core/VoltFactory.sol:VoltFactory",
        "label": "pendingPauser",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 485,
        "contract": "contracts/base/core/VoltFactory.sol:VoltFactory",
        "label": "treasury",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 494,
        "contract": "contracts/base/core/VoltFactory.sol:VoltFactory",
        "label": "getPair",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_bool,t_address)))"
      },
      {
        "astId": 497,
        "contract": "contracts/base/core/VoltFactory.sol:VoltFactory",
        "label": "allPairs",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 503,
        "contract": "contracts/base/core/VoltFactory.sol:VoltFactory",
        "label": "isPair",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 505,
        "contract": "contracts/base/core/VoltFactory.sol:VoltFactory",
        "label": "_temp0",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 507,
        "contract": "contracts/base/core/VoltFactory.sol:VoltFactory",
        "label": "_temp1",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 509,
        "contract": "contracts/base/core/VoltFactory.sol:VoltFactory",
        "label": "_temp",
        "offset": 20,
        "slot": "7",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_mapping(t_bool,t_address)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => mapping(bool => address)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_bool,t_address))"
      },
      "t_mapping(t_address,t_mapping(t_bool,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bool => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bool,t_address)"
      },
      "t_mapping(t_bool,t_address)": {
        "encoding": "mapping",
        "key": "t_bool",
        "label": "mapping(bool => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      }
    }
  }
}