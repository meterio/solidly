{
  "address": "0x0872B14C6fc1dF9b9070ECbEd22547627d012A58",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wmtr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "stable",
              "type": "bool"
            }
          ],
          "internalType": "struct VoltRouter01.Route[]",
          "name": "routes",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "UNSAFE_swapExactTokensForTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "stable",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "amountADesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBDesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "stable",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenDesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountMTRMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidityMTR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountMTR",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        }
      ],
      "name": "getAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "stable",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "stable",
              "type": "bool"
            }
          ],
          "internalType": "struct VoltRouter01.Route[]",
          "name": "routes",
          "type": "tuple[]"
        }
      ],
      "name": "getAmountsOut",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "stable",
          "type": "bool"
        }
      ],
      "name": "getExactAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "stable",
          "type": "bool"
        }
      ],
      "name": "getReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "isPair",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "stable",
          "type": "bool"
        }
      ],
      "name": "pairFor",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "stable",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "amountADesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBDesired",
          "type": "uint256"
        }
      ],
      "name": "quoteAddLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        }
      ],
      "name": "quoteLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "stable",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "name": "quoteRemoveLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "stable",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "stable",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountMTRMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityMTR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountMTR",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "stable",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountFTMMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityMTRSupportingFeeOnTransferTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountFTM",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "stable",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountMTRMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "approveMax",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "removeLiquidityMTRWithPermit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountMTR",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "stable",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountFTMMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "approveMax",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "removeLiquidityMTRWithPermitSupportingFeeOnTransferTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountFTM",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "stable",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "approveMax",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "removeLiquidityWithPermit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "sortTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "stable",
              "type": "bool"
            }
          ],
          "internalType": "struct VoltRouter01.Route[]",
          "name": "routes",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactMTRForTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "stable",
              "type": "bool"
            }
          ],
          "internalType": "struct VoltRouter01.Route[]",
          "name": "routes",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactMTRForTokensSupportingFeeOnTransferTokens",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "stable",
              "type": "bool"
            }
          ],
          "internalType": "struct VoltRouter01.Route[]",
          "name": "routes",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForMTR",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "stable",
              "type": "bool"
            }
          ],
          "internalType": "struct VoltRouter01.Route[]",
          "name": "routes",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForMTRSupportingFeeOnTransferTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "stable",
              "type": "bool"
            }
          ],
          "internalType": "struct VoltRouter01.Route[]",
          "name": "routes",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenFrom",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenTo",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "stable",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForTokensSimple",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "stable",
              "type": "bool"
            }
          ],
          "internalType": "struct VoltRouter01.Route[]",
          "name": "routes",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForTokensSupportingFeeOnTransferTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wmtr",
      "outputs": [
        {
          "internalType": "contract IWMTR",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x26c9192421baa82e734009718ed48ed563a3ea5e6291e8c7ae5bf01449a7b4a0",
  "receipt": {
    "to": null,
    "from": "0x1381C573b97Bf393A81fA42760DD21E109d8092B",
    "contractAddress": "0x0872B14C6fc1dF9b9070ECbEd22547627d012A58",
    "transactionIndex": 0,
    "gasUsed": "4118883",
    "logsBloom": "0x
    "blockHash": "0xf101455ba62da8be6d5546a0a42bd7d1566b105fb416e009cb2ec83f2fee0195",
    "transactionHash": "0x26c9192421baa82e734009718ed48ed563a3ea5e6291e8c7ae5bf01449a7b4a0",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "4118883",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x99926d145D79567d2F07007e2095A3c1570e6D5e",
    "0xfac315d105e5a7fe2174b3eb1f95c257a9a5e271"
  ],
  "numDeployments": 1,
  "solcInputHash": "3b3b283a31496f0704cc082007acea88",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wmtr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"internalType\":\"struct VoltRouter01.Route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"UNSAFE_swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMTRMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidityMTR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMTR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"internalType\":\"struct VoltRouter01.Route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"name\":\"getExactAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"name\":\"pairFor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"}],\"name\":\"quoteAddLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"name\":\"quoteLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"quoteRemoveLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMTRMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityMTR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMTR\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountFTMMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityMTRSupportingFeeOnTransferTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountFTM\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMTRMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityMTRWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMTR\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountFTMMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityMTRWithPermitSupportingFeeOnTransferTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountFTM\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"sortTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"internalType\":\"struct VoltRouter01.Route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactMTRForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"internalType\":\"struct VoltRouter01.Route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactMTRForTokensSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"internalType\":\"struct VoltRouter01.Route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForMTR\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"internalType\":\"struct VoltRouter01.Route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForMTRSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"internalType\":\"struct VoltRouter01.Route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenTo\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokensSimple\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"internalType\":\"struct VoltRouter01.Route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokensSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wmtr\",\"outputs\":[{\"internalType\":\"contract IWMTR\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getAmountOut(uint256,address,address)\":{\"details\":\"Performs chained getAmountOut calculations on any number of pairs.\"},\"getAmountsOut(uint256,(address,address,bool)[])\":{\"details\":\"Performs chained getAmountOut calculations on any number of pairs.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/base/periphery/VoltRouter01.sol\":\"VoltRouter01\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/base/periphery/VoltRouter01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../../lib/Math.sol\\\";\\nimport \\\"../../lib/SafeERC20.sol\\\";\\nimport \\\"../../interface/IERC20.sol\\\";\\nimport \\\"../../interface/IWMTR.sol\\\";\\nimport \\\"../../interface/IPair.sol\\\";\\nimport \\\"../../interface/IFactory.sol\\\";\\n\\ncontract VoltRouter01 {\\n    using SafeERC20 for IERC20;\\n\\n    struct Route {\\n        address from;\\n        address to;\\n        bool stable;\\n    }\\n\\n    address public immutable factory;\\n    IWMTR public immutable wmtr;\\n    uint internal constant MINIMUM_LIQUIDITY = 10**3;\\n    bytes32 immutable pairCodeHash;\\n\\n    modifier ensure(uint deadline) {\\n        require(deadline >= block.timestamp, \\\"VoltRouter: EXPIRED\\\");\\n        _;\\n    }\\n\\n    constructor(address _factory, address _wmtr) {\\n        factory = _factory;\\n        pairCodeHash = IFactory(_factory).pairCodeHash();\\n        wmtr = IWMTR(_wmtr);\\n    }\\n\\n    receive() external payable {\\n        // only accept ETH via fallback from the WETH contract\\n        require(msg.sender == address(wmtr), \\\"VoltRouter: NOT_WMTR\\\");\\n    }\\n\\n    function sortTokens(address tokenA, address tokenB)\\n        external\\n        pure\\n        returns (address token0, address token1)\\n    {\\n        return _sortTokens(tokenA, tokenB);\\n    }\\n\\n    function _sortTokens(address tokenA, address tokenB)\\n        internal\\n        pure\\n        returns (address token0, address token1)\\n    {\\n        require(tokenA != tokenB, \\\"VoltRouter: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB\\n            ? (tokenA, tokenB)\\n            : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"VoltRouter: ZERO_ADDRESS\\\");\\n    }\\n\\n    function pairFor(\\n        address tokenA,\\n        address tokenB,\\n        bool stable\\n    ) external view returns (address pair) {\\n        return _pairFor(tokenA, tokenB, stable);\\n    }\\n\\n    /// @dev Calculates the CREATE2 address for a pair without making any external calls.\\n    function _pairFor(\\n        address tokenA,\\n        address tokenB,\\n        bool stable\\n    ) internal view returns (address pair) {\\n        (address token0, address token1) = _sortTokens(tokenA, tokenB);\\n        pair = address(\\n            uint160(\\n                uint(\\n                    keccak256(\\n                        abi.encodePacked(\\n                            hex\\\"ff\\\",\\n                            factory,\\n                            keccak256(abi.encodePacked(token0, token1, stable)),\\n                            pairCodeHash // init code hash\\n                        )\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    function quoteLiquidity(\\n        uint amountA,\\n        uint reserveA,\\n        uint reserveB\\n    ) external pure returns (uint amountB) {\\n        return _quoteLiquidity(amountA, reserveA, reserveB);\\n    }\\n\\n    /// @dev Given some amount of an asset and pair reserves, returns an equivalent amount of the other asset.\\n    function _quoteLiquidity(\\n        uint amountA,\\n        uint reserveA,\\n        uint reserveB\\n    ) internal pure returns (uint amountB) {\\n        require(amountA > 0, \\\"VoltRouter: INSUFFICIENT_AMOUNT\\\");\\n        require(\\n            reserveA > 0 && reserveB > 0,\\n            \\\"VoltRouter: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        amountB = (amountA * reserveB) / reserveA;\\n    }\\n\\n    function getReserves(\\n        address tokenA,\\n        address tokenB,\\n        bool stable\\n    ) external view returns (uint reserveA, uint reserveB) {\\n        return _getReserves(tokenA, tokenB, stable);\\n    }\\n\\n    /// @dev Fetches and sorts the reserves for a pair.\\n    function _getReserves(\\n        address tokenA,\\n        address tokenB,\\n        bool stable\\n    ) internal view returns (uint reserveA, uint reserveB) {\\n        (address token0, ) = _sortTokens(tokenA, tokenB);\\n        (uint reserve0, uint reserve1, ) = IPair(\\n            _pairFor(tokenA, tokenB, stable)\\n        ).getReserves();\\n        (reserveA, reserveB) = tokenA == token0\\n            ? (reserve0, reserve1)\\n            : (reserve1, reserve0);\\n    }\\n\\n    /// @dev Performs chained getAmountOut calculations on any number of pairs.\\n    function getAmountOut(\\n        uint amountIn,\\n        address tokenIn,\\n        address tokenOut\\n    ) external view returns (uint amount, bool stable) {\\n        address pair = _pairFor(tokenIn, tokenOut, true);\\n        uint amountStable;\\n        uint amountVolatile;\\n        if (IFactory(factory).isPair(pair)) {\\n            amountStable = IPair(pair).getAmountOut(amountIn, tokenIn);\\n        }\\n        pair = _pairFor(tokenIn, tokenOut, false);\\n        if (IFactory(factory).isPair(pair)) {\\n            amountVolatile = IPair(pair).getAmountOut(amountIn, tokenIn);\\n        }\\n        return\\n            amountStable > amountVolatile\\n                ? (amountStable, true)\\n                : (amountVolatile, false);\\n    }\\n\\n    function getExactAmountOut(\\n        uint amountIn,\\n        address tokenIn,\\n        address tokenOut,\\n        bool stable\\n    ) external view returns (uint) {\\n        address pair = _pairFor(tokenIn, tokenOut, stable);\\n        if (IFactory(factory).isPair(pair)) {\\n            return IPair(pair).getAmountOut(amountIn, tokenIn);\\n        }\\n        return 0;\\n    }\\n\\n    /// @dev Performs chained getAmountOut calculations on any number of pairs.\\n    function getAmountsOut(uint amountIn, Route[] memory routes)\\n        external\\n        view\\n        returns (uint[] memory amounts)\\n    {\\n        return _getAmountsOut(amountIn, routes);\\n    }\\n\\n    function _getAmountsOut(uint amountIn, Route[] memory routes)\\n        internal\\n        view\\n        returns (uint[] memory amounts)\\n    {\\n        require(routes.length >= 1, \\\"VoltRouter: INVALID_PATH\\\");\\n        amounts = new uint[](routes.length + 1);\\n        amounts[0] = amountIn;\\n        for (uint i = 0; i < routes.length; i++) {\\n            address pair = _pairFor(\\n                routes[i].from,\\n                routes[i].to,\\n                routes[i].stable\\n            );\\n            if (IFactory(factory).isPair(pair)) {\\n                amounts[i + 1] = IPair(pair).getAmountOut(\\n                    amounts[i],\\n                    routes[i].from\\n                );\\n            }\\n        }\\n    }\\n\\n    function isPair(address pair) external view returns (bool) {\\n        return IFactory(factory).isPair(pair);\\n    }\\n\\n    function quoteAddLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint amountADesired,\\n        uint amountBDesired\\n    )\\n        external\\n        view\\n        returns (\\n            uint amountA,\\n            uint amountB,\\n            uint liquidity\\n        )\\n    {\\n        // create the pair if it doesn't exist yet\\n        address _pair = IFactory(factory).getPair(tokenA, tokenB, stable);\\n        (uint reserveA, uint reserveB) = (0, 0);\\n        uint _totalSupply = 0;\\n        if (_pair != address(0)) {\\n            _totalSupply = IERC20(_pair).totalSupply();\\n            (reserveA, reserveB) = _getReserves(tokenA, tokenB, stable);\\n        }\\n        if (reserveA == 0 && reserveB == 0) {\\n            (amountA, amountB) = (amountADesired, amountBDesired);\\n            liquidity = Math.sqrt(amountA * amountB) - MINIMUM_LIQUIDITY;\\n        } else {\\n            uint amountBOptimal = _quoteLiquidity(\\n                amountADesired,\\n                reserveA,\\n                reserveB\\n            );\\n            if (amountBOptimal <= amountBDesired) {\\n                (amountA, amountB) = (amountADesired, amountBOptimal);\\n                liquidity = Math.min(\\n                    (amountA * _totalSupply) / reserveA,\\n                    (amountB * _totalSupply) / reserveB\\n                );\\n            } else {\\n                uint amountAOptimal = _quoteLiquidity(\\n                    amountBDesired,\\n                    reserveB,\\n                    reserveA\\n                );\\n                (amountA, amountB) = (amountAOptimal, amountBDesired);\\n                liquidity = Math.min(\\n                    (amountA * _totalSupply) / reserveA,\\n                    (amountB * _totalSupply) / reserveB\\n                );\\n            }\\n        }\\n    }\\n\\n    function quoteRemoveLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint liquidity\\n    ) external view returns (uint amountA, uint amountB) {\\n        // create the pair if it doesn't exist yet\\n        address _pair = IFactory(factory).getPair(tokenA, tokenB, stable);\\n\\n        if (_pair == address(0)) {\\n            return (0, 0);\\n        }\\n\\n        (uint reserveA, uint reserveB) = _getReserves(tokenA, tokenB, stable);\\n        uint _totalSupply = IERC20(_pair).totalSupply();\\n        // using balances ensures pro-rata distribution\\n        amountA = (liquidity * reserveA) / _totalSupply;\\n        // using balances ensures pro-rata distribution\\n        amountB = (liquidity * reserveB) / _totalSupply;\\n    }\\n\\n    function _addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin\\n    ) internal returns (uint amountA, uint amountB) {\\n        require(amountADesired >= amountAMin, \\\"VoltRouter: DESIRED_A_AMOUNT\\\");\\n        require(amountBDesired >= amountBMin, \\\"VoltRouter: DESIRED_B_AMOUNT\\\");\\n        // create the pair if it doesn't exist yet\\n        address _pair = IFactory(factory).getPair(tokenA, tokenB, stable);\\n        if (_pair == address(0)) {\\n            _pair = IFactory(factory).createPair(tokenA, tokenB, stable);\\n        }\\n        (uint reserveA, uint reserveB) = _getReserves(tokenA, tokenB, stable);\\n        if (reserveA == 0 && reserveB == 0) {\\n            (amountA, amountB) = (amountADesired, amountBDesired);\\n        } else {\\n            uint amountBOptimal = _quoteLiquidity(\\n                amountADesired,\\n                reserveA,\\n                reserveB\\n            );\\n            if (amountBOptimal <= amountBDesired) {\\n                require(\\n                    amountBOptimal >= amountBMin,\\n                    \\\"VoltRouter: INSUFFICIENT_B_AMOUNT\\\"\\n                );\\n                (amountA, amountB) = (amountADesired, amountBOptimal);\\n            } else {\\n                uint amountAOptimal = _quoteLiquidity(\\n                    amountBDesired,\\n                    reserveB,\\n                    reserveA\\n                );\\n                assert(amountAOptimal <= amountADesired);\\n                require(\\n                    amountAOptimal >= amountAMin,\\n                    \\\"VoltRouter: INSUFFICIENT_A_AMOUNT\\\"\\n                );\\n                (amountA, amountB) = (amountAOptimal, amountBDesired);\\n            }\\n        }\\n    }\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    )\\n        external\\n        ensure(deadline)\\n        returns (\\n            uint amountA,\\n            uint amountB,\\n            uint liquidity\\n        )\\n    {\\n        (amountA, amountB) = _addLiquidity(\\n            tokenA,\\n            tokenB,\\n            stable,\\n            amountADesired,\\n            amountBDesired,\\n            amountAMin,\\n            amountBMin\\n        );\\n        address pair = _pairFor(tokenA, tokenB, stable);\\n        SafeERC20.safeTransferFrom(IERC20(tokenA), msg.sender, pair, amountA);\\n        SafeERC20.safeTransferFrom(IERC20(tokenB), msg.sender, pair, amountB);\\n        liquidity = IPair(pair).mint(to);\\n    }\\n\\n    function addLiquidityMTR(\\n        address token,\\n        bool stable,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountMTRMin,\\n        address to,\\n        uint deadline\\n    )\\n        external\\n        payable\\n        ensure(deadline)\\n        returns (\\n            uint amountToken,\\n            uint amountMTR,\\n            uint liquidity\\n        )\\n    {\\n        (amountToken, amountMTR) = _addLiquidity(\\n            token,\\n            address(wmtr),\\n            stable,\\n            amountTokenDesired,\\n            msg.value,\\n            amountTokenMin,\\n            amountMTRMin\\n        );\\n        address pair = _pairFor(token, address(wmtr), stable);\\n        IERC20(token).safeTransferFrom(msg.sender, pair, amountToken);\\n        wmtr.deposit{value: amountMTR}();\\n        assert(wmtr.transfer(pair, amountMTR));\\n        liquidity = IPair(pair).mint(to);\\n        // refund dust eth, if any\\n        if (msg.value > amountMTR)\\n            _safeTransferMTR(msg.sender, msg.value - amountMTR);\\n    }\\n\\n    // **** REMOVE LIQUIDITY ****\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB) {\\n        return\\n            _removeLiquidity(\\n                tokenA,\\n                tokenB,\\n                stable,\\n                liquidity,\\n                amountAMin,\\n                amountBMin,\\n                to,\\n                deadline\\n            );\\n    }\\n\\n    function _removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) internal ensure(deadline) returns (uint amountA, uint amountB) {\\n        address pair = _pairFor(tokenA, tokenB, stable);\\n        IERC20(pair).safeTransferFrom(msg.sender, pair, liquidity);\\n        // send liquidity to pair\\n        (uint amount0, uint amount1) = IPair(pair).burn(to);\\n        (address token0, ) = _sortTokens(tokenA, tokenB);\\n        (amountA, amountB) = tokenA == token0\\n            ? (amount0, amount1)\\n            : (amount1, amount0);\\n        require(amountA >= amountAMin, \\\"VoltRouter: INSUFFICIENT_A_AMOUNT\\\");\\n        require(amountB >= amountBMin, \\\"VoltRouter: INSUFFICIENT_B_AMOUNT\\\");\\n    }\\n\\n    function removeLiquidityMTR(\\n        address token,\\n        bool stable,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountMTRMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountMTR) {\\n        return\\n            _removeLiquidityMTR(\\n                token,\\n                stable,\\n                liquidity,\\n                amountTokenMin,\\n                amountMTRMin,\\n                to,\\n                deadline\\n            );\\n    }\\n\\n    function _removeLiquidityMTR(\\n        address token,\\n        bool stable,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountMTRMin,\\n        address to,\\n        uint deadline\\n    ) internal ensure(deadline) returns (uint amountToken, uint amountMTR) {\\n        (amountToken, amountMTR) = _removeLiquidity(\\n            token,\\n            address(wmtr),\\n            stable,\\n            liquidity,\\n            amountTokenMin,\\n            amountMTRMin,\\n            address(this),\\n            deadline\\n        );\\n        IERC20(token).safeTransfer(to, amountToken);\\n        wmtr.withdraw(amountMTR);\\n        _safeTransferMTR(to, amountMTR);\\n    }\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint amountA, uint amountB) {\\n        address pair = _pairFor(tokenA, tokenB, stable);\\n        {\\n            uint value = approveMax ? type(uint).max : liquidity;\\n            IPair(pair).permit(\\n                msg.sender,\\n                address(this),\\n                value,\\n                deadline,\\n                v,\\n                r,\\n                s\\n            );\\n        }\\n\\n        (amountA, amountB) = _removeLiquidity(\\n            tokenA,\\n            tokenB,\\n            stable,\\n            liquidity,\\n            amountAMin,\\n            amountBMin,\\n            to,\\n            deadline\\n        );\\n    }\\n\\n    function removeLiquidityMTRWithPermit(\\n        address token,\\n        bool stable,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountMTRMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint amountToken, uint amountMTR) {\\n        address pair = _pairFor(token, address(wmtr), stable);\\n        uint value = approveMax ? type(uint).max : liquidity;\\n        IPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\\n        (amountToken, amountMTR) = _removeLiquidityMTR(\\n            token,\\n            stable,\\n            liquidity,\\n            amountTokenMin,\\n            amountMTRMin,\\n            to,\\n            deadline\\n        );\\n    }\\n\\n    function removeLiquidityMTRSupportingFeeOnTransferTokens(\\n        address token,\\n        bool stable,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountFTMMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountFTM) {\\n        return\\n            _removeLiquidityMTRSupportingFeeOnTransferTokens(\\n                token,\\n                stable,\\n                liquidity,\\n                amountTokenMin,\\n                amountFTMMin,\\n                to,\\n                deadline\\n            );\\n    }\\n\\n    function _removeLiquidityMTRSupportingFeeOnTransferTokens(\\n        address token,\\n        bool stable,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountFTMMin,\\n        address to,\\n        uint deadline\\n    ) internal ensure(deadline) returns (uint amountToken, uint amountFTM) {\\n        (amountToken, amountFTM) = _removeLiquidity(\\n            token,\\n            address(wmtr),\\n            stable,\\n            liquidity,\\n            amountTokenMin,\\n            amountFTMMin,\\n            address(this),\\n            deadline\\n        );\\n        IERC20(token).safeTransfer(to, IERC20(token).balanceOf(address(this)));\\n        wmtr.withdraw(amountFTM);\\n        _safeTransferMTR(to, amountFTM);\\n    }\\n\\n    function removeLiquidityMTRWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        bool stable,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountFTMMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint amountToken, uint amountFTM) {\\n        address pair = _pairFor(token, address(wmtr), stable);\\n        uint value = approveMax ? type(uint).max : liquidity;\\n        IPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\\n        (\\n            amountToken,\\n            amountFTM\\n        ) = _removeLiquidityMTRSupportingFeeOnTransferTokens(\\n            token,\\n            stable,\\n            liquidity,\\n            amountTokenMin,\\n            amountFTMMin,\\n            to,\\n            deadline\\n        );\\n    }\\n\\n    // **** SWAP ****\\n    // requires the initial amount to have already been sent to the first pair\\n    function _swap(\\n        uint[] memory amounts,\\n        Route[] memory routes,\\n        address _to\\n    ) internal virtual {\\n        for (uint i = 0; i < routes.length; i++) {\\n            (address token0, ) = _sortTokens(routes[i].from, routes[i].to);\\n            uint amountOut = amounts[i + 1];\\n            (uint amount0Out, uint amount1Out) = routes[i].from == token0\\n                ? (uint(0), amountOut)\\n                : (amountOut, uint(0));\\n            address to = i < routes.length - 1\\n                ? _pairFor(\\n                    routes[i + 1].from,\\n                    routes[i + 1].to,\\n                    routes[i + 1].stable\\n                )\\n                : _to;\\n            IPair(_pairFor(routes[i].from, routes[i].to, routes[i].stable))\\n                .swap(amount0Out, amount1Out, to, new bytes(0));\\n        }\\n    }\\n\\n    function _swapSupportingFeeOnTransferTokens(\\n        Route[] memory routes,\\n        address _to\\n    ) internal virtual {\\n        for (uint i; i < routes.length; i++) {\\n            (address input, address output) = (routes[i].from, routes[i].to);\\n            (address token0, ) = _sortTokens(input, output);\\n            IPair pair = IPair(\\n                _pairFor(routes[i].from, routes[i].to, routes[i].stable)\\n            );\\n            uint amountInput;\\n            uint amountOutput;\\n            {\\n                // scope to avoid stack too deep errors\\n                (uint reserve0, uint reserve1, ) = pair.getReserves();\\n                uint reserveInput = input == token0 ? reserve0 : reserve1;\\n                amountInput =\\n                    IERC20(input).balanceOf(address(pair)) -\\n                    reserveInput;\\n                //(amountOutput,) = getAmountOut(amountInput, input, output, stable);\\n                amountOutput = pair.getAmountOut(amountInput, input);\\n            }\\n            (uint amount0Out, uint amount1Out) = input == token0\\n                ? (uint(0), amountOutput)\\n                : (amountOutput, uint(0));\\n            address to = i < routes.length - 1\\n                ? _pairFor(\\n                    routes[i + 1].from,\\n                    routes[i + 1].to,\\n                    routes[i + 1].stable\\n                )\\n                : _to;\\n            pair.swap(amount0Out, amount1Out, to, new bytes(0));\\n        }\\n    }\\n\\n    function swapExactTokensForTokensSimple(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address tokenFrom,\\n        address tokenTo,\\n        bool stable,\\n        address to,\\n        uint deadline\\n    ) external ensure(deadline) returns (uint[] memory amounts) {\\n        Route[] memory routes = new Route[](1);\\n        routes[0].from = tokenFrom;\\n        routes[0].to = tokenTo;\\n        routes[0].stable = stable;\\n        amounts = _getAmountsOut(amountIn, routes);\\n        require(\\n            amounts[amounts.length - 1] >= amountOutMin,\\n            \\\"VoltRouter: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n        );\\n        IERC20(routes[0].from).safeTransferFrom(\\n            msg.sender,\\n            _pairFor(routes[0].from, routes[0].to, routes[0].stable),\\n            amounts[0]\\n        );\\n        _swap(amounts, routes, to);\\n    }\\n\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        Route[] calldata routes,\\n        address to,\\n        uint deadline\\n    ) external ensure(deadline) returns (uint[] memory amounts) {\\n        amounts = _getAmountsOut(amountIn, routes);\\n        require(\\n            amounts[amounts.length - 1] >= amountOutMin,\\n            \\\"VoltRouter: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n        );\\n        IERC20(routes[0].from).safeTransferFrom(\\n            msg.sender,\\n            _pairFor(routes[0].from, routes[0].to, routes[0].stable),\\n            amounts[0]\\n        );\\n        _swap(amounts, routes, to);\\n    }\\n\\n    function swapExactMTRForTokens(\\n        uint amountOutMin,\\n        Route[] calldata routes,\\n        address to,\\n        uint deadline\\n    ) external payable ensure(deadline) returns (uint[] memory amounts) {\\n        require(routes[0].from == address(wmtr), \\\"VoltRouter: INVALID_PATH\\\");\\n        amounts = _getAmountsOut(msg.value, routes);\\n        require(\\n            amounts[amounts.length - 1] >= amountOutMin,\\n            \\\"VoltRouter: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n        );\\n        wmtr.deposit{value: amounts[0]}();\\n        assert(\\n            wmtr.transfer(\\n                _pairFor(routes[0].from, routes[0].to, routes[0].stable),\\n                amounts[0]\\n            )\\n        );\\n        _swap(amounts, routes, to);\\n    }\\n\\n    function swapExactTokensForMTR(\\n        uint amountIn,\\n        uint amountOutMin,\\n        Route[] calldata routes,\\n        address to,\\n        uint deadline\\n    ) external ensure(deadline) returns (uint[] memory amounts) {\\n        require(\\n            routes[routes.length - 1].to == address(wmtr),\\n            \\\"VoltRouter: INVALID_PATH\\\"\\n        );\\n        amounts = _getAmountsOut(amountIn, routes);\\n        require(\\n            amounts[amounts.length - 1] >= amountOutMin,\\n            \\\"VoltRouter: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n        );\\n        IERC20(routes[0].from).safeTransferFrom(\\n            msg.sender,\\n            _pairFor(routes[0].from, routes[0].to, routes[0].stable),\\n            amounts[0]\\n        );\\n        _swap(amounts, routes, address(this));\\n        wmtr.withdraw(amounts[amounts.length - 1]);\\n        _safeTransferMTR(to, amounts[amounts.length - 1]);\\n    }\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        Route[] calldata routes,\\n        address to,\\n        uint deadline\\n    ) external ensure(deadline) {\\n        IERC20(routes[0].from).safeTransferFrom(\\n            msg.sender,\\n            _pairFor(routes[0].from, routes[0].to, routes[0].stable),\\n            amountIn\\n        );\\n        uint balanceBefore = IERC20(routes[routes.length - 1].to).balanceOf(to);\\n        _swapSupportingFeeOnTransferTokens(routes, to);\\n        require(\\n            IERC20(routes[routes.length - 1].to).balanceOf(to) -\\n                balanceBefore >=\\n                amountOutMin,\\n            \\\"VoltRouter: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n        );\\n    }\\n\\n    function swapExactMTRForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        Route[] calldata routes,\\n        address to,\\n        uint deadline\\n    ) external payable ensure(deadline) {\\n        require(routes[0].from == address(wmtr), \\\"VoltRouter: INVALID_PATH\\\");\\n        uint amountIn = msg.value;\\n        wmtr.deposit{value: amountIn}();\\n        assert(\\n            wmtr.transfer(\\n                _pairFor(routes[0].from, routes[0].to, routes[0].stable),\\n                amountIn\\n            )\\n        );\\n        uint balanceBefore = IERC20(routes[routes.length - 1].to).balanceOf(to);\\n        _swapSupportingFeeOnTransferTokens(routes, to);\\n        require(\\n            IERC20(routes[routes.length - 1].to).balanceOf(to) -\\n                balanceBefore >=\\n                amountOutMin,\\n            \\\"VoltRouter: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n        );\\n    }\\n\\n    function swapExactTokensForMTRSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        Route[] calldata routes,\\n        address to,\\n        uint deadline\\n    ) external ensure(deadline) {\\n        require(\\n            routes[routes.length - 1].to == address(wmtr),\\n            \\\"VoltRouter: INVALID_PATH\\\"\\n        );\\n        IERC20(routes[0].from).safeTransferFrom(\\n            msg.sender,\\n            _pairFor(routes[0].from, routes[0].to, routes[0].stable),\\n            amountIn\\n        );\\n        _swapSupportingFeeOnTransferTokens(routes, address(this));\\n        uint amountOut = IERC20(address(wmtr)).balanceOf(address(this));\\n        require(\\n            amountOut >= amountOutMin,\\n            \\\"VoltRouter: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n        );\\n        wmtr.withdraw(amountOut);\\n        _safeTransferMTR(to, amountOut);\\n    }\\n\\n    function UNSAFE_swapExactTokensForTokens(\\n        uint[] memory amounts,\\n        Route[] calldata routes,\\n        address to,\\n        uint deadline\\n    ) external ensure(deadline) returns (uint[] memory) {\\n        IERC20(routes[0].from).safeTransferFrom(\\n            msg.sender,\\n            _pairFor(routes[0].from, routes[0].to, routes[0].stable),\\n            amounts[0]\\n        );\\n        _swap(amounts, routes, to);\\n        return amounts;\\n    }\\n\\n    function _safeTransferMTR(address to, uint value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"VoltRouter: ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x6cd9d70ef6e962595ffc07853ca615331b7f12c2a8affb52f7bc074f20f0ccb1\",\"license\":\"MIT\"},\"contracts/interface/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0x224e032b714ae191e5e419054a144402b01597e8b2eb36db4f6e38d3e42b0db7\",\"license\":\"MIT\"},\"contracts/interface/IFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IFactory {\\n    function treasury() external view returns (address);\\n\\n    function isPair(address pair) external view returns (bool);\\n\\n    function getInitializable()\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            bool\\n        );\\n\\n    function isPaused() external view returns (bool);\\n\\n    function pairCodeHash() external pure returns (bytes32);\\n\\n    function getPair(\\n        address tokenA,\\n        address token,\\n        bool stable\\n    ) external view returns (address);\\n\\n    function createPair(\\n        address tokenA,\\n        address tokenB,\\n        bool stable\\n    ) external returns (address pair);\\n}\\n\",\"keccak256\":\"0x22270dbb92d05a3dae6d38084db2ce1db27dee00af111b6502c34efe7106508b\",\"license\":\"MIT\"},\"contracts/interface/IPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IPair {\\n    // Structure to capture time period obervations every 30 minutes, used for local oracles\\n    struct Observation {\\n        uint timestamp;\\n        uint reserve0Cumulative;\\n        uint reserve1Cumulative;\\n    }\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint value,\\n        uint deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function swap(\\n        uint amount0Out,\\n        uint amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n\\n    function mint(address to) external returns (uint liquidity);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 _reserve0,\\n            uint112 _reserve1,\\n            uint32 _blockTimestampLast\\n        );\\n\\n    function getAmountOut(uint, address) external view returns (uint);\\n\\n    function claimFees() external returns (uint, uint);\\n\\n    function tokens() external view returns (address, address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function stable() external view returns (bool);\\n\\n    function metadata()\\n        external\\n        view\\n        returns (\\n            uint dec0,\\n            uint dec1,\\n            uint r0,\\n            uint r1,\\n            bool st,\\n            address t0,\\n            address t1\\n        );\\n}\\n\",\"keccak256\":\"0x978d3132f8f5f6752533d94a3024f25ced205df57475d5e2d7c09f301dd7c762\",\"license\":\"MIT\"},\"contracts/interface/IWMTR.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IWMTR {\\n    function name() external view returns (string memory);\\n\\n    function approve(address guy, uint256 wad) external returns (bool);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 wad\\n    ) external returns (bool);\\n\\n    function withdraw(uint256 wad) external;\\n\\n    function decimals() external view returns (uint8);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function transfer(address dst, uint256 wad) external returns (bool);\\n\\n    function deposit() external payable;\\n\\n    function allowance(address, address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x1c329a5a8c72d7f32559c43e7a90a720cca39e0098525f746e1670fd84fc2a7d\",\"license\":\"MIT\"},\"contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n        (bool success, bytes memory returndata) = target.call(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return\\n            functionDelegateCall(\\n                target,\\n                data,\\n                \\\"Address: low-level delegate call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x284fcdaef2f20ec54759bfb0821ee3a3459a1f0bc302b29e7fcc3c2f42e728df\",\"license\":\"MIT\"},\"contracts/lib/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nlibrary Math {\\n    function max(uint a, uint b) internal pure returns (uint) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function min(uint a, uint b) internal pure returns (uint) {\\n        return a < b ? a : b;\\n    }\\n\\n    function positiveInt128(int128 value) internal pure returns (int128) {\\n        return value < 0 ? int128(0) : value;\\n    }\\n\\n    function closeTo(\\n        uint a,\\n        uint b,\\n        uint target\\n    ) internal pure returns (bool) {\\n        if (a > b) {\\n            if (a - b <= target) {\\n                return true;\\n            }\\n        } else {\\n            if (b - a <= target) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8a50db5ef01ef869b1a7df3cf485d6c87473549c70fbefc54bdea34f8bc78538\",\"license\":\"MIT\"},\"contracts/lib/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../interface/IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint value\\n    ) internal {\\n        uint newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(\\n            data,\\n            \\\"SafeERC20: low-level call failed\\\"\\n        );\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(\\n                abi.decode(returndata, (bool)),\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd09403b2f52a045a82861c53059fb835daabe908fd774f948370979588b3fe1a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b5060405162004ba638038062004ba68339810160408190526200003491620000d8565b6001600160a01b038216608081905260408051631355724960e31b81529051639aab9248916004808201926020929091908290030181865afa1580156200007f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000a5919062000110565b60c0526001600160a01b031660a052506200012a565b80516001600160a01b0381168114620000d357600080fd5b919050565b60008060408385031215620000ec57600080fd5b620000f783620000bb565b91506200010760208401620000bb565b90509250929050565b6000602082840312156200012357600080fd5b5051919050565b60805160a05160c051614973620002336000396000612bc50152600081816101ca0152818161043b0152818161090001528181610ab401528181610b5f0152818161142301528181611540015281816115ce0152818161172b015281816118cb01528181611c9401528181611d1201528181611d8601528181611fe50152818161201b01528181612059015281816120ee015281816123cc015281816125ce015281816126a80152818161270101526135260152600081816105b601528181610bde01528181610e9801528181610fac015281816119be015281816122330152818161234e015281816129d701528181612b8a01528181613691015261373201526149736000f3fe6080604052600436106101ba5760003560e01c80637997bc10116100ec578063b56451831161008a578063e5e31b1311610064578063e5e31b13146105d8578063f24ee0c614610608578063f41766d814610628578063f5274d201461064857600080fd5b8063b564518314610571578063b6710cb914610584578063c45a0155146105a457600080fd5b806398a0fb3c116100c657806398a0fb3c146104f0578063a32b1fcd14610510578063ab0d5d8414610530578063ae5688681461054357600080fd5b80637997bc101461049d578063839a089c146104b05780639881fcb4146104d057600080fd5b806357e044d2116101595780635e60dab5116101335780635e60dab514610409578063688475c7146104295780636cc1ae131461045d5780637301e3c81461047d57600080fd5b806357e044d2146103795780635a47ddc3146103995780635e1e6325146103d457600080fd5b80633ee045cc116101955780633ee045cc146102c15780634386e63c146102e15780634c1ee03e14610301578063544caa561461033957600080fd5b8062cfffca1461023a5780630dede6c41461027457806313dcfc591461029457600080fd5b3661023557336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146102335760405162461bcd60e51b81526020600482015260146024820152732b37b63a2937baba32b91d102727aa2faba6aa2960611b60448201526064015b60405180910390fd5b005b600080fd5b34801561024657600080fd5b5061025a610255366004613c07565b610668565b604080519283526020830191909152015b60405180910390f35b34801561028057600080fd5b5061025a61028f366004613c79565b61068a565b3480156102a057600080fd5b506102b46102af366004613cfe565b6106ae565b60405161026b9190613d62565b3480156102cd57600080fd5b506102336102dc366004613deb565b6108d5565b3480156102ed57600080fd5b5061025a6102fc366004613e5e565b610bd7565b34801561030d57600080fd5b5061032161031c366004613eaf565b610d3e565b6040516001600160a01b03909116815260200161026b565b34801561034557600080fd5b50610359610354366004613efa565b610d55565b604080516001600160a01b0393841681529290911660208301520161026b565b34801561038557600080fd5b5061025a610394366004613c07565b610d6e565b3480156103a557600080fd5b506103b96103b4366004613f33565b610d80565b6040805193845260208401929092529082015260600161026b565b3480156103e057600080fd5b506103f46103ef366004613fc2565b610e60565b6040805192835290151560208301520161026b565b34801561041557600080fd5b5061025a610424366004613eaf565b6110b4565b34801561043557600080fd5b506103217f000000000000000000000000000000000000000000000000000000000000000081565b34801561046957600080fd5b50610233610478366004613deb565b6110ce565b34801561048957600080fd5b506102b4610498366004614064565b6112d4565b6102b46104ab366004614141565b6113fe565b3480156104bc57600080fd5b506102b46104cb366004613deb565b6116fe565b3480156104dc57600080fd5b506102b46104eb36600461420d565b6119aa565b3480156104fc57600080fd5b506103b961050b3660046142b3565b6119b6565b34801561051c57600080fd5b5061025a61052b36600461431f565b611bb6565b61023361053e366004614141565b611c71565b34801561054f57600080fd5b5061056361055e3660046143db565b611fac565b60405190815260200161026b565b6103b961057f366004613c07565b611fb9565b34801561059057600080fd5b5061056361059f366004614407565b612203565b3480156105b057600080fd5b506103217f000000000000000000000000000000000000000000000000000000000000000081565b3480156105e457600080fd5b506105f86105f336600461445a565b61232c565b604051901515815260200161026b565b34801561061457600080fd5b5061025a610623366004614477565b6123c1565b34801561063457600080fd5b506102b4610643366004613deb565b61249a565b34801561065457600080fd5b5061025a610663366004614477565b6125c3565b60008061067a8989898989898961267e565b9150915097509795505050505050565b60008061069d8a8a8a8a8a8a8a8a61277c565b915091509850989650505050505050565b606081428110156106d15760405162461bcd60e51b815260040161022a90614521565b604080516001808252818301909252600091816020015b60408051606081018252600080825260208083018290529282015282526000199092019101816106e8579050509050878160008151811061072b5761072b61454e565b6020026020010151600001906001600160a01b031690816001600160a01b03168152505086816000815181106107635761076361454e565b6020026020010151602001906001600160a01b031690816001600160a01b031681525050858160008151811061079b5761079b61454e565b60209081029190910101519015156040909101526107b98a826128c1565b92508883600185516107cb919061457a565b815181106107db576107db61454e565b602002602001015110156108015760405162461bcd60e51b815260040161022a90614591565b6108bd3361086a8360008151811061081b5761081b61454e565b6020026020010151600001518460008151811061083a5761083a61454e565b602002602001015160200151856000815181106108595761085961454e565b602002602001015160400151612b43565b8560008151811061087d5761087d61454e565b6020026020010151846000815181106108985761089861454e565b6020026020010151600001516001600160a01b0316612c4b909392919063ffffffff16565b6108c8838287612cbc565b5050979650505050505050565b80428110156108f65760405162461bcd60e51b815260040161022a90614521565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016858561092d60018261457a565b81811061093c5761093c61454e565b9050606002016020016020810190610954919061445a565b6001600160a01b03161461097a5760405162461bcd60e51b815260040161022a906145d7565b610a4033610a05878760008181106109945761099461454e565b6109aa926020606090920201908101915061445a565b888860008181106109bd576109bd61454e565b90506060020160200160208101906109d5919061445a565b898960008181106109e8576109e861454e565b9050606002016040016020810190610a00919061460e565b612b43565b8988886000818110610a1957610a1961454e565b610a2f926020606090920201908101915061445a565b6001600160a01b0316929190612c4b565b610a9c8585808060200260200160405190810160405280939291908181526020016000905b82821015610a9157610a826060830286013681900381019061462b565b81526020019060010190610a65565b505050505030612f0b565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610b03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b279190614647565b905086811015610b495760405162461bcd60e51b815260040161022a90614591565b604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b158015610bab57600080fd5b505af1158015610bbf573d6000803e3d6000fd5b50505050610bcd8482613293565b5050505050505050565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636801cc308888886040518463ffffffff1660e01b8152600401610c2c93929190614660565b602060405180830381865afa158015610c49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6d9190614684565b90506001600160a01b038116610c8a576000809250925050610d35565b600080610c98898989613350565b915091506000836001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cdc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d009190614647565b905080610d0d84896146a1565b610d1791906146c0565b955080610d2483896146a1565b610d2e91906146c0565b9450505050505b94509492505050565b6000610d4b848484612b43565b90505b9392505050565b600080610d62848461341a565b915091505b9250929050565b60008061067a898989898989896134fc565b60008060008342811015610da65760405162461bcd60e51b815260040161022a90614521565b610db58d8d8d8d8d8d8d6135d4565b90945092506000610dc78e8e8e612b43565b9050610dd58e338388612c4b565b610de18d338387612c4b565b6040516335313c2160e11b81526001600160a01b038881166004830152821690636a627842906024016020604051808303816000875af1158015610e29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4d9190614647565b9250505099509950999650505050505050565b6000806000610e7185856001612b43565b60405163e5e31b1360e01b81526001600160a01b03828116600483015291925060009182917f00000000000000000000000000000000000000000000000000000000000000009091169063e5e31b1390602401602060405180830381865afa158015610ee1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0591906146e2565b15610f7e576040516378a051ad60e11b8152600481018990526001600160a01b03888116602483015284169063f140a35a90604401602060405180830381865afa158015610f57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7b9190614647565b91505b610f8a87876000612b43565b60405163e5e31b1360e01b81526001600160a01b0380831660048301529194507f00000000000000000000000000000000000000000000000000000000000000009091169063e5e31b1390602401602060405180830381865afa158015610ff5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101991906146e2565b15611092576040516378a051ad60e11b8152600481018990526001600160a01b03888116602483015284169063f140a35a90604401602060405180830381865afa15801561106b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108f9190614647565b90505b8082116110a1578060006110a5565b8160015b94509450505050935093915050565b6000806110c2858585613350565b91509150935093915050565b80428110156110ef5760405162461bcd60e51b815260040161022a90614521565b61110933610a05878760008181106109945761099461454e565b6000858561111860018261457a565b8181106111275761112761454e565b905060600201602001602081019061113f919061445a565b6040516370a0823160e01b81526001600160a01b03868116600483015291909116906370a0823190602401602060405180830381865afa158015611187573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ab9190614647565b90506112098686808060200260200160405190810160405280939291908181526020016000905b828210156111fe576111ef6060830286013681900381019061462b565b815260200190600101906111d2565b505050505085612f0b565b8681878761121860018261457a565b8181106112275761122761454e565b905060600201602001602081019061123f919061445a565b6040516370a0823160e01b81526001600160a01b03888116600483015291909116906370a08231906024015b602060405180830381865afa158015611288573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ac9190614647565b6112b6919061457a565b1015610bcd5760405162461bcd60e51b815260040161022a90614591565b606081428110156112f75760405162461bcd60e51b815260040161022a90614521565b61139333611365888860008181106113115761131161454e565b611327926020606090920201908101915061445a565b8989600081811061133a5761133a61454e565b9050606002016020016020810190611352919061445a565b8a8a60008181106109e8576109e861454e565b896000815181106113785761137861454e565b602002602001015189896000818110610a1957610a1961454e565b6113f0878787808060200260200160405190810160405280939291908181526020016000905b828210156113e5576113d66060830286013681900381019061462b565b815260200190600101906113b9565b505050505086612cbc565b8691505b5095945050505050565b606081428110156114215760405162461bcd60e51b815260040161022a90614521565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168686600081811061145e5761145e61454e565b611474926020606090920201908101915061445a565b6001600160a01b03161461149a5760405162461bcd60e51b815260040161022a906145d7565b6114f6348787808060200260200160405190810160405280939291908181526020016000905b828210156114ec576114dd6060830286013681900381019061462b565b815260200190600101906114c0565b50505050506128c1565b9150868260018451611508919061457a565b815181106115185761151861454e565b6020026020010151101561153e5760405162461bcd60e51b815260040161022a90614591565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0836000815181106115805761158061454e565b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b1580156115b357600080fd5b505af11580156115c7573d6000803e3d6000fd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb611611888860008181106113115761131161454e565b846000815181106116245761162461454e565b60200260200101516040518363ffffffff1660e01b815260040161165d9291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af115801561167c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a091906146e2565b6116ac576116ac6146ff565b6113f4828787808060200260200160405190810160405280939291908181526020016000905b828210156113e5576116ef6060830286013681900381019061462b565b815260200190600101906116d2565b606081428110156117215760405162461bcd60e51b815260040161022a90614521565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016868661175860018261457a565b8181106117675761176761454e565b905060600201602001602081019061177f919061445a565b6001600160a01b0316146117a55760405162461bcd60e51b815260040161022a906145d7565b6117f7888787808060200260200160405190810160405280939291908181526020016000905b828210156114ec576117e86060830286013681900381019061462b565b815260200190600101906117cb565b9150868260018451611809919061457a565b815181106118195761181961454e565b6020026020010151101561183f5760405162461bcd60e51b815260040161022a90614591565b61186c33611859888860008181106113115761131161454e565b846000815181106113785761137861454e565b6118c9828787808060200260200160405190810160405280939291908181526020016000905b828210156118be576118af6060830286013681900381019061462b565b81526020019060010190611892565b505050505030612cbc565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632e1a7d4d8360018551611907919061457a565b815181106119175761191761454e565b60200260200101516040518263ffffffff1660e01b815260040161193d91815260200190565b600060405180830381600087803b15801561195757600080fd5b505af115801561196b573d6000803e3d6000fd5b5050505061199f848360018551611982919061457a565b815181106119925761199261454e565b6020026020010151613293565b509695505050505050565b6060610d4e83836128c1565b6000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636801cc308a8a8a6040518463ffffffff1660e01b8152600401611a0c93929190614660565b602060405180830381865afa158015611a29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4d9190614684565b9050600080806001600160a01b03841615611ad757836001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611aa0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac49190614647565b9050611ad18c8c8c613350565b90935091505b82158015611ae3575081155b15611b14578896508795506103e8611b03611afe888a6146a1565b613878565b611b0d919061457a565b9450611ba7565b6000611b218a85856138e8565b9050888111611b6957899750955085611b6284611b3e848b6146a1565b611b4891906146c0565b84611b53858b6146a1565b611b5d91906146c0565b6139b5565b9550611ba5565b6000611b768a85876138e8565b9850899750889050611ba185611b8c85846146a1565b611b9691906146c0565b85611b53868c6146a1565b9650505b505b50505050955095509592505050565b6000806000611bc68f8f8f612b43565b9050600087611bd5578c611bd9565b6000195b60405163d505accf60e01b81529091506001600160a01b0383169063d505accf90611c14903390309086908f908e908e908e90600401614715565b600060405180830381600087803b158015611c2e57600080fd5b505af1158015611c42573d6000803e3d6000fd5b5050505050611c578f8f8f8f8f8f8f8f61277c565b8093508194505050509c509c9a5050505050505050505050565b8042811015611c925760405162461bcd60e51b815260040161022a90614521565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031685856000818110611ccf57611ccf61454e565b611ce5926020606090920201908101915061445a565b6001600160a01b031614611d0b5760405162461bcd60e51b815260040161022a906145d7565b60003490507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015611d6b57600080fd5b505af1158015611d7f573d6000803e3d6000fd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb611dc9888860008181106113115761131161454e565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044016020604051808303816000875af1158015611e16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e3a91906146e2565b611e4657611e466146ff565b60008686611e5560018261457a565b818110611e6457611e6461454e565b9050606002016020016020810190611e7c919061445a565b6040516370a0823160e01b81526001600160a01b03878116600483015291909116906370a0823190602401602060405180830381865afa158015611ec4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee89190614647565b9050611f468787808060200260200160405190810160405280939291908181526020016000905b82821015611f3b57611f2c6060830286013681900381019061462b565b81526020019060010190611f0f565b505050505086612f0b565b87818888611f5560018261457a565b818110611f6457611f6461454e565b9050606002016020016020810190611f7c919061445a565b6040516370a0823160e01b81526001600160a01b03898116600483015291909116906370a082319060240161126b565b6000610d4b8484846138e8565b60008060008342811015611fdf5760405162461bcd60e51b815260040161022a90614521565b61200e8b7f00000000000000000000000000000000000000000000000000000000000000008c8c348d8d6135d4565b909450925060006120408c7f00000000000000000000000000000000000000000000000000000000000000008d612b43565b90506120576001600160a01b038d16338388612c4b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0856040518263ffffffff1660e01b81526004016000604051808303818588803b1580156120b257600080fd5b505af11580156120c6573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038581166004830152602482018990527f000000000000000000000000000000000000000000000000000000000000000016935063a9059cbb925060440190506020604051808303816000875af115801561213b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061215f91906146e2565b61216b5761216b6146ff565b6040516335313c2160e11b81526001600160a01b038881166004830152821690636a627842906024016020604051808303816000875af11580156121b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121d79190614647565b9250833411156121f4576121f4336121ef863461457a565b613293565b50509750975097945050505050565b600080612211858585612b43565b60405163e5e31b1360e01b81526001600160a01b0380831660048301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063e5e31b1390602401602060405180830381865afa15801561227c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122a091906146e2565b1561231e576040516378a051ad60e11b8152600481018790526001600160a01b03868116602483015282169063f140a35a90604401602060405180830381865afa1580156122f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123169190614647565b915050612324565b60009150505b949350505050565b60405163e5e31b1360e01b81526001600160a01b0382811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063e5e31b1390602401602060405180830381865afa158015612397573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123bb91906146e2565b92915050565b60008060006123f18e7f00000000000000000000000000000000000000000000000000000000000000008f612b43565b9050600087612400578c612404565b6000195b60405163d505accf60e01b81529091506001600160a01b0383169063d505accf9061243f903390309086908f908e908e908e90600401614715565b600060405180830381600087803b15801561245957600080fd5b505af115801561246d573d6000803e3d6000fd5b505050506124808f8f8f8f8f8f8f6134fc565b809450819550505050509b509b9950505050505050505050565b606081428110156124bd5760405162461bcd60e51b815260040161022a90614521565b61250f888787808060200260200160405190810160405280939291908181526020016000905b828210156114ec576125006060830286013681900381019061462b565b815260200190600101906124e3565b9150868260018451612521919061457a565b815181106125315761253161454e565b602002602001015110156125575760405162461bcd60e51b815260040161022a90614591565b61257133611859888860008181106113115761131161454e565b61199f828787808060200260200160405190810160405280939291908181526020016000905b828210156113e5576125b46060830286013681900381019061462b565b81526020019060010190612597565b60008060006125f38e7f00000000000000000000000000000000000000000000000000000000000000008f612b43565b9050600087612602578c612606565b6000195b60405163d505accf60e01b81529091506001600160a01b0383169063d505accf90612641903390309086908f908e908e908e90600401614715565b600060405180830381600087803b15801561265b57600080fd5b505af115801561266f573d6000803e3d6000fd5b505050506124808f8f8f8f8f8f8f5b60008082428110156126a25760405162461bcd60e51b815260040161022a90614521565b6126d28a7f00000000000000000000000000000000000000000000000000000000000000008b8b8b8b308b61277c565b90935091506126eb6001600160a01b038b1686856139cb565b604051632e1a7d4d60e01b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561274d57600080fd5b505af1158015612761573d6000803e3d6000fd5b5050505061276f8583613293565b5097509795505050505050565b60008082428110156127a05760405162461bcd60e51b815260040161022a90614521565b60006127ad8c8c8c612b43565b90506127c46001600160a01b03821633838c612c4b565b60405163226bf2d160e21b81526001600160a01b03878116600483015260009182918416906389afcb449060240160408051808303816000875af1158015612810573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128349190614756565b9150915060006128448f8f61341a565b509050806001600160a01b03168f6001600160a01b03161461286757818361286a565b82825b90975095508a87101561288f5760405162461bcd60e51b815260040161022a9061477a565b898610156128af5760405162461bcd60e51b815260040161022a906147bb565b50505050509850989650505050505050565b60606001825110156128e55760405162461bcd60e51b815260040161022a906145d7565b81516128f29060016147fc565b67ffffffffffffffff81111561290a5761290a613ff9565b604051908082528060200260200182016040528015612933578160200160208202803683370190505b509050828160008151811061294a5761294a61454e565b60200260200101818152505060005b8251811015612b3c5760006129b58483815181106129795761297961454e565b6020026020010151600001518584815181106129975761299761454e565b6020026020010151602001518685815181106108595761085961454e565b60405163e5e31b1360e01b81526001600160a01b0380831660048301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063e5e31b1390602401602060405180830381865afa158015612a20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a4491906146e2565b15612b2957806001600160a01b031663f140a35a848481518110612a6a57612a6a61454e565b6020026020010151868581518110612a8457612a8461454e565b6020026020010151600001516040518363ffffffff1660e01b8152600401612abf9291909182526001600160a01b0316602082015260400190565b602060405180830381865afa158015612adc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b009190614647565b83612b0c8460016147fc565b81518110612b1c57612b1c61454e565b6020026020010181815250505b5080612b3481614814565b915050612959565b5092915050565b6000806000612b52868661341a565b6040516bffffffffffffffffffffffff19606084811b8216602084015283901b16603482015286151560f81b604882015291935091507f000000000000000000000000000000000000000000000000000000000000000090604901604051602081830303815290604052805190602001207f0000000000000000000000000000000000000000000000000000000000000000604051602001612c29939291906001600160f81b0319815260609390931b6bffffffffffffffffffffffff191660018401526015830191909152603582015260550190565b60408051601f1981840301815291905280516020909101209695505050505050565b6040516001600160a01b0380851660248301528316604482015260648101829052612cb69085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526139fb565b50505050565b60005b8251811015612cb6576000612d0e848381518110612cdf57612cdf61454e565b602002602001015160000151858481518110612cfd57612cfd61454e565b60200260200101516020015161341a565b509050600085612d1f8460016147fc565b81518110612d2f57612d2f61454e565b60200260200101519050600080836001600160a01b0316878681518110612d5857612d5861454e565b6020026020010151600001516001600160a01b031614612d7a57826000612d7e565b6000835b91509150600060018851612d92919061457a565b8610612d9e5786612e11565b612e1188612dad8860016147fc565b81518110612dbd57612dbd61454e565b60200260200101516000015189886001612dd791906147fc565b81518110612de757612de761454e565b6020026020010151602001518a896001612e0191906147fc565b815181106108595761085961454e565b9050612e64888781518110612e2857612e2861454e565b602002602001015160000151898881518110612e4657612e4661454e565b6020026020010151602001518a89815181106108595761085961454e565b6001600160a01b031663022c0d9f84848460006040519080825280601f01601f191660200182016040528015612ea1576020820181803683370190505b506040518563ffffffff1660e01b8152600401612ec19493929190614885565b600060405180830381600087803b158015612edb57600080fd5b505af1158015612eef573d6000803e3d6000fd5b5050505050505050508080612f0390614814565b915050612cbf565b60005b825181101561328e57600080848381518110612f2c57612f2c61454e565b602002602001015160000151858481518110612f4a57612f4a61454e565b602002602001015160200151915091506000612f66838361341a565b5090506000612fbc878681518110612f8057612f8061454e565b602002602001015160000151888781518110612f9e57612f9e61454e565b6020026020010151602001518988815181106108595761085961454e565b9050600080600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015613002573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061302691906148c9565b506001600160701b031691506001600160701b031691506000866001600160a01b0316896001600160a01b03161461305e5781613060565b825b6040516370a0823160e01b81526001600160a01b03888116600483015291925082918b16906370a0823190602401602060405180830381865afa1580156130ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130cf9190614647565b6130d9919061457a565b6040516378a051ad60e11b8152600481018290526001600160a01b038b811660248301529196509087169063f140a35a90604401602060405180830381865afa15801561312a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061314e9190614647565b9350505050600080856001600160a01b0316886001600160a01b0316146131775782600061317b565b6000835b91509150600060018c5161318f919061457a565b8a1061319b578a6131fe565b6131fe8c6131aa8c60016147fc565b815181106131ba576131ba61454e565b6020026020010151600001518d8c60016131d491906147fc565b815181106131e4576131e461454e565b6020026020010151602001518e8d6001612e0191906147fc565b6040805160008152602081019182905263022c0d9f60e01b9091529091506001600160a01b0387169063022c0d9f906132409086908690869060248101614885565b600060405180830381600087803b15801561325a57600080fd5b505af115801561326e573d6000803e3d6000fd5b50505050505050505050505050808061328690614814565b915050612f0e565b505050565b604080516000808252602082019092526001600160a01b0384169083906040516132bd919061490e565b60006040518083038185875af1925050503d80600081146132fa576040519150601f19603f3d011682016040523d82523d6000602084013e6132ff565b606091505b505090508061328e5760405162461bcd60e51b815260206004820152601f60248201527f566f6c74526f757465723a204554485f5452414e534645525f4641494c454400604482015260640161022a565b600080600061335f868661341a565b509050600080613370888888612b43565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156133ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133d191906148c9565b506001600160701b031691506001600160701b03169150826001600160a01b0316886001600160a01b03161461340857808261340b565b81815b90999098509650505050505050565b600080826001600160a01b0316846001600160a01b03160361347e5760405162461bcd60e51b815260206004820152601f60248201527f566f6c74526f757465723a204944454e544943414c5f41444452455353455300604482015260640161022a565b826001600160a01b0316846001600160a01b03161061349e5782846134a1565b83835b90925090506001600160a01b038216610d675760405162461bcd60e51b815260206004820152601860248201527f566f6c74526f757465723a205a45524f5f414444524553530000000000000000604482015260640161022a565b60008082428110156135205760405162461bcd60e51b815260040161022a90614521565b6135508a7f00000000000000000000000000000000000000000000000000000000000000008b8b8b8b308b61277c565b6040516370a0823160e01b815230600482015291945092506126eb9086906001600160a01b038d16906370a0823190602401602060405180830381865afa15801561359f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135c39190614647565b6001600160a01b038d1691906139cb565b600080838610156136275760405162461bcd60e51b815260206004820152601c60248201527f566f6c74526f757465723a20444553495245445f415f414d4f554e5400000000604482015260640161022a565b828510156136775760405162461bcd60e51b815260206004820152601c60248201527f566f6c74526f757465723a20444553495245445f425f414d4f554e5400000000604482015260640161022a565b6040516306801cc360e41b81526000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690636801cc30906136ca908d908d908d90600401614660565b602060405180830381865afa1580156136e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061370b9190614684565b90506001600160a01b0381166137b1576040516320b7f73960e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906382dfdce49061376b908d908d908d90600401614660565b6020604051808303816000875af115801561378a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137ae9190614684565b90505b6000806137bf8c8c8c613350565b915091508160001480156137d1575080155b156137e157889450879350613869565b60006137ee8a84846138e8565b905088811161382257868110156138175760405162461bcd60e51b815260040161022a906147bb565b899550935083613867565b600061382f8a84866138e8565b90508a811115613841576138416146ff565b888110156138615760405162461bcd60e51b815260040161022a9061477a565b95508894505b505b50505097509795505050505050565b600060038211156138d957508060006138926002836146c0565b61389d9060016147fc565b90505b818110156138d3579050806002816138b881866146c0565b6138c291906147fc565b6138cc91906146c0565b90506138a0565b50919050565b81156138e3575060015b919050565b60008084116139395760405162461bcd60e51b815260206004820152601f60248201527f566f6c74526f757465723a20494e53554646494349454e545f414d4f554e5400604482015260640161022a565b6000831180156139495750600082115b6139a05760405162461bcd60e51b815260206004820152602260248201527f566f6c74526f757465723a20494e53554646494349454e545f4c495155494449604482015261545960f01b606482015260840161022a565b826139ab83866146a1565b610d4b91906146c0565b60008183106139c45781610d4e565b5090919050565b6040516001600160a01b03831660248201526044810182905261328e90849063a9059cbb60e01b90606401612c7f565b6000613a50826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613acd9092919063ffffffff16565b80519091501561328e5780806020019051810190613a6e91906146e2565b61328e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161022a565b60606001600160a01b0384163b613b265760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161022a565b600080856001600160a01b031685604051613b41919061490e565b6000604051808303816000865af19150503d8060008114613b7e576040519150601f19603f3d011682016040523d82523d6000602084013e613b83565b606091505b5091509150613b93828286613b9d565b9695505050505050565b60608315613bac575081610d4e565b825115613bbc5782518084602001fd5b8160405162461bcd60e51b815260040161022a919061492a565b6001600160a01b0381168114613beb57600080fd5b50565b80356138e381613bd6565b8015158114613beb57600080fd5b600080600080600080600060e0888a031215613c2257600080fd5b8735613c2d81613bd6565b96506020880135613c3d81613bf9565b955060408801359450606088013593506080880135925060a0880135613c6281613bd6565b8092505060c0880135905092959891949750929550565b600080600080600080600080610100898b031215613c9657600080fd5b8835613ca181613bd6565b97506020890135613cb181613bd6565b96506040890135613cc181613bf9565b9550606089013594506080890135935060a0890135925060c0890135613ce681613bd6565b8092505060e089013590509295985092959890939650565b600080600080600080600060e0888a031215613d1957600080fd5b87359650602088013595506040880135613d3281613bd6565b94506060880135613d4281613bd6565b93506080880135613d5281613bf9565b925060a0880135613c6281613bd6565b6020808252825182820181905260009190848201906040850190845b81811015613d9a57835183529284019291840191600101613d7e565b50909695505050505050565b60008083601f840112613db857600080fd5b50813567ffffffffffffffff811115613dd057600080fd5b602083019150836020606083028501011115610d6757600080fd5b60008060008060008060a08789031215613e0457600080fd5b8635955060208701359450604087013567ffffffffffffffff811115613e2957600080fd5b613e3589828a01613da6565b9095509350506060870135613e4981613bd6565b80925050608087013590509295509295509295565b60008060008060808587031215613e7457600080fd5b8435613e7f81613bd6565b93506020850135613e8f81613bd6565b92506040850135613e9f81613bf9565b9396929550929360600135925050565b600080600060608486031215613ec457600080fd5b8335613ecf81613bd6565b92506020840135613edf81613bd6565b91506040840135613eef81613bf9565b809150509250925092565b60008060408385031215613f0d57600080fd5b8235613f1881613bd6565b91506020830135613f2881613bd6565b809150509250929050565b60008060008060008060008060006101208a8c031215613f5257600080fd5b8935613f5d81613bd6565b985060208a0135613f6d81613bd6565b975060408a0135613f7d81613bf9565b965060608a0135955060808a0135945060a08a0135935060c08a0135925060e08a0135613fa981613bd6565b809250506101008a013590509295985092959850929598565b600080600060608486031215613fd757600080fd5b833592506020840135613fe981613bd6565b91506040840135613eef81613bd6565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561403857614038613ff9565b604052919050565b600067ffffffffffffffff82111561405a5761405a613ff9565b5060051b60200190565b60008060008060006080868803121561407c57600080fd5b853567ffffffffffffffff8082111561409457600080fd5b818801915088601f8301126140a857600080fd5b813560206140bd6140b883614040565b61400f565b82815260059290921b8401810191818101908c8411156140dc57600080fd5b948201945b838610156140fa578535825294820194908201906140e1565b9950508901359250508082111561411057600080fd5b5061411d88828901613da6565b9095509350614130905060408701613bee565b949793965091946060013592915050565b60008060008060006080868803121561415957600080fd5b85359450602086013567ffffffffffffffff81111561417757600080fd5b61418388828901613da6565b909550935050604086013561413081613bd6565b6000606082840312156141a957600080fd5b6040516060810181811067ffffffffffffffff821117156141cc576141cc613ff9565b60405290508082356141dd81613bd6565b815260208301356141ed81613bd6565b6020820152604083013561420081613bf9565b6040919091015292915050565b6000806040838503121561422057600080fd5b8235915060208084013567ffffffffffffffff81111561423f57600080fd5b8401601f8101861361425057600080fd5b803561425e6140b882614040565b8181526060918202830184019184820191908984111561427d57600080fd5b938501935b838510156142a3576142948a86614197565b83529384019391850191614282565b5080955050505050509250929050565b600080600080600060a086880312156142cb57600080fd5b85356142d681613bd6565b945060208601356142e681613bd6565b935060408601356142f681613bf9565b94979396509394606081013594506080013592915050565b803560ff811681146138e357600080fd5b6000806000806000806000806000806000806101808d8f03121561434257600080fd5b8c3561434d81613bd6565b9b5060208d013561435d81613bd6565b9a5060408d013561436d81613bf9565b995060608d0135985060808d0135975060a08d0135965060c08d013561439281613bd6565b955060e08d013594506101008d01356143aa81613bf9565b93506143b96101208e0161430e565b92506101408d013591506101608d013590509295989b509295989b509295989b565b6000806000606084860312156143f057600080fd5b505081359360208301359350604090920135919050565b6000806000806080858703121561441d57600080fd5b84359350602085013561442f81613bd6565b9250604085013561443f81613bd6565b9150606085013561444f81613bf9565b939692955090935050565b60006020828403121561446c57600080fd5b8135610d4e81613bd6565b60008060008060008060008060008060006101608c8e03121561449957600080fd5b8b356144a481613bd6565b9a5060208c01356144b481613bf9565b995060408c0135985060608c0135975060808c0135965060a08c01356144d981613bd6565b955060c08c0135945060e08c01356144f081613bf9565b93506144ff6101008d0161430e565b92506101208c013591506101408c013590509295989b509295989b9093969950565b602080825260139082015272159bdb1d149bdd5d195c8e8811561412549151606a1b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008282101561458c5761458c614564565b500390565b60208082526026908201527f566f6c74526f757465723a20494e53554646494349454e545f4f55545055545f604082015265105353d5539560d21b606082015260800190565b60208082526018908201527f566f6c74526f757465723a20494e56414c49445f504154480000000000000000604082015260600190565b60006020828403121561462057600080fd5b8135610d4e81613bf9565b60006060828403121561463d57600080fd5b610d4e8383614197565b60006020828403121561465957600080fd5b5051919050565b6001600160a01b039384168152919092166020820152901515604082015260600190565b60006020828403121561469657600080fd5b8151610d4e81613bd6565b60008160001904831182151516156146bb576146bb614564565b500290565b6000826146dd57634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156146f457600080fd5b8151610d4e81613bf9565b634e487b7160e01b600052600160045260246000fd5b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b6000806040838503121561476957600080fd5b505080516020909101519092909150565b60208082526021908201527f566f6c74526f757465723a20494e53554646494349454e545f415f414d4f554e6040820152601560fa1b606082015260800190565b60208082526021908201527f566f6c74526f757465723a20494e53554646494349454e545f425f414d4f554e6040820152601560fa1b606082015260800190565b6000821982111561480f5761480f614564565b500190565b60006001820161482657614826614564565b5060010190565b60005b83811015614848578181015183820152602001614830565b83811115612cb65750506000910152565b6000815180845261487181602086016020860161482d565b601f01601f19169290920160200192915050565b84815283602082015260018060a01b0383166040820152608060608201526000613b936080830184614859565b80516001600160701b03811681146138e357600080fd5b6000806000606084860312156148de57600080fd5b6148e7846148b2565b92506148f5602085016148b2565b9150604084015163ffffffff81168114613eef57600080fd5b6000825161492081846020870161482d565b9190910192915050565b602081526000610d4e602083018461485956fea2646970667358221220f253dd8aede7a6e9c0480314fc27fc99103674be22b59c1bba8ed8de2fabb18864736f6c634300080d0033",
  "deployedBytecode": "0x6080604052600436106101ba5760003560e01c80637997bc10116100ec578063b56451831161008a578063e5e31b1311610064578063e5e31b13146105d8578063f24ee0c614610608578063f41766d814610628578063f5274d201461064857600080fd5b8063b564518314610571578063b6710cb914610584578063c45a0155146105a457600080fd5b806398a0fb3c116100c657806398a0fb3c146104f0578063a32b1fcd14610510578063ab0d5d8414610530578063ae5688681461054357600080fd5b80637997bc101461049d578063839a089c146104b05780639881fcb4146104d057600080fd5b806357e044d2116101595780635e60dab5116101335780635e60dab514610409578063688475c7146104295780636cc1ae131461045d5780637301e3c81461047d57600080fd5b806357e044d2146103795780635a47ddc3146103995780635e1e6325146103d457600080fd5b80633ee045cc116101955780633ee045cc146102c15780634386e63c146102e15780634c1ee03e14610301578063544caa561461033957600080fd5b8062cfffca1461023a5780630dede6c41461027457806313dcfc591461029457600080fd5b3661023557336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146102335760405162461bcd60e51b81526020600482015260146024820152732b37b63a2937baba32b91d102727aa2faba6aa2960611b60448201526064015b60405180910390fd5b005b600080fd5b34801561024657600080fd5b5061025a610255366004613c07565b610668565b604080519283526020830191909152015b60405180910390f35b34801561028057600080fd5b5061025a61028f366004613c79565b61068a565b3480156102a057600080fd5b506102b46102af366004613cfe565b6106ae565b60405161026b9190613d62565b3480156102cd57600080fd5b506102336102dc366004613deb565b6108d5565b3480156102ed57600080fd5b5061025a6102fc366004613e5e565b610bd7565b34801561030d57600080fd5b5061032161031c366004613eaf565b610d3e565b6040516001600160a01b03909116815260200161026b565b34801561034557600080fd5b50610359610354366004613efa565b610d55565b604080516001600160a01b0393841681529290911660208301520161026b565b34801561038557600080fd5b5061025a610394366004613c07565b610d6e565b3480156103a557600080fd5b506103b96103b4366004613f33565b610d80565b6040805193845260208401929092529082015260600161026b565b3480156103e057600080fd5b506103f46103ef366004613fc2565b610e60565b6040805192835290151560208301520161026b565b34801561041557600080fd5b5061025a610424366004613eaf565b6110b4565b34801561043557600080fd5b506103217f000000000000000000000000000000000000000000000000000000000000000081565b34801561046957600080fd5b50610233610478366004613deb565b6110ce565b34801561048957600080fd5b506102b4610498366004614064565b6112d4565b6102b46104ab366004614141565b6113fe565b3480156104bc57600080fd5b506102b46104cb366004613deb565b6116fe565b3480156104dc57600080fd5b506102b46104eb36600461420d565b6119aa565b3480156104fc57600080fd5b506103b961050b3660046142b3565b6119b6565b34801561051c57600080fd5b5061025a61052b36600461431f565b611bb6565b61023361053e366004614141565b611c71565b34801561054f57600080fd5b5061056361055e3660046143db565b611fac565b60405190815260200161026b565b6103b961057f366004613c07565b611fb9565b34801561059057600080fd5b5061056361059f366004614407565b612203565b3480156105b057600080fd5b506103217f000000000000000000000000000000000000000000000000000000000000000081565b3480156105e457600080fd5b506105f86105f336600461445a565b61232c565b604051901515815260200161026b565b34801561061457600080fd5b5061025a610623366004614477565b6123c1565b34801561063457600080fd5b506102b4610643366004613deb565b61249a565b34801561065457600080fd5b5061025a610663366004614477565b6125c3565b60008061067a8989898989898961267e565b9150915097509795505050505050565b60008061069d8a8a8a8a8a8a8a8a61277c565b915091509850989650505050505050565b606081428110156106d15760405162461bcd60e51b815260040161022a90614521565b604080516001808252818301909252600091816020015b60408051606081018252600080825260208083018290529282015282526000199092019101816106e8579050509050878160008151811061072b5761072b61454e565b6020026020010151600001906001600160a01b031690816001600160a01b03168152505086816000815181106107635761076361454e565b6020026020010151602001906001600160a01b031690816001600160a01b031681525050858160008151811061079b5761079b61454e565b60209081029190910101519015156040909101526107b98a826128c1565b92508883600185516107cb919061457a565b815181106107db576107db61454e565b602002602001015110156108015760405162461bcd60e51b815260040161022a90614591565b6108bd3361086a8360008151811061081b5761081b61454e565b6020026020010151600001518460008151811061083a5761083a61454e565b602002602001015160200151856000815181106108595761085961454e565b602002602001015160400151612b43565b8560008151811061087d5761087d61454e565b6020026020010151846000815181106108985761089861454e565b6020026020010151600001516001600160a01b0316612c4b909392919063ffffffff16565b6108c8838287612cbc565b5050979650505050505050565b80428110156108f65760405162461bcd60e51b815260040161022a90614521565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016858561092d60018261457a565b81811061093c5761093c61454e565b9050606002016020016020810190610954919061445a565b6001600160a01b03161461097a5760405162461bcd60e51b815260040161022a906145d7565b610a4033610a05878760008181106109945761099461454e565b6109aa926020606090920201908101915061445a565b888860008181106109bd576109bd61454e565b90506060020160200160208101906109d5919061445a565b898960008181106109e8576109e861454e565b9050606002016040016020810190610a00919061460e565b612b43565b8988886000818110610a1957610a1961454e565b610a2f926020606090920201908101915061445a565b6001600160a01b0316929190612c4b565b610a9c8585808060200260200160405190810160405280939291908181526020016000905b82821015610a9157610a826060830286013681900381019061462b565b81526020019060010190610a65565b505050505030612f0b565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610b03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b279190614647565b905086811015610b495760405162461bcd60e51b815260040161022a90614591565b604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b158015610bab57600080fd5b505af1158015610bbf573d6000803e3d6000fd5b50505050610bcd8482613293565b5050505050505050565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636801cc308888886040518463ffffffff1660e01b8152600401610c2c93929190614660565b602060405180830381865afa158015610c49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6d9190614684565b90506001600160a01b038116610c8a576000809250925050610d35565b600080610c98898989613350565b915091506000836001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cdc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d009190614647565b905080610d0d84896146a1565b610d1791906146c0565b955080610d2483896146a1565b610d2e91906146c0565b9450505050505b94509492505050565b6000610d4b848484612b43565b90505b9392505050565b600080610d62848461341a565b915091505b9250929050565b60008061067a898989898989896134fc565b60008060008342811015610da65760405162461bcd60e51b815260040161022a90614521565b610db58d8d8d8d8d8d8d6135d4565b90945092506000610dc78e8e8e612b43565b9050610dd58e338388612c4b565b610de18d338387612c4b565b6040516335313c2160e11b81526001600160a01b038881166004830152821690636a627842906024016020604051808303816000875af1158015610e29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4d9190614647565b9250505099509950999650505050505050565b6000806000610e7185856001612b43565b60405163e5e31b1360e01b81526001600160a01b03828116600483015291925060009182917f00000000000000000000000000000000000000000000000000000000000000009091169063e5e31b1390602401602060405180830381865afa158015610ee1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0591906146e2565b15610f7e576040516378a051ad60e11b8152600481018990526001600160a01b03888116602483015284169063f140a35a90604401602060405180830381865afa158015610f57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7b9190614647565b91505b610f8a87876000612b43565b60405163e5e31b1360e01b81526001600160a01b0380831660048301529194507f00000000000000000000000000000000000000000000000000000000000000009091169063e5e31b1390602401602060405180830381865afa158015610ff5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101991906146e2565b15611092576040516378a051ad60e11b8152600481018990526001600160a01b03888116602483015284169063f140a35a90604401602060405180830381865afa15801561106b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108f9190614647565b90505b8082116110a1578060006110a5565b8160015b94509450505050935093915050565b6000806110c2858585613350565b91509150935093915050565b80428110156110ef5760405162461bcd60e51b815260040161022a90614521565b61110933610a05878760008181106109945761099461454e565b6000858561111860018261457a565b8181106111275761112761454e565b905060600201602001602081019061113f919061445a565b6040516370a0823160e01b81526001600160a01b03868116600483015291909116906370a0823190602401602060405180830381865afa158015611187573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ab9190614647565b90506112098686808060200260200160405190810160405280939291908181526020016000905b828210156111fe576111ef6060830286013681900381019061462b565b815260200190600101906111d2565b505050505085612f0b565b8681878761121860018261457a565b8181106112275761122761454e565b905060600201602001602081019061123f919061445a565b6040516370a0823160e01b81526001600160a01b03888116600483015291909116906370a08231906024015b602060405180830381865afa158015611288573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ac9190614647565b6112b6919061457a565b1015610bcd5760405162461bcd60e51b815260040161022a90614591565b606081428110156112f75760405162461bcd60e51b815260040161022a90614521565b61139333611365888860008181106113115761131161454e565b611327926020606090920201908101915061445a565b8989600081811061133a5761133a61454e565b9050606002016020016020810190611352919061445a565b8a8a60008181106109e8576109e861454e565b896000815181106113785761137861454e565b602002602001015189896000818110610a1957610a1961454e565b6113f0878787808060200260200160405190810160405280939291908181526020016000905b828210156113e5576113d66060830286013681900381019061462b565b815260200190600101906113b9565b505050505086612cbc565b8691505b5095945050505050565b606081428110156114215760405162461bcd60e51b815260040161022a90614521565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168686600081811061145e5761145e61454e565b611474926020606090920201908101915061445a565b6001600160a01b03161461149a5760405162461bcd60e51b815260040161022a906145d7565b6114f6348787808060200260200160405190810160405280939291908181526020016000905b828210156114ec576114dd6060830286013681900381019061462b565b815260200190600101906114c0565b50505050506128c1565b9150868260018451611508919061457a565b815181106115185761151861454e565b6020026020010151101561153e5760405162461bcd60e51b815260040161022a90614591565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0836000815181106115805761158061454e565b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b1580156115b357600080fd5b505af11580156115c7573d6000803e3d6000fd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb611611888860008181106113115761131161454e565b846000815181106116245761162461454e565b60200260200101516040518363ffffffff1660e01b815260040161165d9291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af115801561167c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a091906146e2565b6116ac576116ac6146ff565b6113f4828787808060200260200160405190810160405280939291908181526020016000905b828210156113e5576116ef6060830286013681900381019061462b565b815260200190600101906116d2565b606081428110156117215760405162461bcd60e51b815260040161022a90614521565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016868661175860018261457a565b8181106117675761176761454e565b905060600201602001602081019061177f919061445a565b6001600160a01b0316146117a55760405162461bcd60e51b815260040161022a906145d7565b6117f7888787808060200260200160405190810160405280939291908181526020016000905b828210156114ec576117e86060830286013681900381019061462b565b815260200190600101906117cb565b9150868260018451611809919061457a565b815181106118195761181961454e565b6020026020010151101561183f5760405162461bcd60e51b815260040161022a90614591565b61186c33611859888860008181106113115761131161454e565b846000815181106113785761137861454e565b6118c9828787808060200260200160405190810160405280939291908181526020016000905b828210156118be576118af6060830286013681900381019061462b565b81526020019060010190611892565b505050505030612cbc565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632e1a7d4d8360018551611907919061457a565b815181106119175761191761454e565b60200260200101516040518263ffffffff1660e01b815260040161193d91815260200190565b600060405180830381600087803b15801561195757600080fd5b505af115801561196b573d6000803e3d6000fd5b5050505061199f848360018551611982919061457a565b815181106119925761199261454e565b6020026020010151613293565b509695505050505050565b6060610d4e83836128c1565b6000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636801cc308a8a8a6040518463ffffffff1660e01b8152600401611a0c93929190614660565b602060405180830381865afa158015611a29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4d9190614684565b9050600080806001600160a01b03841615611ad757836001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611aa0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac49190614647565b9050611ad18c8c8c613350565b90935091505b82158015611ae3575081155b15611b14578896508795506103e8611b03611afe888a6146a1565b613878565b611b0d919061457a565b9450611ba7565b6000611b218a85856138e8565b9050888111611b6957899750955085611b6284611b3e848b6146a1565b611b4891906146c0565b84611b53858b6146a1565b611b5d91906146c0565b6139b5565b9550611ba5565b6000611b768a85876138e8565b9850899750889050611ba185611b8c85846146a1565b611b9691906146c0565b85611b53868c6146a1565b9650505b505b50505050955095509592505050565b6000806000611bc68f8f8f612b43565b9050600087611bd5578c611bd9565b6000195b60405163d505accf60e01b81529091506001600160a01b0383169063d505accf90611c14903390309086908f908e908e908e90600401614715565b600060405180830381600087803b158015611c2e57600080fd5b505af1158015611c42573d6000803e3d6000fd5b5050505050611c578f8f8f8f8f8f8f8f61277c565b8093508194505050509c509c9a5050505050505050505050565b8042811015611c925760405162461bcd60e51b815260040161022a90614521565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031685856000818110611ccf57611ccf61454e565b611ce5926020606090920201908101915061445a565b6001600160a01b031614611d0b5760405162461bcd60e51b815260040161022a906145d7565b60003490507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015611d6b57600080fd5b505af1158015611d7f573d6000803e3d6000fd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb611dc9888860008181106113115761131161454e565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044016020604051808303816000875af1158015611e16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e3a91906146e2565b611e4657611e466146ff565b60008686611e5560018261457a565b818110611e6457611e6461454e565b9050606002016020016020810190611e7c919061445a565b6040516370a0823160e01b81526001600160a01b03878116600483015291909116906370a0823190602401602060405180830381865afa158015611ec4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee89190614647565b9050611f468787808060200260200160405190810160405280939291908181526020016000905b82821015611f3b57611f2c6060830286013681900381019061462b565b81526020019060010190611f0f565b505050505086612f0b565b87818888611f5560018261457a565b818110611f6457611f6461454e565b9050606002016020016020810190611f7c919061445a565b6040516370a0823160e01b81526001600160a01b03898116600483015291909116906370a082319060240161126b565b6000610d4b8484846138e8565b60008060008342811015611fdf5760405162461bcd60e51b815260040161022a90614521565b61200e8b7f00000000000000000000000000000000000000000000000000000000000000008c8c348d8d6135d4565b909450925060006120408c7f00000000000000000000000000000000000000000000000000000000000000008d612b43565b90506120576001600160a01b038d16338388612c4b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0856040518263ffffffff1660e01b81526004016000604051808303818588803b1580156120b257600080fd5b505af11580156120c6573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038581166004830152602482018990527f000000000000000000000000000000000000000000000000000000000000000016935063a9059cbb925060440190506020604051808303816000875af115801561213b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061215f91906146e2565b61216b5761216b6146ff565b6040516335313c2160e11b81526001600160a01b038881166004830152821690636a627842906024016020604051808303816000875af11580156121b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121d79190614647565b9250833411156121f4576121f4336121ef863461457a565b613293565b50509750975097945050505050565b600080612211858585612b43565b60405163e5e31b1360e01b81526001600160a01b0380831660048301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063e5e31b1390602401602060405180830381865afa15801561227c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122a091906146e2565b1561231e576040516378a051ad60e11b8152600481018790526001600160a01b03868116602483015282169063f140a35a90604401602060405180830381865afa1580156122f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123169190614647565b915050612324565b60009150505b949350505050565b60405163e5e31b1360e01b81526001600160a01b0382811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063e5e31b1390602401602060405180830381865afa158015612397573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123bb91906146e2565b92915050565b60008060006123f18e7f00000000000000000000000000000000000000000000000000000000000000008f612b43565b9050600087612400578c612404565b6000195b60405163d505accf60e01b81529091506001600160a01b0383169063d505accf9061243f903390309086908f908e908e908e90600401614715565b600060405180830381600087803b15801561245957600080fd5b505af115801561246d573d6000803e3d6000fd5b505050506124808f8f8f8f8f8f8f6134fc565b809450819550505050509b509b9950505050505050505050565b606081428110156124bd5760405162461bcd60e51b815260040161022a90614521565b61250f888787808060200260200160405190810160405280939291908181526020016000905b828210156114ec576125006060830286013681900381019061462b565b815260200190600101906124e3565b9150868260018451612521919061457a565b815181106125315761253161454e565b602002602001015110156125575760405162461bcd60e51b815260040161022a90614591565b61257133611859888860008181106113115761131161454e565b61199f828787808060200260200160405190810160405280939291908181526020016000905b828210156113e5576125b46060830286013681900381019061462b565b81526020019060010190612597565b60008060006125f38e7f00000000000000000000000000000000000000000000000000000000000000008f612b43565b9050600087612602578c612606565b6000195b60405163d505accf60e01b81529091506001600160a01b0383169063d505accf90612641903390309086908f908e908e908e90600401614715565b600060405180830381600087803b15801561265b57600080fd5b505af115801561266f573d6000803e3d6000fd5b505050506124808f8f8f8f8f8f8f5b60008082428110156126a25760405162461bcd60e51b815260040161022a90614521565b6126d28a7f00000000000000000000000000000000000000000000000000000000000000008b8b8b8b308b61277c565b90935091506126eb6001600160a01b038b1686856139cb565b604051632e1a7d4d60e01b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561274d57600080fd5b505af1158015612761573d6000803e3d6000fd5b5050505061276f8583613293565b5097509795505050505050565b60008082428110156127a05760405162461bcd60e51b815260040161022a90614521565b60006127ad8c8c8c612b43565b90506127c46001600160a01b03821633838c612c4b565b60405163226bf2d160e21b81526001600160a01b03878116600483015260009182918416906389afcb449060240160408051808303816000875af1158015612810573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128349190614756565b9150915060006128448f8f61341a565b509050806001600160a01b03168f6001600160a01b03161461286757818361286a565b82825b90975095508a87101561288f5760405162461bcd60e51b815260040161022a9061477a565b898610156128af5760405162461bcd60e51b815260040161022a906147bb565b50505050509850989650505050505050565b60606001825110156128e55760405162461bcd60e51b815260040161022a906145d7565b81516128f29060016147fc565b67ffffffffffffffff81111561290a5761290a613ff9565b604051908082528060200260200182016040528015612933578160200160208202803683370190505b509050828160008151811061294a5761294a61454e565b60200260200101818152505060005b8251811015612b3c5760006129b58483815181106129795761297961454e565b6020026020010151600001518584815181106129975761299761454e565b6020026020010151602001518685815181106108595761085961454e565b60405163e5e31b1360e01b81526001600160a01b0380831660048301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063e5e31b1390602401602060405180830381865afa158015612a20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a4491906146e2565b15612b2957806001600160a01b031663f140a35a848481518110612a6a57612a6a61454e565b6020026020010151868581518110612a8457612a8461454e565b6020026020010151600001516040518363ffffffff1660e01b8152600401612abf9291909182526001600160a01b0316602082015260400190565b602060405180830381865afa158015612adc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b009190614647565b83612b0c8460016147fc565b81518110612b1c57612b1c61454e565b6020026020010181815250505b5080612b3481614814565b915050612959565b5092915050565b6000806000612b52868661341a565b6040516bffffffffffffffffffffffff19606084811b8216602084015283901b16603482015286151560f81b604882015291935091507f000000000000000000000000000000000000000000000000000000000000000090604901604051602081830303815290604052805190602001207f0000000000000000000000000000000000000000000000000000000000000000604051602001612c29939291906001600160f81b0319815260609390931b6bffffffffffffffffffffffff191660018401526015830191909152603582015260550190565b60408051601f1981840301815291905280516020909101209695505050505050565b6040516001600160a01b0380851660248301528316604482015260648101829052612cb69085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526139fb565b50505050565b60005b8251811015612cb6576000612d0e848381518110612cdf57612cdf61454e565b602002602001015160000151858481518110612cfd57612cfd61454e565b60200260200101516020015161341a565b509050600085612d1f8460016147fc565b81518110612d2f57612d2f61454e565b60200260200101519050600080836001600160a01b0316878681518110612d5857612d5861454e565b6020026020010151600001516001600160a01b031614612d7a57826000612d7e565b6000835b91509150600060018851612d92919061457a565b8610612d9e5786612e11565b612e1188612dad8860016147fc565b81518110612dbd57612dbd61454e565b60200260200101516000015189886001612dd791906147fc565b81518110612de757612de761454e565b6020026020010151602001518a896001612e0191906147fc565b815181106108595761085961454e565b9050612e64888781518110612e2857612e2861454e565b602002602001015160000151898881518110612e4657612e4661454e565b6020026020010151602001518a89815181106108595761085961454e565b6001600160a01b031663022c0d9f84848460006040519080825280601f01601f191660200182016040528015612ea1576020820181803683370190505b506040518563ffffffff1660e01b8152600401612ec19493929190614885565b600060405180830381600087803b158015612edb57600080fd5b505af1158015612eef573d6000803e3d6000fd5b5050505050505050508080612f0390614814565b915050612cbf565b60005b825181101561328e57600080848381518110612f2c57612f2c61454e565b602002602001015160000151858481518110612f4a57612f4a61454e565b602002602001015160200151915091506000612f66838361341a565b5090506000612fbc878681518110612f8057612f8061454e565b602002602001015160000151888781518110612f9e57612f9e61454e565b6020026020010151602001518988815181106108595761085961454e565b9050600080600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015613002573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061302691906148c9565b506001600160701b031691506001600160701b031691506000866001600160a01b0316896001600160a01b03161461305e5781613060565b825b6040516370a0823160e01b81526001600160a01b03888116600483015291925082918b16906370a0823190602401602060405180830381865afa1580156130ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130cf9190614647565b6130d9919061457a565b6040516378a051ad60e11b8152600481018290526001600160a01b038b811660248301529196509087169063f140a35a90604401602060405180830381865afa15801561312a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061314e9190614647565b9350505050600080856001600160a01b0316886001600160a01b0316146131775782600061317b565b6000835b91509150600060018c5161318f919061457a565b8a1061319b578a6131fe565b6131fe8c6131aa8c60016147fc565b815181106131ba576131ba61454e565b6020026020010151600001518d8c60016131d491906147fc565b815181106131e4576131e461454e565b6020026020010151602001518e8d6001612e0191906147fc565b6040805160008152602081019182905263022c0d9f60e01b9091529091506001600160a01b0387169063022c0d9f906132409086908690869060248101614885565b600060405180830381600087803b15801561325a57600080fd5b505af115801561326e573d6000803e3d6000fd5b50505050505050505050505050808061328690614814565b915050612f0e565b505050565b604080516000808252602082019092526001600160a01b0384169083906040516132bd919061490e565b60006040518083038185875af1925050503d80600081146132fa576040519150601f19603f3d011682016040523d82523d6000602084013e6132ff565b606091505b505090508061328e5760405162461bcd60e51b815260206004820152601f60248201527f566f6c74526f757465723a204554485f5452414e534645525f4641494c454400604482015260640161022a565b600080600061335f868661341a565b509050600080613370888888612b43565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156133ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133d191906148c9565b506001600160701b031691506001600160701b03169150826001600160a01b0316886001600160a01b03161461340857808261340b565b81815b90999098509650505050505050565b600080826001600160a01b0316846001600160a01b03160361347e5760405162461bcd60e51b815260206004820152601f60248201527f566f6c74526f757465723a204944454e544943414c5f41444452455353455300604482015260640161022a565b826001600160a01b0316846001600160a01b03161061349e5782846134a1565b83835b90925090506001600160a01b038216610d675760405162461bcd60e51b815260206004820152601860248201527f566f6c74526f757465723a205a45524f5f414444524553530000000000000000604482015260640161022a565b60008082428110156135205760405162461bcd60e51b815260040161022a90614521565b6135508a7f00000000000000000000000000000000000000000000000000000000000000008b8b8b8b308b61277c565b6040516370a0823160e01b815230600482015291945092506126eb9086906001600160a01b038d16906370a0823190602401602060405180830381865afa15801561359f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135c39190614647565b6001600160a01b038d1691906139cb565b600080838610156136275760405162461bcd60e51b815260206004820152601c60248201527f566f6c74526f757465723a20444553495245445f415f414d4f554e5400000000604482015260640161022a565b828510156136775760405162461bcd60e51b815260206004820152601c60248201527f566f6c74526f757465723a20444553495245445f425f414d4f554e5400000000604482015260640161022a565b6040516306801cc360e41b81526000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690636801cc30906136ca908d908d908d90600401614660565b602060405180830381865afa1580156136e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061370b9190614684565b90506001600160a01b0381166137b1576040516320b7f73960e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906382dfdce49061376b908d908d908d90600401614660565b6020604051808303816000875af115801561378a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137ae9190614684565b90505b6000806137bf8c8c8c613350565b915091508160001480156137d1575080155b156137e157889450879350613869565b60006137ee8a84846138e8565b905088811161382257868110156138175760405162461bcd60e51b815260040161022a906147bb565b899550935083613867565b600061382f8a84866138e8565b90508a811115613841576138416146ff565b888110156138615760405162461bcd60e51b815260040161022a9061477a565b95508894505b505b50505097509795505050505050565b600060038211156138d957508060006138926002836146c0565b61389d9060016147fc565b90505b818110156138d3579050806002816138b881866146c0565b6138c291906147fc565b6138cc91906146c0565b90506138a0565b50919050565b81156138e3575060015b919050565b60008084116139395760405162461bcd60e51b815260206004820152601f60248201527f566f6c74526f757465723a20494e53554646494349454e545f414d4f554e5400604482015260640161022a565b6000831180156139495750600082115b6139a05760405162461bcd60e51b815260206004820152602260248201527f566f6c74526f757465723a20494e53554646494349454e545f4c495155494449604482015261545960f01b606482015260840161022a565b826139ab83866146a1565b610d4b91906146c0565b60008183106139c45781610d4e565b5090919050565b6040516001600160a01b03831660248201526044810182905261328e90849063a9059cbb60e01b90606401612c7f565b6000613a50826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613acd9092919063ffffffff16565b80519091501561328e5780806020019051810190613a6e91906146e2565b61328e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161022a565b60606001600160a01b0384163b613b265760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161022a565b600080856001600160a01b031685604051613b41919061490e565b6000604051808303816000865af19150503d8060008114613b7e576040519150601f19603f3d011682016040523d82523d6000602084013e613b83565b606091505b5091509150613b93828286613b9d565b9695505050505050565b60608315613bac575081610d4e565b825115613bbc5782518084602001fd5b8160405162461bcd60e51b815260040161022a919061492a565b6001600160a01b0381168114613beb57600080fd5b50565b80356138e381613bd6565b8015158114613beb57600080fd5b600080600080600080600060e0888a031215613c2257600080fd5b8735613c2d81613bd6565b96506020880135613c3d81613bf9565b955060408801359450606088013593506080880135925060a0880135613c6281613bd6565b8092505060c0880135905092959891949750929550565b600080600080600080600080610100898b031215613c9657600080fd5b8835613ca181613bd6565b97506020890135613cb181613bd6565b96506040890135613cc181613bf9565b9550606089013594506080890135935060a0890135925060c0890135613ce681613bd6565b8092505060e089013590509295985092959890939650565b600080600080600080600060e0888a031215613d1957600080fd5b87359650602088013595506040880135613d3281613bd6565b94506060880135613d4281613bd6565b93506080880135613d5281613bf9565b925060a0880135613c6281613bd6565b6020808252825182820181905260009190848201906040850190845b81811015613d9a57835183529284019291840191600101613d7e565b50909695505050505050565b60008083601f840112613db857600080fd5b50813567ffffffffffffffff811115613dd057600080fd5b602083019150836020606083028501011115610d6757600080fd5b60008060008060008060a08789031215613e0457600080fd5b8635955060208701359450604087013567ffffffffffffffff811115613e2957600080fd5b613e3589828a01613da6565b9095509350506060870135613e4981613bd6565b80925050608087013590509295509295509295565b60008060008060808587031215613e7457600080fd5b8435613e7f81613bd6565b93506020850135613e8f81613bd6565b92506040850135613e9f81613bf9565b9396929550929360600135925050565b600080600060608486031215613ec457600080fd5b8335613ecf81613bd6565b92506020840135613edf81613bd6565b91506040840135613eef81613bf9565b809150509250925092565b60008060408385031215613f0d57600080fd5b8235613f1881613bd6565b91506020830135613f2881613bd6565b809150509250929050565b60008060008060008060008060006101208a8c031215613f5257600080fd5b8935613f5d81613bd6565b985060208a0135613f6d81613bd6565b975060408a0135613f7d81613bf9565b965060608a0135955060808a0135945060a08a0135935060c08a0135925060e08a0135613fa981613bd6565b809250506101008a013590509295985092959850929598565b600080600060608486031215613fd757600080fd5b833592506020840135613fe981613bd6565b91506040840135613eef81613bd6565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561403857614038613ff9565b604052919050565b600067ffffffffffffffff82111561405a5761405a613ff9565b5060051b60200190565b60008060008060006080868803121561407c57600080fd5b853567ffffffffffffffff8082111561409457600080fd5b818801915088601f8301126140a857600080fd5b813560206140bd6140b883614040565b61400f565b82815260059290921b8401810191818101908c8411156140dc57600080fd5b948201945b838610156140fa578535825294820194908201906140e1565b9950508901359250508082111561411057600080fd5b5061411d88828901613da6565b9095509350614130905060408701613bee565b949793965091946060013592915050565b60008060008060006080868803121561415957600080fd5b85359450602086013567ffffffffffffffff81111561417757600080fd5b61418388828901613da6565b909550935050604086013561413081613bd6565b6000606082840312156141a957600080fd5b6040516060810181811067ffffffffffffffff821117156141cc576141cc613ff9565b60405290508082356141dd81613bd6565b815260208301356141ed81613bd6565b6020820152604083013561420081613bf9565b6040919091015292915050565b6000806040838503121561422057600080fd5b8235915060208084013567ffffffffffffffff81111561423f57600080fd5b8401601f8101861361425057600080fd5b803561425e6140b882614040565b8181526060918202830184019184820191908984111561427d57600080fd5b938501935b838510156142a3576142948a86614197565b83529384019391850191614282565b5080955050505050509250929050565b600080600080600060a086880312156142cb57600080fd5b85356142d681613bd6565b945060208601356142e681613bd6565b935060408601356142f681613bf9565b94979396509394606081013594506080013592915050565b803560ff811681146138e357600080fd5b6000806000806000806000806000806000806101808d8f03121561434257600080fd5b8c3561434d81613bd6565b9b5060208d013561435d81613bd6565b9a5060408d013561436d81613bf9565b995060608d0135985060808d0135975060a08d0135965060c08d013561439281613bd6565b955060e08d013594506101008d01356143aa81613bf9565b93506143b96101208e0161430e565b92506101408d013591506101608d013590509295989b509295989b509295989b565b6000806000606084860312156143f057600080fd5b505081359360208301359350604090920135919050565b6000806000806080858703121561441d57600080fd5b84359350602085013561442f81613bd6565b9250604085013561443f81613bd6565b9150606085013561444f81613bf9565b939692955090935050565b60006020828403121561446c57600080fd5b8135610d4e81613bd6565b60008060008060008060008060008060006101608c8e03121561449957600080fd5b8b356144a481613bd6565b9a5060208c01356144b481613bf9565b995060408c0135985060608c0135975060808c0135965060a08c01356144d981613bd6565b955060c08c0135945060e08c01356144f081613bf9565b93506144ff6101008d0161430e565b92506101208c013591506101408c013590509295989b509295989b9093969950565b602080825260139082015272159bdb1d149bdd5d195c8e8811561412549151606a1b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008282101561458c5761458c614564565b500390565b60208082526026908201527f566f6c74526f757465723a20494e53554646494349454e545f4f55545055545f604082015265105353d5539560d21b606082015260800190565b60208082526018908201527f566f6c74526f757465723a20494e56414c49445f504154480000000000000000604082015260600190565b60006020828403121561462057600080fd5b8135610d4e81613bf9565b60006060828403121561463d57600080fd5b610d4e8383614197565b60006020828403121561465957600080fd5b5051919050565b6001600160a01b039384168152919092166020820152901515604082015260600190565b60006020828403121561469657600080fd5b8151610d4e81613bd6565b60008160001904831182151516156146bb576146bb614564565b500290565b6000826146dd57634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156146f457600080fd5b8151610d4e81613bf9565b634e487b7160e01b600052600160045260246000fd5b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b6000806040838503121561476957600080fd5b505080516020909101519092909150565b60208082526021908201527f566f6c74526f757465723a20494e53554646494349454e545f415f414d4f554e6040820152601560fa1b606082015260800190565b60208082526021908201527f566f6c74526f757465723a20494e53554646494349454e545f425f414d4f554e6040820152601560fa1b606082015260800190565b6000821982111561480f5761480f614564565b500190565b60006001820161482657614826614564565b5060010190565b60005b83811015614848578181015183820152602001614830565b83811115612cb65750506000910152565b6000815180845261487181602086016020860161482d565b601f01601f19169290920160200192915050565b84815283602082015260018060a01b0383166040820152608060608201526000613b936080830184614859565b80516001600160701b03811681146138e357600080fd5b6000806000606084860312156148de57600080fd5b6148e7846148b2565b92506148f5602085016148b2565b9150604084015163ffffffff81168114613eef57600080fd5b6000825161492081846020870161482d565b9190910192915050565b602081526000610d4e602083018461485956fea2646970667358221220f253dd8aede7a6e9c0480314fc27fc99103674be22b59c1bba8ed8de2fabb18864736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getAmountOut(uint256,address,address)": {
        "details": "Performs chained getAmountOut calculations on any number of pairs."
      },
      "getAmountsOut(uint256,(address,address,bool)[])": {
        "details": "Performs chained getAmountOut calculations on any number of pairs."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}