{
  "address": "0xD35C3fCC6e10052a08aB20F922Aa5A1B7B18D74B",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "stable",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allPairsLength",
          "type": "uint256"
        }
      ],
      "name": "PairCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptPauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allPairsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "stable",
          "type": "bool"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInitializable",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isPair",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairCodeHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauser",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingPauser",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_state",
          "type": "bool"
        }
      ],
      "name": "setPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pauser",
          "type": "address"
        }
      ],
      "name": "setPauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0135488551f5b510e98a9cfd821ed94847d85083e9001604ff4a4a503864fbf5",
  "receipt": {
    "to": null,
    "from": "0x0070dF68e2C13df22F55324edd56f2075eB6b8bB",
    "contractAddress": "0xD35C3fCC6e10052a08aB20F922Aa5A1B7B18D74B",
    "transactionIndex": 7,
    "gasUsed": "4917369",
    "logsBloom": "0x
    "blockHash": "0xcfe19a5556f5a257cb8075e87701475a6312323d74f256f4a67feee64d83a7d8",
    "transactionHash": "0x0135488551f5b510e98a9cfd821ed94847d85083e9001604ff4a4a503864fbf5",
    "logs": [
      {
        "transactionIndex": 7,
        "blockNumber": 27656405,
        "transactionHash": "0x0135488551f5b510e98a9cfd821ed94847d85083e9001604ff4a4a503864fbf5",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000000070df68e2c13df22f55324edd56f2075eb6b8bb",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000002225900b1de9ded0000000000000000000000000000000000000000000000003b9d9dde4a969a3f00000000000000000000000000000000000000000000231863cfa4dc30a8d0d6000000000000000000000000000000000000000000000000397b44dd98b7fc5200000000000000000000000000000000000000000000231865f1fddce2876ec3",
        "logIndex": 12,
        "blockHash": "0xcfe19a5556f5a257cb8075e87701475a6312323d74f256f4a67feee64d83a7d8"
      }
    ],
    "blockNumber": 27656405,
    "cumulativeGasUsed": "5614968",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f670656e97b2663e52c8e055a678a800",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allPairsLength\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInitializable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairCodeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingPauser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pauser\",\"type\":\"address\"}],\"name\":\"setPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"isPair\":{\"details\":\"Simplified check if its a pair, given that `stable` flag might not be available in peripherals\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/base/core/VoltFactory.sol\":\"VoltFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/base/Reentrancy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nabstract contract Reentrancy {\\n    /// @dev simple re-entrancy check\\n    uint internal _unlocked = 1;\\n\\n    modifier lock() {\\n        require(_unlocked == 1, \\\"Reentrant call\\\");\\n        _unlocked = 2;\\n        _;\\n        _unlocked = 1;\\n    }\\n}\\n\",\"keccak256\":\"0x59c07b769bd280322dea57c93ed20b3e6e1fe1018ab9937b0dfcaddcfb5f2780\",\"license\":\"MIT\"},\"contracts/base/core/PairFees.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../../interface/IERC20.sol\\\";\\nimport \\\"../../lib/SafeERC20.sol\\\";\\n\\n/// @title Base V1 Fees contract is used as a 1:1 pair relationship to split out fees,\\n///        this ensures that the curve does not need to be modified for LP shares\\ncontract PairFees {\\n    using SafeERC20 for IERC20;\\n\\n    /// @dev The pair it is bonded to\\n    address internal immutable pair;\\n    /// @dev Token0 of pair, saved localy and statically for gas optimization\\n    address internal immutable token0;\\n    /// @dev Token1 of pair, saved localy and statically for gas optimization\\n    address internal immutable token1;\\n\\n    constructor(address _token0, address _token1) {\\n        pair = msg.sender;\\n        token0 = _token0;\\n        token1 = _token1;\\n    }\\n\\n    // Allow the pair to transfer fees to users\\n    function claimFeesFor(\\n        address recipient,\\n        uint amount0,\\n        uint amount1\\n    ) external {\\n        require(msg.sender == pair, \\\"Not pair\\\");\\n        if (amount0 > 0) {\\n            IERC20(token0).safeTransfer(recipient, amount0);\\n        }\\n        if (amount1 > 0) {\\n            IERC20(token1).safeTransfer(recipient, amount1);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x817fbd305ab864ad3dac49927e4f8e4ff3341f68c8d2eda43b1cf8175ea36dff\",\"license\":\"MIT\"},\"contracts/base/core/VoltFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../../interface/IFactory.sol\\\";\\nimport \\\"./VoltPair.sol\\\";\\n\\ncontract VoltFactory is IFactory {\\n    bool public override isPaused;\\n    address public pauser;\\n    address public pendingPauser;\\n    address public override treasury;\\n\\n    mapping(address => mapping(address => mapping(bool => address)))\\n        public\\n        override getPair;\\n    address[] public allPairs;\\n    /// @dev Simplified check if its a pair, given that `stable` flag might not be available in peripherals\\n    mapping(address => bool) public override isPair;\\n\\n    address internal _temp0;\\n    address internal _temp1;\\n    bool internal _temp;\\n\\n    event PairCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        bool stable,\\n        address pair,\\n        uint allPairsLength\\n    );\\n\\n    constructor() {\\n        pauser = msg.sender;\\n        isPaused = false;\\n    }\\n\\n    function allPairsLength() external view returns (uint) {\\n        return allPairs.length;\\n    }\\n\\n    function setPauser(address _pauser) external {\\n        require(msg.sender == pauser, \\\"VoltFactory: Not pauser\\\");\\n        pendingPauser = _pauser;\\n    }\\n\\n    function acceptPauser() external {\\n        require(msg.sender == pendingPauser, \\\"VoltFactory: Not pending pauser\\\");\\n        pauser = pendingPauser;\\n    }\\n\\n    function setPause(bool _state) external {\\n        require(msg.sender == pauser, \\\"VoltFactory: Not pauser\\\");\\n        isPaused = _state;\\n    }\\n\\n    function setTreasury(address _treasury) external {\\n        require(msg.sender == pauser, \\\"VoltFactory: Not pauser\\\");\\n        treasury = _treasury;\\n    }\\n\\n    function pairCodeHash() external pure override returns (bytes32) {\\n        return keccak256(type(VoltPair).creationCode);\\n    }\\n\\n    function getInitializable()\\n        external\\n        view\\n        override\\n        returns (\\n            address,\\n            address,\\n            bool\\n        )\\n    {\\n        return (_temp0, _temp1, _temp);\\n    }\\n\\n    function createPair(\\n        address tokenA,\\n        address tokenB,\\n        bool stable\\n    ) external override returns (address pair) {\\n        require(tokenA != tokenB, \\\"VoltFactory: IDENTICAL_ADDRESSES\\\");\\n        (address token0, address token1) = tokenA < tokenB\\n            ? (tokenA, tokenB)\\n            : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"VoltFactory: ZERO_ADDRESS\\\");\\n        require(\\n            getPair[token0][token1][stable] == address(0),\\n            \\\"VoltFactory: PAIR_EXISTS\\\"\\n        );\\n        // notice salt includes stable as well, 3 parameters\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1, stable));\\n        (_temp0, _temp1, _temp) = (token0, token1, stable);\\n        pair = address(new VoltPair{salt: salt}());\\n        getPair[token0][token1][stable] = pair;\\n        // populate mapping in the reverse direction\\n        getPair[token1][token0][stable] = pair;\\n        allPairs.push(pair);\\n        isPair[pair] = true;\\n        emit PairCreated(token0, token1, stable, pair, allPairs.length);\\n    }\\n}\\n\",\"keccak256\":\"0x0a8c4800e725c8871a359354709df2790315eb3b927e6307a300da21345f5d90\",\"license\":\"MIT\"},\"contracts/base/core/VoltPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../../interface/IERC20.sol\\\";\\nimport \\\"../../interface/IERC721Metadata.sol\\\";\\nimport \\\"../../interface/IPair.sol\\\";\\nimport \\\"../../interface/IFactory.sol\\\";\\nimport \\\"../../interface/ICallee.sol\\\";\\nimport \\\"../../interface/IUnderlying.sol\\\";\\nimport \\\"./PairFees.sol\\\";\\nimport \\\"../../lib/Math.sol\\\";\\nimport \\\"../../lib/SafeERC20.sol\\\";\\nimport \\\"../Reentrancy.sol\\\";\\n\\n// The base pair of pools, either stable or volatile\\ncontract VoltPair is IERC20, IPair, Reentrancy {\\n    using SafeERC20 for IERC20;\\n\\n    string public name;\\n    string public symbol;\\n    uint8 public constant decimals = 18;\\n\\n    /// @dev Used to denote stable or volatile pair\\n    bool public immutable stable;\\n\\n    uint public override totalSupply = 0;\\n\\n    mapping(address => mapping(address => uint)) public override allowance;\\n    mapping(address => uint) public override balanceOf;\\n\\n    bytes32 public immutable DOMAIN_SEPARATOR;\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n    uint internal constant _FEE_PRECISION = 1e32;\\n    mapping(address => uint) public nonces;\\n    uint public immutable chainId;\\n\\n    uint internal constant MINIMUM_LIQUIDITY = 10**3;\\n    /// @dev 50% of swap fee\\n    uint internal constant TREASURY_FEE = 2;\\n    /// @dev Capture oracle reading every 30 minutes\\n    uint internal constant PERIOD_SIZE = 1800;\\n\\n    address public immutable override token0;\\n    address public immutable override token1;\\n    address public immutable fees;\\n    address public immutable factory;\\n\\n    Observation[] public observations;\\n\\n    uint internal immutable decimals0;\\n    uint internal immutable decimals1;\\n\\n    uint public reserve0;\\n    uint public reserve1;\\n    uint public blockTimestampLast;\\n\\n    uint public reserve0CumulativeLast;\\n    uint public reserve1CumulativeLast;\\n\\n    // index0 and index1 are used to accumulate fees,\\n    // this is split out from normal trades to keep the swap \\\"clean\\\"\\n    // this further allows LP holders to easily claim fees for tokens they have/staked\\n    uint public index0 = 0;\\n    uint public index1 = 0;\\n\\n    // position assigned to each LP to track their current index0 & index1 vs the global position\\n    mapping(address => uint) public supplyIndex0;\\n    mapping(address => uint) public supplyIndex1;\\n\\n    // tracks the amount of unclaimed, but claimable tokens off of fees for token0 and token1\\n    mapping(address => uint) public claimable0;\\n    mapping(address => uint) public claimable1;\\n\\n    event Treasury(address indexed sender, uint amount0, uint amount1);\\n    event Fees(address indexed sender, uint amount0, uint amount1);\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(\\n        address indexed sender,\\n        uint amount0,\\n        uint amount1,\\n        address indexed to\\n    );\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint reserve0, uint reserve1);\\n    event Claim(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint amount0,\\n        uint amount1\\n    );\\n\\n    constructor() {\\n        factory = msg.sender;\\n        (address _token0, address _token1, bool _stable) = IFactory(msg.sender)\\n            .getInitializable();\\n        (token0, token1, stable) = (_token0, _token1, _stable);\\n        fees = address(new PairFees(_token0, _token1));\\n        if (_stable) {\\n            name = string(\\n                abi.encodePacked(\\n                    \\\"StableV1 AMM - \\\",\\n                    IERC721Metadata(_token0).symbol(),\\n                    \\\"/\\\",\\n                    IERC721Metadata(_token1).symbol()\\n                )\\n            );\\n            symbol = string(\\n                abi.encodePacked(\\n                    \\\"sAMM-\\\",\\n                    IERC721Metadata(_token0).symbol(),\\n                    \\\"/\\\",\\n                    IERC721Metadata(_token1).symbol()\\n                )\\n            );\\n        } else {\\n            name = string(\\n                abi.encodePacked(\\n                    \\\"VolatileV1 AMM - \\\",\\n                    IERC721Metadata(_token0).symbol(),\\n                    \\\"/\\\",\\n                    IERC721Metadata(_token1).symbol()\\n                )\\n            );\\n            symbol = string(\\n                abi.encodePacked(\\n                    \\\"vAMM-\\\",\\n                    IERC721Metadata(_token0).symbol(),\\n                    \\\"/\\\",\\n                    IERC721Metadata(_token1).symbol()\\n                )\\n            );\\n        }\\n\\n        decimals0 = 10**IUnderlying(_token0).decimals();\\n        decimals1 = 10**IUnderlying(_token1).decimals();\\n\\n        observations.push(Observation(block.timestamp, 0, 0));\\n\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(\\n                    \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n                ),\\n                keccak256(bytes(name)),\\n                keccak256(\\\"1\\\"),\\n                block.chainid,\\n                address(this)\\n            )\\n        );\\n        chainId = block.chainid;\\n    }\\n\\n    function observationLength() external view returns (uint) {\\n        return observations.length;\\n    }\\n\\n    function lastObservation() public view returns (Observation memory) {\\n        return observations[observations.length - 1];\\n    }\\n\\n    function metadata()\\n        external\\n        view\\n        returns (\\n            uint dec0,\\n            uint dec1,\\n            uint r0,\\n            uint r1,\\n            bool st,\\n            address t0,\\n            address t1\\n        )\\n    {\\n        return (\\n            decimals0,\\n            decimals1,\\n            reserve0,\\n            reserve1,\\n            stable,\\n            token0,\\n            token1\\n        );\\n    }\\n\\n    function tokens() external view override returns (address, address) {\\n        return (token0, token1);\\n    }\\n\\n    /// @dev Claim accumulated but unclaimed fees (viewable via claimable0 and claimable1)\\n    function claimFees()\\n        external\\n        override\\n        returns (uint claimed0, uint claimed1)\\n    {\\n        _updateFor(msg.sender);\\n\\n        claimed0 = claimable0[msg.sender];\\n        claimed1 = claimable1[msg.sender];\\n\\n        if (claimed0 > 0 || claimed1 > 0) {\\n            claimable0[msg.sender] = 0;\\n            claimable1[msg.sender] = 0;\\n\\n            PairFees(fees).claimFeesFor(msg.sender, claimed0, claimed1);\\n\\n            emit Claim(msg.sender, msg.sender, claimed0, claimed1);\\n        }\\n    }\\n\\n    /// @dev Accrue fees on token0\\n    function _update0(uint amount) internal {\\n        uint toTreasury;\\n        address treasury = IFactory(msg.sender).treasury();\\n        if (treasury != address(0)) {\\n            toTreasury = amount / TREASURY_FEE;\\n            // transfer the fees out to PairFees and Treasury\\n            IERC20(token0).safeTransfer(treasury, toTreasury);\\n            // keep the same structure of events for compatability\\n            emit Treasury(msg.sender, toTreasury, 0);\\n        }\\n        uint toFees = amount - toTreasury;\\n        IERC20(token0).safeTransfer(fees, toFees);\\n        // 1e32 adjustment is removed during claim\\n        uint _ratio = (toFees * _FEE_PRECISION) / totalSupply;\\n        if (_ratio > 0) {\\n            index0 += _ratio;\\n        }\\n        emit Fees(msg.sender, toFees, 0);\\n    }\\n\\n    /// @dev Accrue fees on token1\\n    function _update1(uint amount) internal {\\n        uint toTreasury;\\n        address treasury = IFactory(msg.sender).treasury();\\n        if (treasury != address(0)) {\\n            toTreasury = amount / TREASURY_FEE;\\n            // transfer the fees out to PairFees and Treasury\\n            IERC20(token1).safeTransfer(treasury, toTreasury);\\n            // keep the same structure of events for compatability\\n            emit Treasury(msg.sender, 0, toTreasury);\\n        }\\n        uint toFees = amount - toTreasury;\\n        IERC20(token1).safeTransfer(fees, toFees);\\n        uint _ratio = (toFees * _FEE_PRECISION) / totalSupply;\\n        if (_ratio > 0) {\\n            index1 += _ratio;\\n        }\\n        emit Fees(msg.sender, 0, toFees);\\n    }\\n\\n    /// @dev This function MUST be called on any balance changes,\\n    ///      otherwise can be used to infinitely claim fees\\n    //       Fees are segregated from core funds, so fees can never put liquidity at risk\\n    function _updateFor(address recipient) internal {\\n        uint _supplied = balanceOf[recipient];\\n        // get LP balance of `recipient`\\n        if (_supplied > 0) {\\n            uint _supplyIndex0 = supplyIndex0[recipient];\\n            // get last adjusted index0 for recipient\\n            uint _supplyIndex1 = supplyIndex1[recipient];\\n            uint _index0 = index0;\\n            // get global index0 for accumulated fees\\n            uint _index1 = index1;\\n            supplyIndex0[recipient] = _index0;\\n            // update user current position to global position\\n            supplyIndex1[recipient] = _index1;\\n            uint _delta0 = _index0 - _supplyIndex0;\\n            // see if there is any difference that need to be accrued\\n            uint _delta1 = _index1 - _supplyIndex1;\\n            if (_delta0 > 0) {\\n                uint _share = (_supplied * _delta0) / _FEE_PRECISION;\\n                // add accrued difference for each supplied token\\n                claimable0[recipient] += _share;\\n            }\\n            if (_delta1 > 0) {\\n                uint _share = (_supplied * _delta1) / _FEE_PRECISION;\\n                claimable1[recipient] += _share;\\n            }\\n        } else {\\n            supplyIndex0[recipient] = index0;\\n            // new users are set to the default global state\\n            supplyIndex1[recipient] = index1;\\n        }\\n    }\\n\\n    function getReserves()\\n        public\\n        view\\n        override\\n        returns (\\n            uint112 _reserve0,\\n            uint112 _reserve1,\\n            uint32 _blockTimestampLast\\n        )\\n    {\\n        _reserve0 = uint112(reserve0);\\n        _reserve1 = uint112(reserve1);\\n        _blockTimestampLast = uint32(blockTimestampLast);\\n    }\\n\\n    /// @dev Update reserves and, on the first call per block, price accumulators\\n    function _update(\\n        uint balance0,\\n        uint balance1,\\n        uint _reserve0,\\n        uint _reserve1\\n    ) internal {\\n        uint blockTimestamp = block.timestamp;\\n        uint timeElapsed = blockTimestamp - blockTimestampLast;\\n        // overflow is desired\\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\\n            unchecked {\\n                reserve0CumulativeLast += _reserve0 * timeElapsed;\\n                reserve1CumulativeLast += _reserve1 * timeElapsed;\\n            }\\n        }\\n\\n        Observation memory _point = lastObservation();\\n        timeElapsed = blockTimestamp - _point.timestamp;\\n        // compare the last observation with current timestamp,\\n        // if greater than 30 minutes, record a new event\\n        if (timeElapsed > PERIOD_SIZE) {\\n            observations.push(\\n                Observation(\\n                    blockTimestamp,\\n                    reserve0CumulativeLast,\\n                    reserve1CumulativeLast\\n                )\\n            );\\n        }\\n        reserve0 = balance0;\\n        reserve1 = balance1;\\n        blockTimestampLast = blockTimestamp;\\n        emit Sync(reserve0, reserve1);\\n    }\\n\\n    /// @dev Produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\n    function currentCumulativePrices()\\n        public\\n        view\\n        returns (\\n            uint reserve0Cumulative,\\n            uint reserve1Cumulative,\\n            uint blockTimestamp\\n        )\\n    {\\n        blockTimestamp = block.timestamp;\\n        reserve0Cumulative = reserve0CumulativeLast;\\n        reserve1Cumulative = reserve1CumulativeLast;\\n\\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\\n        (\\n            uint _reserve0,\\n            uint _reserve1,\\n            uint _blockTimestampLast\\n        ) = getReserves();\\n        if (_blockTimestampLast != blockTimestamp) {\\n            // subtraction overflow is desired\\n            uint timeElapsed = blockTimestamp - _blockTimestampLast;\\n            unchecked {\\n                reserve0Cumulative += _reserve0 * timeElapsed;\\n                reserve1Cumulative += _reserve1 * timeElapsed;\\n            }\\n        }\\n    }\\n\\n    /// @dev Gives the current twap price measured from amountIn * tokenIn gives amountOut\\n    function current(address tokenIn, uint amountIn)\\n        external\\n        view\\n        returns (uint amountOut)\\n    {\\n        Observation memory _observation = lastObservation();\\n        (\\n            uint reserve0Cumulative,\\n            uint reserve1Cumulative,\\n\\n        ) = currentCumulativePrices();\\n        if (block.timestamp == _observation.timestamp) {\\n            _observation = observations[observations.length - 2];\\n        }\\n\\n        uint timeElapsed = block.timestamp - _observation.timestamp;\\n        uint _reserve0 = (reserve0Cumulative -\\n            _observation.reserve0Cumulative) / timeElapsed;\\n        uint _reserve1 = (reserve1Cumulative -\\n            _observation.reserve1Cumulative) / timeElapsed;\\n        amountOut = _getAmountOut(amountIn, tokenIn, _reserve0, _reserve1);\\n    }\\n\\n    /// @dev As per `current`, however allows user configured granularity, up to the full window size\\n    function quote(\\n        address tokenIn,\\n        uint amountIn,\\n        uint granularity\\n    ) external view returns (uint amountOut) {\\n        uint[] memory _prices = sample(tokenIn, amountIn, granularity, 1);\\n        uint priceAverageCumulative;\\n        for (uint i = 0; i < _prices.length; i++) {\\n            priceAverageCumulative += _prices[i];\\n        }\\n        return priceAverageCumulative / granularity;\\n    }\\n\\n    /// @dev Returns a memory set of twap prices\\n    function prices(\\n        address tokenIn,\\n        uint amountIn,\\n        uint points\\n    ) external view returns (uint[] memory) {\\n        return sample(tokenIn, amountIn, points, 1);\\n    }\\n\\n    function sample(\\n        address tokenIn,\\n        uint amountIn,\\n        uint points,\\n        uint window\\n    ) public view returns (uint[] memory) {\\n        uint[] memory _prices = new uint[](points);\\n\\n        uint length = observations.length - 1;\\n        uint i = length - (points * window);\\n        uint nextIndex = 0;\\n        uint index = 0;\\n\\n        for (; i < length; i += window) {\\n            nextIndex = i + window;\\n            uint timeElapsed = observations[nextIndex].timestamp -\\n                observations[i].timestamp;\\n            uint _reserve0 = (observations[nextIndex].reserve0Cumulative -\\n                observations[i].reserve0Cumulative) / timeElapsed;\\n            uint _reserve1 = (observations[nextIndex].reserve1Cumulative -\\n                observations[i].reserve1Cumulative) / timeElapsed;\\n            _prices[index] = _getAmountOut(\\n                amountIn,\\n                tokenIn,\\n                _reserve0,\\n                _reserve1\\n            );\\n            index = index + 1;\\n        }\\n        return _prices;\\n    }\\n\\n    /// @dev This low-level function should be called from a contract which performs important safety checks\\n    ///      standard uniswap v2 implementation\\n    function mint(address to) external override lock returns (uint liquidity) {\\n        (uint _reserve0, uint _reserve1) = (reserve0, reserve1);\\n        uint _balance0 = IERC20(token0).balanceOf(address(this));\\n        uint _balance1 = IERC20(token1).balanceOf(address(this));\\n        uint _amount0 = _balance0 - _reserve0;\\n        uint _amount1 = _balance1 - _reserve1;\\n\\n        uint _totalSupply = totalSupply;\\n        // gas savings, must be defined here since totalSupply can update in _mintFee\\n        if (_totalSupply == 0) {\\n            liquidity = Math.sqrt(_amount0 * _amount1) - MINIMUM_LIQUIDITY;\\n            // permanently lock the first MINIMUM_LIQUIDITY tokens\\n            _mint(address(0), MINIMUM_LIQUIDITY);\\n        } else {\\n            liquidity = Math.min(\\n                (_amount0 * _totalSupply) / _reserve0,\\n                (_amount1 * _totalSupply) / _reserve1\\n            );\\n        }\\n        require(liquidity > 0, \\\"VoltPair: INSUFFICIENT_LIQUIDITY_MINTED\\\");\\n        _mint(to, liquidity);\\n\\n        _update(_balance0, _balance1, _reserve0, _reserve1);\\n        emit Mint(msg.sender, _amount0, _amount1);\\n    }\\n\\n    /// @dev This low-level function should be called from a contract which performs important safety checks\\n    ///      standard uniswap v2 implementation\\n    function burn(address to)\\n        external\\n        override\\n        lock\\n        returns (uint amount0, uint amount1)\\n    {\\n        (uint _reserve0, uint _reserve1) = (reserve0, reserve1);\\n        (address _token0, address _token1) = (token0, token1);\\n        uint _balance0 = IERC20(_token0).balanceOf(address(this));\\n        uint _balance1 = IERC20(_token1).balanceOf(address(this));\\n        uint _liquidity = balanceOf[address(this)];\\n\\n        // gas savings, must be defined here since totalSupply can update in _mintFee\\n        uint _totalSupply = totalSupply;\\n        // using balances ensures pro-rata distribution\\n        amount0 = (_liquidity * _balance0) / _totalSupply;\\n        // using balances ensures pro-rata distribution\\n        amount1 = (_liquidity * _balance1) / _totalSupply;\\n        require(\\n            amount0 > 0 && amount1 > 0,\\n            \\\"VoltPair: INSUFFICIENT_LIQUIDITY_BURNED\\\"\\n        );\\n        _burn(address(this), _liquidity);\\n        IERC20(_token0).safeTransfer(to, amount0);\\n        IERC20(_token1).safeTransfer(to, amount1);\\n        _balance0 = IERC20(_token0).balanceOf(address(this));\\n        _balance1 = IERC20(_token1).balanceOf(address(this));\\n\\n        _update(_balance0, _balance1, _reserve0, _reserve1);\\n        emit Burn(msg.sender, amount0, amount1, to);\\n    }\\n\\n    /// @dev This low-level function should be called from a contract which performs important safety checks\\n    function swap(\\n        uint amount0Out,\\n        uint amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external override lock {\\n        require(!IFactory(factory).isPaused(), \\\"VoltPair: PAUSE\\\");\\n        require(\\n            amount0Out > 0 || amount1Out > 0,\\n            \\\"VoltPair: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n        );\\n        (uint _reserve0, uint _reserve1) = (reserve0, reserve1);\\n        require(\\n            amount0Out < _reserve0 && amount1Out < _reserve1,\\n            \\\"VoltPair: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint _balance0;\\n        uint _balance1;\\n        {\\n            // scope for _token{0,1}, avoids stack too deep errors\\n            (address _token0, address _token1) = (token0, token1);\\n            require(to != _token0 && to != _token1, \\\"VoltPair: INVALID_TO\\\");\\n            // optimistically transfer tokens\\n            if (amount0Out > 0) IERC20(_token0).safeTransfer(to, amount0Out);\\n            // optimistically transfer tokens\\n            if (amount1Out > 0) IERC20(_token1).safeTransfer(to, amount1Out);\\n            // callback, used for flash loans\\n            if (data.length > 0)\\n                ICallee(to).hook(msg.sender, amount0Out, amount1Out, data);\\n            _balance0 = IERC20(_token0).balanceOf(address(this));\\n            _balance1 = IERC20(_token1).balanceOf(address(this));\\n        }\\n        uint amount0In = _balance0 > _reserve0 - amount0Out\\n            ? _balance0 - (_reserve0 - amount0Out)\\n            : 0;\\n        uint amount1In = _balance1 > _reserve1 - amount1Out\\n            ? _balance1 - (_reserve1 - amount1Out)\\n            : 0;\\n        require(\\n            amount0In > 0 || amount1In > 0,\\n            \\\"VoltPair: INSUFFICIENT_INPUT_AMOUNT\\\"\\n        );\\n        {\\n            // scope for reserve{0,1}Adjusted, avoids stack too deep errors\\n            (address _token0, address _token1) = (token0, token1);\\n            // accrue fees for token0 and move them out of pool\\n            if (amount0In > 0) _update0(swapFee(amount0In));\\n            // accrue fees for token1 and move them out of pool\\n            if (amount1In > 0) _update1(swapFee(amount1In));\\n            // since we removed tokens, we need to reconfirm balances,\\n            // can also simply use previous balance - amountIn/ SWAP_FEE,\\n            // but doing balanceOf again as safety check\\n            _balance0 = IERC20(_token0).balanceOf(address(this));\\n            _balance1 = IERC20(_token1).balanceOf(address(this));\\n            // The curve, either x3y+y3x for stable pools, or x*y for volatile pools\\n            require(\\n                _k(_balance0, _balance1) >= _k(_reserve0, _reserve1),\\n                \\\"VoltPair: K\\\"\\n            );\\n        }\\n\\n        _update(_balance0, _balance1, _reserve0, _reserve1);\\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\n    }\\n\\n    /// @dev Force balances to match reserves\\n    function skim(address to) external lock {\\n        (address _token0, address _token1) = (token0, token1);\\n        IERC20(_token0).safeTransfer(\\n            to,\\n            IERC20(_token0).balanceOf(address(this)) - (reserve0)\\n        );\\n        IERC20(_token1).safeTransfer(\\n            to,\\n            IERC20(_token1).balanceOf(address(this)) - (reserve1)\\n        );\\n    }\\n\\n    // force reserves to match balances\\n    function sync() external lock {\\n        _update(\\n            IERC20(token0).balanceOf(address(this)),\\n            IERC20(token1).balanceOf(address(this)),\\n            reserve0,\\n            reserve1\\n        );\\n    }\\n\\n    function _f(uint x0, uint y) internal pure returns (uint) {\\n        return\\n            (x0 * ((((y * y) / 1e18) * y) / 1e18)) /\\n            1e18 +\\n            (((((x0 * x0) / 1e18) * x0) / 1e18) * y) /\\n            1e18;\\n    }\\n\\n    function _d(uint x0, uint y) internal pure returns (uint) {\\n        return\\n            (3 * x0 * ((y * y) / 1e18)) /\\n            1e18 +\\n            ((((x0 * x0) / 1e18) * x0) / 1e18);\\n    }\\n\\n    function _getY(\\n        uint x0,\\n        uint xy,\\n        uint y\\n    ) internal pure returns (uint) {\\n        for (uint i = 0; i < 255; i++) {\\n            uint yPrev = y;\\n            uint k = _f(x0, y);\\n            if (k < xy) {\\n                uint dy = ((xy - k) * 1e18) / _d(x0, y);\\n                y = y + dy;\\n            } else {\\n                uint dy = ((k - xy) * 1e18) / _d(x0, y);\\n                y = y - dy;\\n            }\\n            if (Math.closeTo(y, yPrev, 1)) {\\n                break;\\n            }\\n        }\\n        return y;\\n    }\\n\\n    function getAmountOut(uint amountIn, address tokenIn)\\n        external\\n        view\\n        override\\n        returns (uint)\\n    {\\n        (uint _reserve0, uint _reserve1) = (reserve0, reserve1);\\n        // remove fee from amount received\\n        amountIn -= swapFee(amountIn);\\n        return _getAmountOut(amountIn, tokenIn, _reserve0, _reserve1);\\n    }\\n\\n    function _getAmountOut(\\n        uint amountIn,\\n        address tokenIn,\\n        uint _reserve0,\\n        uint _reserve1\\n    ) internal view returns (uint) {\\n        if (stable) {\\n            uint xy = _k(_reserve0, _reserve1);\\n            _reserve0 = (_reserve0 * 1e18) / decimals0;\\n            _reserve1 = (_reserve1 * 1e18) / decimals1;\\n            (uint reserveA, uint reserveB) = tokenIn == token0\\n                ? (_reserve0, _reserve1)\\n                : (_reserve1, _reserve0);\\n            amountIn = tokenIn == token0\\n                ? (amountIn * 1e18) / decimals0\\n                : (amountIn * 1e18) / decimals1;\\n            uint y = reserveB - _getY(amountIn + reserveA, xy, reserveB);\\n            return (y * (tokenIn == token0 ? decimals1 : decimals0)) / 1e18;\\n        } else {\\n            (uint reserveA, uint reserveB) = tokenIn == token0\\n                ? (_reserve0, _reserve1)\\n                : (_reserve1, _reserve0);\\n            return (amountIn * reserveB) / (reserveA + amountIn);\\n        }\\n    }\\n\\n    function _k(uint x, uint y) internal view returns (uint) {\\n        if (stable) {\\n            uint _x = (x * 1e18) / decimals0;\\n            uint _y = (y * 1e18) / decimals1;\\n            uint _a = (_x * _y) / 1e18;\\n            uint _b = ((_x * _x) / 1e18 + (_y * _y) / 1e18);\\n            // x3y+y3x >= k\\n            return (_a * _b) / 1e18;\\n        } else {\\n            // xy >= k\\n            return x * y;\\n        }\\n    }\\n\\n    function swapFee(uint256 amount) internal view returns (uint256) {\\n        if (stable) {\\n            return (amount * 4) / 10000;\\n        } else {\\n            return (amount * 3) / 1000;\\n        }\\n    }\\n\\n    //****************************************************************************\\n    //**************************** ERC20 *****************************************\\n    //****************************************************************************\\n\\n    function _mint(address dst, uint amount) internal {\\n        // balances must be updated on mint/burn/transfer\\n        _updateFor(dst);\\n        totalSupply += amount;\\n        balanceOf[dst] += amount;\\n        emit Transfer(address(0), dst, amount);\\n    }\\n\\n    function _burn(address dst, uint amount) internal {\\n        _updateFor(dst);\\n        totalSupply -= amount;\\n        balanceOf[dst] -= amount;\\n        emit Transfer(dst, address(0), amount);\\n    }\\n\\n    function approve(address spender, uint amount)\\n        external\\n        override\\n        returns (bool)\\n    {\\n        require(spender != address(0), \\\"VoltPair: Approve to the zero address\\\");\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint value,\\n        uint deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override {\\n        require(deadline >= block.timestamp, \\\"VoltPair: EXPIRED\\\");\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                DOMAIN_SEPARATOR,\\n                keccak256(\\n                    abi.encode(\\n                        PERMIT_TYPEHASH,\\n                        owner,\\n                        spender,\\n                        value,\\n                        nonces[owner]++,\\n                        deadline\\n                    )\\n                )\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(\\n            recoveredAddress != address(0) && recoveredAddress == owner,\\n            \\\"VoltPair: INVALID_SIGNATURE\\\"\\n        );\\n        allowance[owner][spender] = value;\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function transfer(address dst, uint amount)\\n        external\\n        override\\n        returns (bool)\\n    {\\n        _transferTokens(msg.sender, dst, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint amount\\n    ) external override returns (bool) {\\n        address spender = msg.sender;\\n        uint spenderAllowance = allowance[src][spender];\\n\\n        if (spender != src && spenderAllowance != type(uint).max) {\\n            require(\\n                spenderAllowance >= amount,\\n                \\\"VoltPair: Insufficient allowance\\\"\\n            );\\n            unchecked {\\n                uint newAllowance = spenderAllowance - amount;\\n                allowance[src][spender] = newAllowance;\\n                emit Approval(src, spender, newAllowance);\\n            }\\n        }\\n\\n        _transferTokens(src, dst, amount);\\n        return true;\\n    }\\n\\n    function _transferTokens(\\n        address src,\\n        address dst,\\n        uint amount\\n    ) internal {\\n        require(dst != address(0), \\\"VoltPair: Transfer to the zero address\\\");\\n\\n        // update fee position for src\\n        _updateFor(src);\\n        // update fee position for dst\\n        _updateFor(dst);\\n\\n        uint srcBalance = balanceOf[src];\\n        require(\\n            srcBalance >= amount,\\n            \\\"VoltPair: Transfer amount exceeds balance\\\"\\n        );\\n        unchecked {\\n            balanceOf[src] = srcBalance - amount;\\n        }\\n\\n        balanceOf[dst] += amount;\\n\\n        emit Transfer(src, dst, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0e65a43584540611edbb948edb12d030d76ad3c792d2b3a07643694cacd6eceb\",\"license\":\"MIT\"},\"contracts/interface/ICallee.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface ICallee {\\n    function hook(\\n        address sender,\\n        uint amount0,\\n        uint amount1,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x2fab4d26f3f7c642d1bfbf989352d2fac71442d135cb64341f560c53ad1ec5b1\",\"license\":\"MIT\"},\"contracts/interface/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8609505e815e06dac85e0cc77ad7bbb641ceec24e5c8e012483e8576dd09ce09\",\"license\":\"MIT\"},\"contracts/interface/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0x224e032b714ae191e5e419054a144402b01597e8b2eb36db4f6e38d3e42b0db7\",\"license\":\"MIT\"},\"contracts/interface/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed approved,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId)\\n        external\\n        view\\n        returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6983264dae1151fd2451f1cb2e4cb9a369f6dd25577600d1733fe6e4da0dc35d\",\"license\":\"MIT\"},\"contracts/interface/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x25b30686d5b7b33b8c7e58a5cef5f01d04f2405a92623f923a7bc36c6271733c\",\"license\":\"MIT\"},\"contracts/interface/IFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IFactory {\\n    function treasury() external view returns (address);\\n\\n    function isPair(address pair) external view returns (bool);\\n\\n    function getInitializable()\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            bool\\n        );\\n\\n    function isPaused() external view returns (bool);\\n\\n    function pairCodeHash() external pure returns (bytes32);\\n\\n    function getPair(\\n        address tokenA,\\n        address token,\\n        bool stable\\n    ) external view returns (address);\\n\\n    function createPair(\\n        address tokenA,\\n        address tokenB,\\n        bool stable\\n    ) external returns (address pair);\\n}\\n\",\"keccak256\":\"0x22270dbb92d05a3dae6d38084db2ce1db27dee00af111b6502c34efe7106508b\",\"license\":\"MIT\"},\"contracts/interface/IPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IPair {\\n    // Structure to capture time period obervations every 30 minutes, used for local oracles\\n    struct Observation {\\n        uint timestamp;\\n        uint reserve0Cumulative;\\n        uint reserve1Cumulative;\\n    }\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint value,\\n        uint deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function swap(\\n        uint amount0Out,\\n        uint amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n\\n    function mint(address to) external returns (uint liquidity);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 _reserve0,\\n            uint112 _reserve1,\\n            uint32 _blockTimestampLast\\n        );\\n\\n    function getAmountOut(uint, address) external view returns (uint);\\n\\n    function claimFees() external returns (uint, uint);\\n\\n    function tokens() external view returns (address, address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function stable() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xcb4617d9553f692bbe3b8236caa90ba85e1fad1553ae2bc356f637dbc9c79a4b\",\"license\":\"MIT\"},\"contracts/interface/IUnderlying.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IUnderlying {\\n    function approve(address spender, uint value) external returns (bool);\\n\\n    function mint(address, uint) external;\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function balanceOf(address) external view returns (uint);\\n\\n    function transfer(address, uint) external returns (bool);\\n\\n    function decimals() external returns (uint8);\\n}\\n\",\"keccak256\":\"0x9f1b01666233804a5e847f5385ec03364af51b2281eab803c8b4e1895e3c22ca\",\"license\":\"MIT\"},\"contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n        (bool success, bytes memory returndata) = target.call(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x798cd9aeb57ae229f05b694ccfb44ea291726b42c0ef5da99de61785ebbc32a8\",\"license\":\"MIT\"},\"contracts/lib/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nlibrary Math {\\n    function max(uint a, uint b) internal pure returns (uint) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function min(uint a, uint b) internal pure returns (uint) {\\n        return a < b ? a : b;\\n    }\\n\\n    function positiveInt128(int128 value) internal pure returns (int128) {\\n        return value < 0 ? int128(0) : value;\\n    }\\n\\n    function closeTo(\\n        uint a,\\n        uint b,\\n        uint target\\n    ) internal pure returns (bool) {\\n        if (a > b) {\\n            if (a - b <= target) {\\n                return true;\\n            }\\n        } else {\\n            if (b - a <= target) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8a50db5ef01ef869b1a7df3cf485d6c87473549c70fbefc54bdea34f8bc78538\",\"license\":\"MIT\"},\"contracts/lib/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../interface/IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint value\\n    ) internal {\\n        uint newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(\\n            data,\\n            \\\"SafeERC20: low-level call failed\\\"\\n        );\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(\\n                abi.decode(returndata, (bool)),\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd09403b2f52a045a82861c53059fb835daabe908fd774f948370979588b3fe1a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506000805460ff196101003302166001600160a81b03199091161790556158028061003c6000396000f3fe60806040523480156200001157600080fd5b5060043610620001095760003560e01c80639a7165e411620000a3578063bedb86fb116200006e578063bedb86fb1462000236578063e5e31b13146200024d578063eb13c4cf1462000273578063f0f4426014620002ac57600080fd5b80639a7165e414620001e05780639aab924814620001f45780639fd0506d14620001fe578063b187bd26146200021757600080fd5b8063574f2ba311620000e4578063574f2ba3146200016557806361d027b314620001785780636801cc30146200018c57806382dfdce414620001c957600080fd5b8063167a6f90146200010e5780631e3dd18b146200011a5780632d88af4a146200014e575b600080fd5b62000118620002c3565b005b620001316200012b366004620007e4565b6200034e565b6040516001600160a01b0390911681526020015b60405180910390f35b620001186200015f3660046200081b565b62000379565b6004545b60405190815260200162000145565b60025462000131906001600160a01b031681565b620001316200019d36600462000851565b60036020908152600093845260408085208252928452828420905282529020546001600160a01b031681565b62000131620001da36600462000851565b620003cd565b60015462000131906001600160a01b031681565b6200016962000709565b600054620001319061010090046001600160a01b031681565b600054620002259060ff1681565b604051901515815260200162000145565b62000118620002473660046200089b565b6200073d565b620002256200025e3660046200081b565b60056020526000908152604090205460ff1681565b600654600754604080516001600160a01b0393841681529282166020840152600160a01b90910460ff1615159082015260600162000145565b62000118620002bd3660046200081b565b62000782565b6001546001600160a01b03163314620003235760405162461bcd60e51b815260206004820152601f60248201527f566f6c74466163746f72793a204e6f742070656e64696e67207061757365720060448201526064015b60405180910390fd5b600154600080546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b600481815481106200035f57600080fd5b6000918252602090912001546001600160a01b0316905081565b60005461010090046001600160a01b03163314620003ab5760405162461bcd60e51b81526004016200031a90620008b9565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000826001600160a01b0316846001600160a01b031603620004325760405162461bcd60e51b815260206004820181905260248201527f566f6c74466163746f72793a204944454e544943414c5f41444452455353455360448201526064016200031a565b600080846001600160a01b0316866001600160a01b031610620004575784866200045a565b85855b90925090506001600160a01b038216620004b75760405162461bcd60e51b815260206004820152601960248201527f566f6c74466163746f72793a205a45524f5f414444524553530000000000000060448201526064016200031a565b6001600160a01b0382811660009081526003602090815260408083208585168452825280832088151584529091529020541615620005385760405162461bcd60e51b815260206004820152601860248201527f566f6c74466163746f72793a20504149525f455849535453000000000000000060448201526064016200031a565b6040516bffffffffffffffffffffffff19606084811b8216602084015283901b16603482015284151560f81b604882015260009060490160408051601f19818403018152908290528051602090910120600780546001600160a01b038087166001600160a01b03198b1515600160a01b0281166001600160a81b03199094169390931717909255600680549288169290911691909117905591508190620005df90620007d6565b8190604051809103906000f590508015801562000600573d6000803e3d6000fd5b506001600160a01b0384811660008181526003602081815260408084208987168086529083528185208d15158087529084528286208054988a166001600160a01b0319998a16811790915582875294845282862087875284528286208187528452828620805489168617905560048054600181810183557f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b9091018054909a1687179099558587526005855295839020805460ff1916909817909755935481519687529186019290925290840152929650907fc4805696c66d7cf352fc1d6bb633ad5ee82f6cb577c453024b6e0eb8306c6fc99060600160405180910390a35050509392505050565b6000604051806020016200071d90620007d6565b6020820181038252601f19601f8201166040525080519060200120905090565b60005461010090046001600160a01b031633146200076f5760405162461bcd60e51b81526004016200031a90620008b9565b6000805460ff1916911515919091179055565b60005461010090046001600160a01b03163314620007b45760405162461bcd60e51b81526004016200031a90620008b9565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b614edc80620008f183390190565b600060208284031215620007f757600080fd5b5035919050565b80356001600160a01b03811681146200081657600080fd5b919050565b6000602082840312156200082e57600080fd5b6200083982620007fe565b9392505050565b803580151581146200081657600080fd5b6000806000606084860312156200086757600080fd5b6200087284620007fe565b92506200088260208501620007fe565b9150620008926040850162000840565b90509250925092565b600060208284031215620008ae57600080fd5b620008398262000840565b60208082526017908201527f566f6c74466163746f72793a204e6f742070617573657200000000000000000060408201526060019056fe6101a0604052600160005560006003556000600d556000600e553480156200002657600080fd5b50336001600160a01b0316610140816001600160a01b0316815250506000806000336001600160a01b031663eb13c4cf6040518163ffffffff1660e01b8152600401606060405180830381865afa15801562000086573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000ac91906200086c565b8015156080526001600160a01b0380831661010052831660e052604051929550909350915083908390620000e0906200079b565b6001600160a01b03928316815291166020820152604001604051809103906000f08015801562000114573d6000803e3d6000fd5b506001600160a01b03166101205280156200034757826001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000168573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000192919081019062000907565b826001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015620001d1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620001fb919081019062000907565b6040516020016200020e929190620009bf565b6040516020818303038152906040526001908051906020019062000234929190620007a9565b50826001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000274573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200029e919081019062000907565b826001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015620002dd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000307919081019062000907565b6040516020016200031a92919062000a1a565b6040516020818303038152906040526002908051906020019062000340929190620007a9565b5062000560565b826001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000386573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620003b0919081019062000907565b826001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015620003ef573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000419919081019062000907565b6040516020016200042c92919062000a6b565b6040516020818303038152906040526001908051906020019062000452929190620007a9565b50826001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000492573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620004bc919081019062000907565b826001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015620004fb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000525919081019062000907565b6040516020016200053892919062000ac8565b604051602081830303815290604052600290805190602001906200055e929190620007a9565b505b826001600160a01b031663313ce5676040518163ffffffff1660e01b81526004016020604051808303816000875af1158015620005a1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005c7919062000aea565b620005d490600a62000c2b565b6101608181525050816001600160a01b031663313ce5676040518163ffffffff1660e01b81526004016020604051808303816000875af11580156200061d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000643919062000aea565b6200065090600a62000c2b565b610180526040805160608101825242815260006020820181815282840182815260078054600180820183559190945293517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68860039094029384015590517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c689830155517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68a9091015590517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f91620007269162000c78565b6040805191829003822060208301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160408051601f19818403018152919052805160209091012060a05250504660c0525062000d1b565b61051b80620049c183390190565b828054620007b79062000c3c565b90600052602060002090601f016020900481019282620007db576000855562000826565b82601f10620007f657805160ff191683800117855562000826565b8280016001018555821562000826579182015b828111156200082657825182559160200191906001019062000809565b506200083492915062000838565b5090565b5b8082111562000834576000815560010162000839565b80516001600160a01b03811681146200086757600080fd5b919050565b6000806000606084860312156200088257600080fd5b6200088d846200084f565b92506200089d602085016200084f565b915060408401518015158114620008b357600080fd5b809150509250925092565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620008f1578181015183820152602001620008d7565b8381111562000901576000848401525b50505050565b6000602082840312156200091a57600080fd5b81516001600160401b03808211156200093257600080fd5b818401915084601f8301126200094757600080fd5b8151818111156200095c576200095c620008be565b604051601f8201601f19908116603f01168101908382118183101715620009875762000987620008be565b81604052828152876020848701011115620009a157600080fd5b620009b4836020830160208801620008d4565b979650505050505050565b6e029ba30b13632ab189020a6a690169608d1b815260008351620009eb81600f850160208801620008d4565b602f60f81b600f91840191820152835162000a0e816010840160208801620008d4565b01601001949350505050565b6473414d4d2d60d81b81526000835162000a3c816005850160208801620008d4565b602f60f81b600591840191820152835162000a5f816006840160208801620008d4565b01600601949350505050565b7002b37b630ba34b632ab189020a6a690169607d1b81526000835162000a99816011850160208801620008d4565b602f60f81b601191840191820152835162000abc816012840160208801620008d4565b01601201949350505050565b6476414d4d2d60d81b81526000835162000a3c816005850160208801620008d4565b60006020828403121562000afd57600080fd5b815160ff8116811462000b0f57600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111562000b6d57816000190482111562000b515762000b5162000b16565b8085161562000b5f57918102915b93841c939080029062000b31565b509250929050565b60008262000b865750600162000c25565b8162000b955750600062000c25565b816001811462000bae576002811462000bb95762000bd9565b600191505062000c25565b60ff84111562000bcd5762000bcd62000b16565b50506001821b62000c25565b5060208310610133831016604e8410600b841016171562000bfe575081810a62000c25565b62000c0a838362000b2c565b806000190482111562000c215762000c2162000b16565b0290505b92915050565b600062000b0f60ff84168362000b75565b600181811c9082168062000c5157607f821691505b60208210810362000c7257634e487b7160e01b600052602260045260246000fd5b50919050565b600080835481600182811c91508083168062000c9557607f831692505b6020808410820362000cb557634e487b7160e01b86526022600452602486fd5b81801562000ccc576001811462000cde5762000d0d565b60ff1986168952848901965062000d0d565b60008a81526020902060005b8681101562000d055781548b82015290850190830162000cea565b505084890196505b509498975050505050505050565b60805160a05160c05160e0516101005161012051610140516101605161018051613b1662000eab600039600081816104d6015281816127ee01528181612aab01528181612b6d0152612c780152600081816104b3015281816127ad01528181612a6c01528181612baf0152612c520152600081816107d701526108c70152600081816106be01528181611e82015281816124fa01526126db015260008181610560015281816107130152818161080701528181610a7301528181610d650152818161162c0152818161185a01528181611ccd0152818161229b0152818161263a01526126b901526000818161033501528181610538015281816106ee01528181610a5201528181610d44015281816115960152818161183801528181611cab015281816122130152818161245a015281816124d801528181612aed01528181612b3401528181612c190152612cbc015260006106970152600081816104850152611f800152600081816103ee015281816105080152818161237b015281816127850152612a380152613b166000f3fe608060405234801561001057600080fd5b50600436106102a05760003560e01c80637ecebe0011610167578063bda39cad116100ce578063d294f09311610087578063d294f09314610829578063d505accf14610831578063dd62ed3e14610844578063ebeb31db1461086f578063f140a35a14610877578063fff6cae91461088a57600080fd5b8063bda39cad146107b7578063bf944dbc146107c0578063c245febc146107c9578063c45a0155146107d2578063c5700a02146107f9578063d21220a71461080257600080fd5b80639d63848a116101205780639d63848a146106e05780639e8cc04b1461073e5780639f767c8814610751578063a1ac4d1314610771578063a9059cbb14610791578063bc25cf77146107a457600080fd5b80637ecebe001461061857806389afcb44146106385780638a7b8cf21461066057806395d89b411461068a5780639a8a0592146106925780639af1d35a146106b957600080fd5b806330adf81f1161020b5780634d5a9f8a116101c45780634d5a9f8a14610596578063517b3f82146105b65780635881c475146105c95780635a76f25e146105dc5780636a627842146105e557806370a08231146105f857600080fd5b806330adf81f14610436578063313ce5671461045d57806332c0defd146104775780633644e51514610480578063392f37e9146104a7578063443cb4bc1461058d57600080fd5b806318160ddd1161025d57806318160ddd1461038f5780631df8c717146103a6578063205aabf1146103c957806322be3de1146103e957806323b872dd14610410578063252c09d71461042357600080fd5b8063022c0d9f146102a557806306fdde03146102ba5780630902f1ac146102d8578063095ea7b31461030d5780630dfe16811461033057806313345fe11461036f575b600080fd5b6102b86102b33660046135d4565b610892565b005b6102c2610f4c565b6040516102cf919061369a565b60405180910390f35b600854600954600a54604080516001600160701b03948516815293909216602084015263ffffffff16908201526060016102cf565b61032061031b3660046136cd565b610fda565b60405190151581526020016102cf565b6103577f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016102cf565b61038261037d3660046136f9565b6110a5565b6040516102cf9190613734565b61039860035481565b6040519081526020016102cf565b6103ae6112ad565b604080519384526020840192909252908201526060016102cf565b6103986103d7366004613778565b60106020526000908152604090205481565b6103207f000000000000000000000000000000000000000000000000000000000000000081565b61032061041e366004613795565b611315565b6103ae6104313660046137d6565b611423565b6103987f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b610465601281565b60405160ff90911681526020016102cf565b610398600d5481565b6103987f000000000000000000000000000000000000000000000000000000000000000081565b600854600954604080517f000000000000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000000060208201529081019290925260608201527f0000000000000000000000000000000000000000000000000000000000000000151560808201526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660a08301527f00000000000000000000000000000000000000000000000000000000000000001660c082015260e0016102cf565b61039860085481565b6103986105a4366004613778565b60116020526000908152604090205481565b6103986105c43660046136cd565b611456565b6103826105d73660046137ef565b61153e565b61039860095481565b6103986105f3366004613778565b61154d565b610398610606366004613778565b60056020526000908152604090205481565b610398610626366004613778565b60066020526000908152604090205481565b61064b610646366004613778565b6117ed565b604080519283526020830191909152016102cf565b610668611b5c565b60408051825181526020808401519082015291810151908201526060016102cf565b6102c2611bdc565b6103987f000000000000000000000000000000000000000000000000000000000000000081565b6103577f000000000000000000000000000000000000000000000000000000000000000081565b604080516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682527f0000000000000000000000000000000000000000000000000000000000000000166020820152016102cf565b61039861074c3660046137ef565b611be9565b61039861075f366004613778565b600f6020526000908152604090205481565b61039861077f366004613778565b60126020526000908152604090205481565b61032061079f3660046136cd565b611c56565b6102b86107b2366004613778565b611c6c565b610398600e5481565b610398600b5481565b610398600c5481565b6103577f000000000000000000000000000000000000000000000000000000000000000081565b610398600a5481565b6103577f000000000000000000000000000000000000000000000000000000000000000081565b61064b611df9565b6102b861083f366004613824565b611f20565b61039861085236600461389b565b600460209081526000928352604080842090915290825290205481565b600754610398565b6103986108853660046138d4565b61219f565b6102b86121d3565b6000546001146108bd5760405162461bcd60e51b81526004016108b4906138f9565b60405180910390fd5b60026000819055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b187bd266040518163ffffffff1660e01b8152600401602060405180830381865afa158015610923573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109479190613921565b156109865760405162461bcd60e51b815260206004820152600f60248201526e566f6c74506169723a20504155534560881b60448201526064016108b4565b60008511806109955750600084115b6109ed5760405162461bcd60e51b8152602060048201526024808201527f566f6c74506169723a20494e53554646494349454e545f4f55545055545f414d60448201526313d5539560e21b60648201526084016108b4565b6008546009548187108015610a0157508086105b610a4d5760405162461bcd60e51b815260206004820181905260248201527f566f6c74506169723a20494e53554646494349454e545f4c495155494449545960448201526064016108b4565b6000807f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0389811690831614801590610ac05750806001600160a01b0316896001600160a01b031614155b610b035760405162461bcd60e51b8152602060048201526014602482015273566f6c74506169723a20494e56414c49445f544f60601b60448201526064016108b4565b8a15610b1d57610b1d6001600160a01b0383168a8d612320565b8915610b3757610b376001600160a01b0382168a8c612320565b8615610ba457604051639a7bff7960e01b81526001600160a01b038a1690639a7bff7990610b719033908f908f908e908e90600401613943565b600060405180830381600087803b158015610b8b57600080fd5b505af1158015610b9f573d6000803e3d6000fd5b505050505b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa158015610be8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0c919061398f565b6040516370a0823160e01b81523060048201529094506001600160a01b038216906370a0823190602401602060405180830381865afa158015610c53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c77919061398f565b9250505060008985610c8991906139be565b8311610c96576000610caa565b610ca08a866139be565b610caa90846139be565b90506000610cb88a866139be565b8311610cc5576000610cd9565b610ccf8a866139be565b610cd990846139be565b90506000821180610cea5750600081115b610d425760405162461bcd60e51b815260206004820152602360248201527f566f6c74506169723a20494e53554646494349454e545f494e5055545f414d4f60448201526215539560ea1b60648201526084016108b4565b7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008315610d9b57610d9b610d9685612377565b6123ca565b8215610db257610db2610dad84612377565b6125aa565b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa158015610df6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1a919061398f565b6040516370a0823160e01b81523060048201529096506001600160a01b038216906370a0823190602401602060405180830381865afa158015610e61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e85919061398f565b9450610e918888612781565b610e9b8787612781565b1015610ed75760405162461bcd60e51b815260206004820152600b60248201526a566f6c74506169723a204b60a81b60448201526064016108b4565b5050610ee5848488886128cd565b60408051838152602081018390529081018c9052606081018b90526001600160a01b038a169033907fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229060800160405180910390a350506001600055505050505050505050565b60018054610f59906139d5565b80601f0160208091040260200160405190810160405280929190818152602001828054610f85906139d5565b8015610fd25780601f10610fa757610100808354040283529160200191610fd2565b820191906000526020600020905b815481529060010190602001808311610fb557829003601f168201915b505050505081565b60006001600160a01b0383166110405760405162461bcd60e51b815260206004820152602560248201527f566f6c74506169723a20417070726f766520746f20746865207a65726f206164604482015264647265737360d81b60648201526084016108b4565b3360008181526004602090815260408083206001600160a01b03881680855290835292819020869055518581529192917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a35060015b92915050565b606060008367ffffffffffffffff8111156110c2576110c2613a09565b6040519080825280602002602001820160405280156110eb578160200160208202803683370190505b50600754909150600090611101906001906139be565b9050600061110f8587613a1f565b61111990836139be565b90506000805b8383101561129d576111318784613a3e565b915060006007848154811061114857611148613a56565b9060005260206000209060030201600001546007848154811061116d5761116d613a56565b90600052602060002090600302016000015461118991906139be565b9050600081600786815481106111a1576111a1613a56565b906000526020600020906003020160010154600786815481106111c6576111c6613a56565b9060005260206000209060030201600101546111e291906139be565b6111ec9190613a6c565b90506000826007878154811061120457611204613a56565b9060005260206000209060030201600201546007878154811061122957611229613a56565b90600052602060002090600302016002015461124591906139be565b61124f9190613a6c565b905061125d8c8e8484612a34565b88858151811061126f5761126f613a56565b6020908102919091010152611285846001613a3e565b935050505086836112969190613a3e565b925061111f565b509293505050505b949350505050565b600b54600c5442600080806112cb600854600954600a549192909190565b63ffffffff1692506001600160701b031692506001600160701b0316925083811461130d5760006112fc82866139be565b848102979097019683029590950194505b505050909192565b6001600160a01b03831660008181526004602090815260408083203380855292528220549192909190821480159061134f57506000198114155b1561140a57838110156113a45760405162461bcd60e51b815260206004820181905260248201527f566f6c74506169723a20496e73756666696369656e7420616c6c6f77616e636560448201526064016108b4565b6001600160a01b03868116600081815260046020908152604080832094871680845294825291829020888603908190559151828152919392917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505b611415868686612d29565b6001925050505b9392505050565b6007818154811061143357600080fd5b600091825260209091206003909102018054600182015460029092015490925083565b600080611461611b5c565b905060008061146e6112ad565b508451919350915042036114d6576007805461148c906002906139be565b8154811061149c5761149c613a56565b9060005260206000209060030201604051806060016040529081600082015481526020016001820154815260200160028201548152505092505b82516000906114e590426139be565b90506000818560200151856114fa91906139be565b6115049190613a6c565b905060008286604001518561151991906139be565b6115239190613a6c565b9050611531888a8484612a34565b9998505050505050505050565b60606112a584848460016110a5565b600080546001146115705760405162461bcd60e51b81526004016108b4906138f9565b600260009081556008546009546040516370a0823160e01b8152306004820152919290917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156115e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611609919061398f565b6040516370a0823160e01b81523060048201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015611673573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611697919061398f565b905060006116a585846139be565b905060006116b385846139be565b60035490915060008190036116f5576103e86116d76116d28486613a1f565b612eac565b6116e191906139be565b97506116f060006103e8612f1b565b61172a565b611727876117038386613a1f565b61170d9190613a6c565b876117188486613a1f565b6117229190613a6c565b612fae565b97505b6000881161178a5760405162461bcd60e51b815260206004820152602760248201527f566f6c74506169723a20494e53554646494349454e545f4c495155494449545960448201526617d3525395115160ca1b60648201526084016108b4565b6117948989612f1b565b6117a0858589896128cd565b604080518481526020810184905233917f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f910160405180910390a250506001600055509395945050505050565b6000806000546001146118125760405162461bcd60e51b81526004016108b4906138f9565b600260009081556008546009546040516370a0823160e01b8152306004820152919290917f0000000000000000000000000000000000000000000000000000000000000000917f0000000000000000000000000000000000000000000000000000000000000000916001600160a01b038416906370a0823190602401602060405180830381865afa1580156118ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118cf919061398f565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a0823190602401602060405180830381865afa158015611919573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061193d919061398f565b30600090815260056020526040902054600354919250908061195f8584613a1f565b6119699190613a6c565b9950806119768484613a1f565b6119809190613a6c565b985060008a1180156119925750600089115b6119ee5760405162461bcd60e51b815260206004820152602760248201527f566f6c74506169723a20494e53554646494349454e545f4c495155494449545960448201526617d0955493915160ca1b60648201526084016108b4565b6119f83083612fc4565b611a0c6001600160a01b0387168c8c612320565b611a206001600160a01b0386168c8b612320565b6040516370a0823160e01b81523060048201526001600160a01b038716906370a0823190602401602060405180830381865afa158015611a64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a88919061398f565b6040516370a0823160e01b81523060048201529094506001600160a01b038616906370a0823190602401602060405180830381865afa158015611acf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af3919061398f565b9250611b0184848a8a6128cd565b604080518b8152602081018b90526001600160a01b038d169133917fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496910160405180910390a350505050505050506001600081905550915091565b611b8060405180606001604052806000815260200160008152602001600081525090565b60078054611b90906001906139be565b81548110611ba057611ba0613a56565b90600052602060002090600302016040518060600160405290816000820154815260200160018201548152602001600282015481525050905090565b60028054610f59906139d5565b600080611bf985858560016110a5565b90506000805b8251811015611c4157828181518110611c1a57611c1a613a56565b602002602001015182611c2d9190613a3e565b915080611c3981613a8e565b915050611bff565b50611c4c8482613a6c565b9695505050505050565b6000611c63338484612d29565b50600192915050565b600054600114611c8e5760405162461bcd60e51b81526004016108b4906138f9565b60026000556008546040516370a0823160e01b81523060048201527f0000000000000000000000000000000000000000000000000000000000000000917f000000000000000000000000000000000000000000000000000000000000000091611d639185916001600160a01b038616906370a0823190602401602060405180830381865afa158015611d24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d48919061398f565b611d5291906139be565b6001600160a01b0385169190612320565b6009546040516370a0823160e01b8152306004820152611def9185916001600160a01b038516906370a0823190602401602060405180830381865afa158015611db0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dd4919061398f565b611dde91906139be565b6001600160a01b0384169190612320565b5050600160005550565b600080611e053361304f565b50503360009081526011602090815260408083205460129092529091205481151580611e315750600081115b15611f1c573360008181526011602090815260408083208390556012909152808220919091555163299e7ae760e11b8152600481019190915260248101839052604481018290526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063533cf5ce90606401600060405180830381600087803b158015611ec657600080fd5b505af1158015611eda573d6000803e3d6000fd5b505060408051858152602081018590523393508392507f865ca08d59f5cb456e85cd2f7ef63664ea4f73327414e9d8152c4158b0e94645910160405180910390a35b9091565b42841015611f645760405162461bcd60e51b8152602060048201526011602482015270159bdb1d14185a5c8e8811561412549151607a1b60448201526064016108b4565b6001600160a01b038716600090815260066020526040812080547f0000000000000000000000000000000000000000000000000000000000000000917f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918b918b918b9187611fd283613a8e565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e0016040516020818303038152906040528051906020012060405160200161204b92919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa1580156120b6573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906120ec5750886001600160a01b0316816001600160a01b0316145b6121385760405162461bcd60e51b815260206004820152601b60248201527f566f6c74506169723a20494e56414c49445f5349474e4154555245000000000060448201526064016108b4565b6001600160a01b038981166000818152600460209081526040808320948d16808452948252918290208b905590518a81527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050505050505050565b600854600954600091906121b285612377565b6121bc90866139be565b94506121ca85858484612a34565b95945050505050565b6000546001146121f55760405162461bcd60e51b81526004016108b4906138f9565b60026000556040516370a0823160e01b8152306004820152612319907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015612262573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612286919061398f565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156122ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061230e919061398f565b6008546009546128cd565b6001600055565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526123729084906131bb565b505050565b60007f0000000000000000000000000000000000000000000000000000000000000000156123b7576127106123ad836004613a1f565b61109f9190613a6c565b6103e86123ad836003613a1f565b919050565b600080336001600160a01b03166361d027b36040518163ffffffff1660e01b8152600401602060405180830381865afa15801561240b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061242f9190613aa7565b90506001600160a01b038116156124bd5761244b600284613a6c565b91506124816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168284612320565b604080518381526000602082015233917ffd26d3e0e8324438b2b556a62f87e2e5864535089e691e5119466433de1ebc61910160405180910390a25b60006124c983856139be565b905061251f6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083612320565b60035460009061253d6d04ee2d6d415b85acef810000000084613a1f565b6125479190613a6c565b905080156125675780600d60008282546125619190613a3e565b90915550505b604080518381526000602082015233917f112c256902bf554b6ed882d2936687aaeb4225e8cd5b51303c90ca6cf43a860291015b60405180910390a25050505050565b600080336001600160a01b03166361d027b36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156125eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061260f9190613aa7565b90506001600160a01b0381161561269e5761262b600284613a6c565b91506126616001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168284612320565b60408051600081526020810184905233917ffd26d3e0e8324438b2b556a62f87e2e5864535089e691e5119466433de1ebc61910160405180910390a25b60006126aa83856139be565b90506127006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083612320565b60035460009061271e6d04ee2d6d415b85acef810000000084613a1f565b6127289190613a6c565b905080156127485780600e60008282546127429190613a3e565b90915550505b60408051600081526020810184905233917f112c256902bf554b6ed882d2936687aaeb4225e8cd5b51303c90ca6cf43a8602910161259b565b60007f0000000000000000000000000000000000000000000000000000000000000000156128bc5760007f00000000000000000000000000000000000000000000000000000000000000006127de85670de0b6b3a7640000613a1f565b6127e89190613a6c565b905060007f000000000000000000000000000000000000000000000000000000000000000061281f85670de0b6b3a7640000613a1f565b6128299190613a6c565b90506000670de0b6b3a76400006128408385613a1f565b61284a9190613a6c565b90506000670de0b6b3a76400006128618480613a1f565b61286b9190613a6c565b670de0b6b3a764000061287e8680613a1f565b6128889190613a6c565b6128929190613a3e565b9050670de0b6b3a76400006128a78284613a1f565b6128b19190613a6c565b94505050505061109f565b6128c68284613a1f565b905061109f565b600a5442906000906128df90836139be565b90506000811180156128f057508315155b80156128fb57508215155b1561291557600b8054858302019055600c80548483020190555b600061291f611b5c565b805190915061292e90846139be565b91506107088211156129e35760408051606081018252848152600b5460208201908152600c549282019283526007805460018101825560009190915291517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688600390930292830155517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68982015590517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68a909101555b60088790556009869055600a83905560408051888152602081018890527fcf2aa50876cdfbb541206f89af0ee78d44a2abf8d328e37fa4917f982149848a910160405180910390a150505050505050565b60007f000000000000000000000000000000000000000000000000000000000000000015612cb7576000612a688484612781565b90507f0000000000000000000000000000000000000000000000000000000000000000612a9d85670de0b6b3a7640000613a1f565b612aa79190613a6c565b93507f0000000000000000000000000000000000000000000000000000000000000000612adc84670de0b6b3a7640000613a1f565b612ae69190613a6c565b92506000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316876001600160a01b031614612b2b578486612b2e565b85855b915091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316876001600160a01b031614612bad577f0000000000000000000000000000000000000000000000000000000000000000612b9e89670de0b6b3a7640000613a1f565b612ba89190613a6c565b612bea565b7f0000000000000000000000000000000000000000000000000000000000000000612be089670de0b6b3a7640000613a1f565b612bea9190613a6c565b97506000612c02612bfb848b613a3e565b858461328d565b612c0c90836139be565b9050670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316896001600160a01b031614612c76577f0000000000000000000000000000000000000000000000000000000000000000612c98565b7f00000000000000000000000000000000000000000000000000000000000000005b612ca29083613a1f565b612cac9190613a6c565b9450505050506112a5565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316866001600160a01b031614612cfa578385612cfd565b84845b9092509050612d0c8783613a3e565b612d168289613a1f565b612d209190613a6c565b925050506112a5565b6001600160a01b038216612d8e5760405162461bcd60e51b815260206004820152602660248201527f566f6c74506169723a205472616e7366657220746f20746865207a65726f206160448201526564647265737360d01b60648201526084016108b4565b612d978361304f565b612da08261304f565b6001600160a01b03831660009081526005602052604090205481811015612e1b5760405162461bcd60e51b815260206004820152602960248201527f566f6c74506169723a205472616e7366657220616d6f756e7420657863656564604482015268732062616c616e636560b81b60648201526084016108b4565b6001600160a01b03808516600090815260056020526040808220858503905591851681529081208054849290612e52908490613a3e565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051612e9e91815260200190565b60405180910390a350505050565b60006003821115612f0d5750806000612ec6600283613a6c565b612ed1906001613a3e565b90505b81811015612f0757905080600281612eec8186613a6c565b612ef69190613a3e565b612f009190613a6c565b9050612ed4565b50919050565b81156123c557506001919050565b612f248261304f565b8060036000828254612f369190613a3e565b90915550506001600160a01b03821660009081526005602052604081208054839290612f63908490613a3e565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b6000818310612fbd578161141c565b5090919050565b612fcd8261304f565b8060036000828254612fdf91906139be565b90915550506001600160a01b0382166000908152600560205260408120805483929061300c9084906139be565b90915550506040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001612fa2565b6001600160a01b0381166000908152600560205260409020548015613189576001600160a01b0382166000908152600f60209081526040808320805460108085529285208054600d54600e549481905594909552829055936130b185846139be565b905060006130bf85846139be565b905081156131205760006d04ee2d6d415b85acef81000000006130e2848a613a1f565b6130ec9190613a6c565b6001600160a01b038a16600090815260116020526040812080549293508392909190613119908490613a3e565b9091555050505b801561317f5760006d04ee2d6d415b85acef8100000000613141838a613a1f565b61314b9190613a6c565b6001600160a01b038a16600090815260126020526040812080549293508392909190613178908490613a3e565b9091555050505b5050505050505050565b600d546001600160a01b0383166000908152600f6020908152604080832093909355600e546010909152919020555050565b6000613210826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661336f9092919063ffffffff16565b805190915015612372578080602001905181019061322e9190613921565b6123725760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016108b4565b6000805b60ff811015613366578260006132a78783613435565b9050858110156132f75760006132bd88876134d2565b6132c783896139be565b6132d990670de0b6b3a7640000613a1f565b6132e39190613a6c565b90506132ef8187613a3e565b955050613339565b600061330388876134d2565b61330d88846139be565b61331f90670de0b6b3a7640000613a1f565b6133299190613a6c565b905061333581876139be565b9550505b6133458583600161353a565b15613351575050613366565b5050808061335e90613a8e565b915050613291565b50909392505050565b60606001600160a01b0384163b6133c85760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108b4565b600080856001600160a01b0316856040516133e39190613ac4565b6000604051808303816000865af19150503d8060008114613420576040519150601f19603f3d011682016040523d82523d6000602084013e613425565b606091505b5091509150611c4c828286613583565b6000670de0b6b3a76400008281858161344e8280613a1f565b6134589190613a6c565b6134629190613a1f565b61346c9190613a6c565b6134769190613a1f565b6134809190613a6c565b670de0b6b3a76400008084816134968280613a1f565b6134a09190613a6c565b6134aa9190613a1f565b6134b49190613a6c565b6134be9086613a1f565b6134c89190613a6c565b61141c9190613a3e565b6000670de0b6b3a764000083816134e98280613a1f565b6134f39190613a6c565b6134fd9190613a1f565b6135079190613a6c565b670de0b6b3a76400008061351b8580613a1f565b6135259190613a6c565b613530866003613a1f565b6134be9190613a1f565b600082841115613561578161354f84866139be565b1161355c5750600161141c565b613579565b8161356c85856139be565b116135795750600161141c565b5060009392505050565b6060831561359257508161141c565b8251156135a25782518084602001fd5b8160405162461bcd60e51b81526004016108b4919061369a565b6001600160a01b03811681146135d157600080fd5b50565b6000806000806000608086880312156135ec57600080fd5b85359450602086013593506040860135613605816135bc565b9250606086013567ffffffffffffffff8082111561362257600080fd5b818801915088601f83011261363657600080fd5b81358181111561364557600080fd5b89602082850101111561365757600080fd5b9699959850939650602001949392505050565b60005b8381101561368557818101518382015260200161366d565b83811115613694576000848401525b50505050565b60208152600082518060208401526136b981604085016020870161366a565b601f01601f19169190910160400192915050565b600080604083850312156136e057600080fd5b82356136eb816135bc565b946020939093013593505050565b6000806000806080858703121561370f57600080fd5b843561371a816135bc565b966020860135965060408601359560600135945092505050565b6020808252825182820181905260009190848201906040850190845b8181101561376c57835183529284019291840191600101613750565b50909695505050505050565b60006020828403121561378a57600080fd5b813561141c816135bc565b6000806000606084860312156137aa57600080fd5b83356137b5816135bc565b925060208401356137c5816135bc565b929592945050506040919091013590565b6000602082840312156137e857600080fd5b5035919050565b60008060006060848603121561380457600080fd5b833561380f816135bc565b95602085013595506040909401359392505050565b600080600080600080600060e0888a03121561383f57600080fd5b873561384a816135bc565b9650602088013561385a816135bc565b95506040880135945060608801359350608088013560ff8116811461387e57600080fd5b9699959850939692959460a0840135945060c09093013592915050565b600080604083850312156138ae57600080fd5b82356138b9816135bc565b915060208301356138c9816135bc565b809150509250929050565b600080604083850312156138e757600080fd5b8235915060208301356138c9816135bc565b6020808252600e908201526d1499595b9d1c985b9d0818d85b1b60921b604082015260600190565b60006020828403121561393357600080fd5b8151801515811461141c57600080fd5b60018060a01b038616815284602082015283604082015260806060820152816080820152818360a0830137600081830160a090810191909152601f909201601f19160101949350505050565b6000602082840312156139a157600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000828210156139d0576139d06139a8565b500390565b600181811c908216806139e957607f821691505b602082108103612f0757634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6000816000190483118215151615613a3957613a396139a8565b500290565b60008219821115613a5157613a516139a8565b500190565b634e487b7160e01b600052603260045260246000fd5b600082613a8957634e487b7160e01b600052601260045260246000fd5b500490565b600060018201613aa057613aa06139a8565b5060010190565b600060208284031215613ab957600080fd5b815161141c816135bc565b60008251613ad681846020870161366a565b919091019291505056fea26469706673582212204c207f5ed4e5a822c9915f33566f3b97dd6fc16fbfad35a38f7dcc7ffa2b5f3d64736f6c634300080d003360e060405234801561001057600080fd5b5060405161051b38038061051b83398101604081905261002f91610066565b336080526001600160a01b0391821660a0521660c052610099565b80516001600160a01b038116811461006157600080fd5b919050565b6000806040838503121561007957600080fd5b6100828361004a565b91506100906020840161004a565b90509250929050565b60805160a05160c0516104566100c5600039600060fa0152600060c001526000605001526104566000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063533cf5ce14610030575b600080fd5b61004361003e36600461033e565b610045565b005b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146100ad5760405162461bcd60e51b81526020600482015260086024820152672737ba103830b4b960c11b60448201526064015b60405180910390fd5b81156100e7576100e76001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168484610126565b8015610121576101216001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168483610126565b505050565b604080516001600160a01b03848116602483015260448083018590528351808403909101815260649092018352602080830180516001600160e01b031663a9059cbb60e01b17905283518085019094528084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656490840152610121928692916000916101b6918516908490610233565b80519091501561012157808060200190518101906101d4919061037f565b6101215760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016100a4565b60606001600160a01b0384163b61028c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016100a4565b600080856001600160a01b0316856040516102a791906103d1565b6000604051808303816000865af19150503d80600081146102e4576040519150601f19603f3d011682016040523d82523d6000602084013e6102e9565b606091505b50915091506102f9828286610305565b925050505b9392505050565b606083156103145750816102fe565b8251156103245782518084602001fd5b8160405162461bcd60e51b81526004016100a491906103ed565b60008060006060848603121561035357600080fd5b83356001600160a01b038116811461036a57600080fd5b95602085013595506040909401359392505050565b60006020828403121561039157600080fd5b815180151581146102fe57600080fd5b60005b838110156103bc5781810151838201526020016103a4565b838111156103cb576000848401525b50505050565b600082516103e38184602087016103a1565b9190910192915050565b602081526000825180602084015261040c8160408501602087016103a1565b601f01601f1916919091016040019291505056fea2646970667358221220f912218eee719556b5bd617e35a6e570e0a250fab4546c98b59cf59984822a0a64736f6c634300080d0033a2646970667358221220992e247449f339c2ee82935e51eb29d8d3d2de3676d45dd8be62f4b5a8fa396664736f6c634300080d0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "stateVariables": {
      "isPair": {
        "details": "Simplified check if its a pair, given that `stable` flag might not be available in peripherals"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 361,
        "contract": "contracts/base/core/VoltFactory.sol:VoltFactory",
        "label": "isPaused",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 363,
        "contract": "contracts/base/core/VoltFactory.sol:VoltFactory",
        "label": "pauser",
        "offset": 1,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 365,
        "contract": "contracts/base/core/VoltFactory.sol:VoltFactory",
        "label": "pendingPauser",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 368,
        "contract": "contracts/base/core/VoltFactory.sol:VoltFactory",
        "label": "treasury",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 377,
        "contract": "contracts/base/core/VoltFactory.sol:VoltFactory",
        "label": "getPair",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_bool,t_address)))"
      },
      {
        "astId": 380,
        "contract": "contracts/base/core/VoltFactory.sol:VoltFactory",
        "label": "allPairs",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 386,
        "contract": "contracts/base/core/VoltFactory.sol:VoltFactory",
        "label": "isPair",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 388,
        "contract": "contracts/base/core/VoltFactory.sol:VoltFactory",
        "label": "_temp0",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 390,
        "contract": "contracts/base/core/VoltFactory.sol:VoltFactory",
        "label": "_temp1",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 392,
        "contract": "contracts/base/core/VoltFactory.sol:VoltFactory",
        "label": "_temp",
        "offset": 20,
        "slot": "7",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_mapping(t_bool,t_address)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => mapping(bool => address)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_bool,t_address))"
      },
      "t_mapping(t_address,t_mapping(t_bool,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bool => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bool,t_address)"
      },
      "t_mapping(t_bool,t_address)": {
        "encoding": "mapping",
        "key": "t_bool",
        "label": "mapping(bool => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      }
    }
  }
}